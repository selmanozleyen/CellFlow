============================= test session starts ==============================
platform darwin -- Python 3.11.9, pytest-8.2.2, pluggy-1.5.0
rootdir: /Users/selman.ozleyen/Documents/projects/cell_flow_perturbation
configfile: pyproject.toml
plugins: cov-5.0.0, memray-1.7.0, typeguard-2.13.3, jaxtyping-0.2.34, mock-3.14.0, xdist-3.6.1
collected 188 items

tests/data/test_datamanager.py ......................................... [ 21%]
............FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [ 60%]
..........................s............................................. [ 98%]
...                                                                      [100%]

=================================== FAILURES ===================================
_ TestDataManager.test_get_train_data[sample_covariates0-perturbation_covariate_reps0-perturbation_covariates0-split_covariates0-X] _

self = <tests.data.test_datamanager.TestDataManager object at 0x3297c8410>
adata_perturbation = AnnData object with n_obs × n_vars = 500 × 50
    obs: 'cell_type', 'dosage', 'drug1', 'drug2', 'drug3', 'dosage_a', '...sage_c', 'drug_a', 'drug_b', 'drug_c', 'control'
    uns: 'drug', 'cell_type'
    obsm: 'X_pca'
    layers: 'my_counts'
sample_rep = 'X', split_covariates = []
perturbation_covariates = {'drug': ['drug1']}, perturbation_covariate_reps = {}
sample_covariates = []

    @pytest.mark.parametrize("sample_rep", ["X", "X_pca"])
    @pytest.mark.parametrize("split_covariates", [[], ["cell_type"]])
    @pytest.mark.parametrize("perturbation_covariates", perturbation_covariates_args)
    @pytest.mark.parametrize("perturbation_covariate_reps", [{}, {"drug": "drug"}])
    @pytest.mark.parametrize("sample_covariates", [[], ["dosage_c"]])
    def test_get_train_data(
        self,
        adata_perturbation: ad.AnnData,
        sample_rep,
        split_covariates,
        perturbation_covariates,
        perturbation_covariate_reps,
        sample_covariates,
    ):
        from cfp.data._data import TrainingData
        from cfp.data._datamanager import DataManager
    
        dm = DataManager(
            adata_perturbation,
            sample_rep=sample_rep,
            split_covariates=split_covariates,
            control_key="control",
            perturbation_covariates=perturbation_covariates,
            perturbation_covariate_reps=perturbation_covariate_reps,
            sample_covariates=sample_covariates,
        )
        assert isinstance(dm, DataManager)
        assert dm._sample_rep == sample_rep
        assert dm._control_key == "control"
        assert dm._split_covariates == split_covariates
        assert dm._perturbation_covariates == perturbation_covariates
        assert dm._sample_covariates == sample_covariates
    
        train_data = dm.get_train_data(adata_perturbation)
        assert isinstance(train_data, TrainingData)
        assert isinstance(train_data, TrainingData)
        assert (
            (train_data.perturbation_covariates_mask == -1)
            + (train_data.split_covariates_mask == -1)
        ).all()
        if split_covariates == []:
>           assert train_data.n_controls == 1
E           assert 0 == 1
E            +  where 0 = TrainingData(cell_data=array([[0.96977981, 0.71198559, 0.30602165, ..., 0.1977691 , 0.05816599,\n        0.72991673],\n ...3])}, max_combination_length=1, null_value=0.0, data_manager=<cfp.data._datamanager.DataManager object at 0x329898dd0>).n_controls

tests/data/test_datamanager.py:190: AssertionError
_ TestDataManager.test_get_train_data[sample_covariates0-perturbation_covariate_reps0-perturbation_covariates0-split_covariates0-X_pca] _

self = <tests.data.test_datamanager.TestDataManager object at 0x3297c8910>
adata_perturbation = AnnData object with n_obs × n_vars = 500 × 50
    obs: 'cell_type', 'dosage', 'drug1', 'drug2', 'drug3', 'dosage_a', '...sage_c', 'drug_a', 'drug_b', 'drug_c', 'control'
    uns: 'drug', 'cell_type'
    obsm: 'X_pca'
    layers: 'my_counts'
sample_rep = 'X_pca', split_covariates = []
perturbation_covariates = {'drug': ['drug1']}, perturbation_covariate_reps = {}
sample_covariates = []

    @pytest.mark.parametrize("sample_rep", ["X", "X_pca"])
    @pytest.mark.parametrize("split_covariates", [[], ["cell_type"]])
    @pytest.mark.parametrize("perturbation_covariates", perturbation_covariates_args)
    @pytest.mark.parametrize("perturbation_covariate_reps", [{}, {"drug": "drug"}])
    @pytest.mark.parametrize("sample_covariates", [[], ["dosage_c"]])
    def test_get_train_data(
        self,
        adata_perturbation: ad.AnnData,
        sample_rep,
        split_covariates,
        perturbation_covariates,
        perturbation_covariate_reps,
        sample_covariates,
    ):
        from cfp.data._data import TrainingData
        from cfp.data._datamanager import DataManager
    
        dm = DataManager(
            adata_perturbation,
            sample_rep=sample_rep,
            split_covariates=split_covariates,
            control_key="control",
            perturbation_covariates=perturbation_covariates,
            perturbation_covariate_reps=perturbation_covariate_reps,
            sample_covariates=sample_covariates,
        )
        assert isinstance(dm, DataManager)
        assert dm._sample_rep == sample_rep
        assert dm._control_key == "control"
        assert dm._split_covariates == split_covariates
        assert dm._perturbation_covariates == perturbation_covariates
        assert dm._sample_covariates == sample_covariates
    
        train_data = dm.get_train_data(adata_perturbation)
        assert isinstance(train_data, TrainingData)
        assert isinstance(train_data, TrainingData)
        assert (
            (train_data.perturbation_covariates_mask == -1)
            + (train_data.split_covariates_mask == -1)
        ).all()
        if split_covariates == []:
>           assert train_data.n_controls == 1
E           assert 0 == 1
E            +  where 0 = TrainingData(cell_data=array([[0.47057885, 0.19716204, 0.84790492, ..., 0.77955826, 0.56939433,\n        0.04661763],\n ...3])}, max_combination_length=1, null_value=0.0, data_manager=<cfp.data._datamanager.DataManager object at 0x329722350>).n_controls

tests/data/test_datamanager.py:190: AssertionError
_ TestDataManager.test_get_train_data[sample_covariates0-perturbation_covariate_reps0-perturbation_covariates0-split_covariates1-X] _

self = <tests.data.test_datamanager.TestDataManager object at 0x3297c15d0>
adata_perturbation = AnnData object with n_obs × n_vars = 500 × 50
    obs: 'cell_type', 'dosage', 'drug1', 'drug2', 'drug3', 'dosage_a', '...sage_c', 'drug_a', 'drug_b', 'drug_c', 'control'
    uns: 'drug', 'cell_type'
    obsm: 'X_pca'
    layers: 'my_counts'
sample_rep = 'X', split_covariates = ['cell_type']
perturbation_covariates = {'drug': ['drug1']}, perturbation_covariate_reps = {}
sample_covariates = []

    @pytest.mark.parametrize("sample_rep", ["X", "X_pca"])
    @pytest.mark.parametrize("split_covariates", [[], ["cell_type"]])
    @pytest.mark.parametrize("perturbation_covariates", perturbation_covariates_args)
    @pytest.mark.parametrize("perturbation_covariate_reps", [{}, {"drug": "drug"}])
    @pytest.mark.parametrize("sample_covariates", [[], ["dosage_c"]])
    def test_get_train_data(
        self,
        adata_perturbation: ad.AnnData,
        sample_rep,
        split_covariates,
        perturbation_covariates,
        perturbation_covariate_reps,
        sample_covariates,
    ):
        from cfp.data._data import TrainingData
        from cfp.data._datamanager import DataManager
    
        dm = DataManager(
            adata_perturbation,
            sample_rep=sample_rep,
            split_covariates=split_covariates,
            control_key="control",
            perturbation_covariates=perturbation_covariates,
            perturbation_covariate_reps=perturbation_covariate_reps,
            sample_covariates=sample_covariates,
        )
        assert isinstance(dm, DataManager)
        assert dm._sample_rep == sample_rep
        assert dm._control_key == "control"
        assert dm._split_covariates == split_covariates
        assert dm._perturbation_covariates == perturbation_covariates
        assert dm._sample_covariates == sample_covariates
    
        train_data = dm.get_train_data(adata_perturbation)
        assert isinstance(train_data, TrainingData)
        assert isinstance(train_data, TrainingData)
        assert (
            (train_data.perturbation_covariates_mask == -1)
            + (train_data.split_covariates_mask == -1)
        ).all()
        if split_covariates == []:
            assert train_data.n_controls == 1
        if split_covariates == ["cell_type"]:
>           assert train_data.n_controls == len(
                adata_perturbation.obs["cell_type"].cat.categories
            )
E           AssertionError: assert 0 == 3
E            +  where 0 = TrainingData(cell_data=array([[0.91228979, 0.74992498, 0.16162554, ..., 0.98836496, 0.35031463,\n        0.86262442],\n ...1])}, max_combination_length=1, null_value=0.0, data_manager=<cfp.data._datamanager.DataManager object at 0x3298a3050>).n_controls
E            +  and   3 = len(Index(['cell_line_a', 'cell_line_b', 'cell_line_c'], dtype='object'))
E            +    where Index(['cell_line_a', 'cell_line_b', 'cell_line_c'], dtype='object') = <pandas.core.arrays.categorical.CategoricalAccessor object at 0x3298a1750>.categories
E            +      where <pandas.core.arrays.categorical.CategoricalAccessor object at 0x3298a1750> = 0      cell_line_c\n1      cell_line_b\n2      cell_line_c\n3      cell_line_c\n4      cell_line_b\n          ...     \n495 ...e_a\nName: cell_type, Length: 500, dtype: category\nCategories (3, object): ['cell_line_a', 'cell_line_b', 'cell_line_c'].cat

tests/data/test_datamanager.py:192: AssertionError
_ TestDataManager.test_get_train_data[sample_covariates0-perturbation_covariate_reps0-perturbation_covariates0-split_covariates1-X_pca] _

self = <tests.data.test_datamanager.TestDataManager object at 0x3297c2a10>
adata_perturbation = AnnData object with n_obs × n_vars = 500 × 50
    obs: 'cell_type', 'dosage', 'drug1', 'drug2', 'drug3', 'dosage_a', '...sage_c', 'drug_a', 'drug_b', 'drug_c', 'control'
    uns: 'drug', 'cell_type'
    obsm: 'X_pca'
    layers: 'my_counts'
sample_rep = 'X_pca', split_covariates = ['cell_type']
perturbation_covariates = {'drug': ['drug1']}, perturbation_covariate_reps = {}
sample_covariates = []

    @pytest.mark.parametrize("sample_rep", ["X", "X_pca"])
    @pytest.mark.parametrize("split_covariates", [[], ["cell_type"]])
    @pytest.mark.parametrize("perturbation_covariates", perturbation_covariates_args)
    @pytest.mark.parametrize("perturbation_covariate_reps", [{}, {"drug": "drug"}])
    @pytest.mark.parametrize("sample_covariates", [[], ["dosage_c"]])
    def test_get_train_data(
        self,
        adata_perturbation: ad.AnnData,
        sample_rep,
        split_covariates,
        perturbation_covariates,
        perturbation_covariate_reps,
        sample_covariates,
    ):
        from cfp.data._data import TrainingData
        from cfp.data._datamanager import DataManager
    
        dm = DataManager(
            adata_perturbation,
            sample_rep=sample_rep,
            split_covariates=split_covariates,
            control_key="control",
            perturbation_covariates=perturbation_covariates,
            perturbation_covariate_reps=perturbation_covariate_reps,
            sample_covariates=sample_covariates,
        )
        assert isinstance(dm, DataManager)
        assert dm._sample_rep == sample_rep
        assert dm._control_key == "control"
        assert dm._split_covariates == split_covariates
        assert dm._perturbation_covariates == perturbation_covariates
        assert dm._sample_covariates == sample_covariates
    
        train_data = dm.get_train_data(adata_perturbation)
        assert isinstance(train_data, TrainingData)
        assert isinstance(train_data, TrainingData)
        assert (
            (train_data.perturbation_covariates_mask == -1)
            + (train_data.split_covariates_mask == -1)
        ).all()
        if split_covariates == []:
            assert train_data.n_controls == 1
        if split_covariates == ["cell_type"]:
>           assert train_data.n_controls == len(
                adata_perturbation.obs["cell_type"].cat.categories
            )
E           AssertionError: assert 0 == 3
E            +  where 0 = TrainingData(cell_data=array([[0.6985654 , 0.01603482, 0.74214628, ..., 0.86126165, 0.4009368 ,\n        0.05655895],\n ...1])}, max_combination_length=1, null_value=0.0, data_manager=<cfp.data._datamanager.DataManager object at 0x329d13c50>).n_controls
E            +  and   3 = len(Index(['cell_line_a', 'cell_line_b', 'cell_line_c'], dtype='object'))
E            +    where Index(['cell_line_a', 'cell_line_b', 'cell_line_c'], dtype='object') = <pandas.core.arrays.categorical.CategoricalAccessor object at 0x329d11990>.categories
E            +      where <pandas.core.arrays.categorical.CategoricalAccessor object at 0x329d11990> = 0      cell_line_a\n1      cell_line_b\n2      cell_line_a\n3      cell_line_a\n4      cell_line_c\n          ...     \n495 ...e_a\nName: cell_type, Length: 500, dtype: category\nCategories (3, object): ['cell_line_a', 'cell_line_b', 'cell_line_c'].cat

tests/data/test_datamanager.py:192: AssertionError
_ TestDataManager.test_get_train_data[sample_covariates0-perturbation_covariate_reps0-perturbation_covariates1-split_covariates0-X] _

self = <tests.data.test_datamanager.TestDataManager object at 0x3297c2c90>
adata_perturbation = AnnData object with n_obs × n_vars = 500 × 50
    obs: 'cell_type', 'dosage', 'drug1', 'drug2', 'drug3', 'dosage_a', '...sage_c', 'drug_a', 'drug_b', 'drug_c', 'control'
    uns: 'drug', 'cell_type'
    obsm: 'X_pca'
    layers: 'my_counts'
sample_rep = 'X', split_covariates = []
perturbation_covariates = {'dosage': ['dosage_a'], 'drug': ['drug1']}
perturbation_covariate_reps = {}, sample_covariates = []

    @pytest.mark.parametrize("sample_rep", ["X", "X_pca"])
    @pytest.mark.parametrize("split_covariates", [[], ["cell_type"]])
    @pytest.mark.parametrize("perturbation_covariates", perturbation_covariates_args)
    @pytest.mark.parametrize("perturbation_covariate_reps", [{}, {"drug": "drug"}])
    @pytest.mark.parametrize("sample_covariates", [[], ["dosage_c"]])
    def test_get_train_data(
        self,
        adata_perturbation: ad.AnnData,
        sample_rep,
        split_covariates,
        perturbation_covariates,
        perturbation_covariate_reps,
        sample_covariates,
    ):
        from cfp.data._data import TrainingData
        from cfp.data._datamanager import DataManager
    
        dm = DataManager(
            adata_perturbation,
            sample_rep=sample_rep,
            split_covariates=split_covariates,
            control_key="control",
            perturbation_covariates=perturbation_covariates,
            perturbation_covariate_reps=perturbation_covariate_reps,
            sample_covariates=sample_covariates,
        )
        assert isinstance(dm, DataManager)
        assert dm._sample_rep == sample_rep
        assert dm._control_key == "control"
        assert dm._split_covariates == split_covariates
        assert dm._perturbation_covariates == perturbation_covariates
        assert dm._sample_covariates == sample_covariates
    
        train_data = dm.get_train_data(adata_perturbation)
        assert isinstance(train_data, TrainingData)
        assert isinstance(train_data, TrainingData)
        assert (
            (train_data.perturbation_covariates_mask == -1)
            + (train_data.split_covariates_mask == -1)
        ).all()
        if split_covariates == []:
>           assert train_data.n_controls == 1
E           assert 0 == 1
E            +  where 0 = TrainingData(cell_data=array([[0.68194558, 0.7805225 , 0.43502355, ..., 0.6826774 , 0.40108508,\n        0.92709566],\n ...1])}, max_combination_length=1, null_value=0.0, data_manager=<cfp.data._datamanager.DataManager object at 0x32986acd0>).n_controls

tests/data/test_datamanager.py:190: AssertionError
_ TestDataManager.test_get_train_data[sample_covariates0-perturbation_covariate_reps0-perturbation_covariates1-split_covariates0-X_pca] _

self = <tests.data.test_datamanager.TestDataManager object at 0x3297c3090>
adata_perturbation = AnnData object with n_obs × n_vars = 500 × 50
    obs: 'cell_type', 'dosage', 'drug1', 'drug2', 'drug3', 'dosage_a', '...sage_c', 'drug_a', 'drug_b', 'drug_c', 'control'
    uns: 'drug', 'cell_type'
    obsm: 'X_pca'
    layers: 'my_counts'
sample_rep = 'X_pca', split_covariates = []
perturbation_covariates = {'dosage': ['dosage_a'], 'drug': ['drug1']}
perturbation_covariate_reps = {}, sample_covariates = []

    @pytest.mark.parametrize("sample_rep", ["X", "X_pca"])
    @pytest.mark.parametrize("split_covariates", [[], ["cell_type"]])
    @pytest.mark.parametrize("perturbation_covariates", perturbation_covariates_args)
    @pytest.mark.parametrize("perturbation_covariate_reps", [{}, {"drug": "drug"}])
    @pytest.mark.parametrize("sample_covariates", [[], ["dosage_c"]])
    def test_get_train_data(
        self,
        adata_perturbation: ad.AnnData,
        sample_rep,
        split_covariates,
        perturbation_covariates,
        perturbation_covariate_reps,
        sample_covariates,
    ):
        from cfp.data._data import TrainingData
        from cfp.data._datamanager import DataManager
    
        dm = DataManager(
            adata_perturbation,
            sample_rep=sample_rep,
            split_covariates=split_covariates,
            control_key="control",
            perturbation_covariates=perturbation_covariates,
            perturbation_covariate_reps=perturbation_covariate_reps,
            sample_covariates=sample_covariates,
        )
        assert isinstance(dm, DataManager)
        assert dm._sample_rep == sample_rep
        assert dm._control_key == "control"
        assert dm._split_covariates == split_covariates
        assert dm._perturbation_covariates == perturbation_covariates
        assert dm._sample_covariates == sample_covariates
    
        train_data = dm.get_train_data(adata_perturbation)
        assert isinstance(train_data, TrainingData)
        assert isinstance(train_data, TrainingData)
        assert (
            (train_data.perturbation_covariates_mask == -1)
            + (train_data.split_covariates_mask == -1)
        ).all()
        if split_covariates == []:
>           assert train_data.n_controls == 1
E           assert 0 == 1
E            +  where 0 = TrainingData(cell_data=array([[0.42355579, 0.4186519 , 0.44732561, ..., 0.60904384, 0.39812403,\n        0.13952577],\n ...1])}, max_combination_length=1, null_value=0.0, data_manager=<cfp.data._datamanager.DataManager object at 0x3298446d0>).n_controls

tests/data/test_datamanager.py:190: AssertionError
_ TestDataManager.test_get_train_data[sample_covariates0-perturbation_covariate_reps0-perturbation_covariates1-split_covariates1-X] _

self = <tests.data.test_datamanager.TestDataManager object at 0x3297c3410>
adata_perturbation = AnnData object with n_obs × n_vars = 500 × 50
    obs: 'cell_type', 'dosage', 'drug1', 'drug2', 'drug3', 'dosage_a', '...sage_c', 'drug_a', 'drug_b', 'drug_c', 'control'
    uns: 'drug', 'cell_type'
    obsm: 'X_pca'
    layers: 'my_counts'
sample_rep = 'X', split_covariates = ['cell_type']
perturbation_covariates = {'dosage': ['dosage_a'], 'drug': ['drug1']}
perturbation_covariate_reps = {}, sample_covariates = []

    @pytest.mark.parametrize("sample_rep", ["X", "X_pca"])
    @pytest.mark.parametrize("split_covariates", [[], ["cell_type"]])
    @pytest.mark.parametrize("perturbation_covariates", perturbation_covariates_args)
    @pytest.mark.parametrize("perturbation_covariate_reps", [{}, {"drug": "drug"}])
    @pytest.mark.parametrize("sample_covariates", [[], ["dosage_c"]])
    def test_get_train_data(
        self,
        adata_perturbation: ad.AnnData,
        sample_rep,
        split_covariates,
        perturbation_covariates,
        perturbation_covariate_reps,
        sample_covariates,
    ):
        from cfp.data._data import TrainingData
        from cfp.data._datamanager import DataManager
    
        dm = DataManager(
            adata_perturbation,
            sample_rep=sample_rep,
            split_covariates=split_covariates,
            control_key="control",
            perturbation_covariates=perturbation_covariates,
            perturbation_covariate_reps=perturbation_covariate_reps,
            sample_covariates=sample_covariates,
        )
        assert isinstance(dm, DataManager)
        assert dm._sample_rep == sample_rep
        assert dm._control_key == "control"
        assert dm._split_covariates == split_covariates
        assert dm._perturbation_covariates == perturbation_covariates
        assert dm._sample_covariates == sample_covariates
    
        train_data = dm.get_train_data(adata_perturbation)
        assert isinstance(train_data, TrainingData)
        assert isinstance(train_data, TrainingData)
        assert (
            (train_data.perturbation_covariates_mask == -1)
            + (train_data.split_covariates_mask == -1)
        ).all()
        if split_covariates == []:
            assert train_data.n_controls == 1
        if split_covariates == ["cell_type"]:
>           assert train_data.n_controls == len(
                adata_perturbation.obs["cell_type"].cat.categories
            )
E           AssertionError: assert 0 == 3
E            +  where 0 = TrainingData(cell_data=array([[0.790594  , 0.51841771, 0.04064155, ..., 0.04983987, 0.48902626,\n        0.36488848],\n ...5])}, max_combination_length=1, null_value=0.0, data_manager=<cfp.data._datamanager.DataManager object at 0x32984b5d0>).n_controls
E            +  and   3 = len(Index(['cell_line_a', 'cell_line_b', 'cell_line_c'], dtype='object'))
E            +    where Index(['cell_line_a', 'cell_line_b', 'cell_line_c'], dtype='object') = <pandas.core.arrays.categorical.CategoricalAccessor object at 0x329d47790>.categories
E            +      where <pandas.core.arrays.categorical.CategoricalAccessor object at 0x329d47790> = 0      cell_line_c\n1      cell_line_c\n2      cell_line_c\n3      cell_line_a\n4      cell_line_c\n          ...     \n495 ...e_b\nName: cell_type, Length: 500, dtype: category\nCategories (3, object): ['cell_line_a', 'cell_line_b', 'cell_line_c'].cat

tests/data/test_datamanager.py:192: AssertionError
_ TestDataManager.test_get_train_data[sample_covariates0-perturbation_covariate_reps0-perturbation_covariates1-split_covariates1-X_pca] _

self = <tests.data.test_datamanager.TestDataManager object at 0x3297c3910>
adata_perturbation = AnnData object with n_obs × n_vars = 500 × 50
    obs: 'cell_type', 'dosage', 'drug1', 'drug2', 'drug3', 'dosage_a', '...sage_c', 'drug_a', 'drug_b', 'drug_c', 'control'
    uns: 'drug', 'cell_type'
    obsm: 'X_pca'
    layers: 'my_counts'
sample_rep = 'X_pca', split_covariates = ['cell_type']
perturbation_covariates = {'dosage': ['dosage_a'], 'drug': ['drug1']}
perturbation_covariate_reps = {}, sample_covariates = []

    @pytest.mark.parametrize("sample_rep", ["X", "X_pca"])
    @pytest.mark.parametrize("split_covariates", [[], ["cell_type"]])
    @pytest.mark.parametrize("perturbation_covariates", perturbation_covariates_args)
    @pytest.mark.parametrize("perturbation_covariate_reps", [{}, {"drug": "drug"}])
    @pytest.mark.parametrize("sample_covariates", [[], ["dosage_c"]])
    def test_get_train_data(
        self,
        adata_perturbation: ad.AnnData,
        sample_rep,
        split_covariates,
        perturbation_covariates,
        perturbation_covariate_reps,
        sample_covariates,
    ):
        from cfp.data._data import TrainingData
        from cfp.data._datamanager import DataManager
    
        dm = DataManager(
            adata_perturbation,
            sample_rep=sample_rep,
            split_covariates=split_covariates,
            control_key="control",
            perturbation_covariates=perturbation_covariates,
            perturbation_covariate_reps=perturbation_covariate_reps,
            sample_covariates=sample_covariates,
        )
        assert isinstance(dm, DataManager)
        assert dm._sample_rep == sample_rep
        assert dm._control_key == "control"
        assert dm._split_covariates == split_covariates
        assert dm._perturbation_covariates == perturbation_covariates
        assert dm._sample_covariates == sample_covariates
    
        train_data = dm.get_train_data(adata_perturbation)
        assert isinstance(train_data, TrainingData)
        assert isinstance(train_data, TrainingData)
        assert (
            (train_data.perturbation_covariates_mask == -1)
            + (train_data.split_covariates_mask == -1)
        ).all()
        if split_covariates == []:
            assert train_data.n_controls == 1
        if split_covariates == ["cell_type"]:
>           assert train_data.n_controls == len(
                adata_perturbation.obs["cell_type"].cat.categories
            )
E           AssertionError: assert 0 == 3
E            +  where 0 = TrainingData(cell_data=array([[0.76323201, 0.55112275, 0.27438507, ..., 0.27473823, 0.74016191,\n        0.92726192],\n ...5])}, max_combination_length=1, null_value=0.0, data_manager=<cfp.data._datamanager.DataManager object at 0x32987e0d0>).n_controls
E            +  and   3 = len(Index(['cell_line_a', 'cell_line_b', 'cell_line_c'], dtype='object'))
E            +    where Index(['cell_line_a', 'cell_line_b', 'cell_line_c'], dtype='object') = <pandas.core.arrays.categorical.CategoricalAccessor object at 0x329d47a10>.categories
E            +      where <pandas.core.arrays.categorical.CategoricalAccessor object at 0x329d47a10> = 0      cell_line_c\n1      cell_line_c\n2      cell_line_b\n3      cell_line_a\n4      cell_line_a\n          ...     \n495 ...e_b\nName: cell_type, Length: 500, dtype: category\nCategories (3, object): ['cell_line_a', 'cell_line_b', 'cell_line_c'].cat

tests/data/test_datamanager.py:192: AssertionError
_ TestDataManager.test_get_train_data[sample_covariates0-perturbation_covariate_reps0-perturbation_covariates2-split_covariates0-X] _

self = <tests.data.test_datamanager.TestDataManager object at 0x3297c3cd0>
adata_perturbation = AnnData object with n_obs × n_vars = 500 × 50
    obs: 'cell_type', 'dosage', 'drug1', 'drug2', 'drug3', 'dosage_a', '...sage_c', 'drug_a', 'drug_b', 'drug_c', 'control'
    uns: 'drug', 'cell_type'
    obsm: 'X_pca'
    layers: 'my_counts'
sample_rep = 'X', split_covariates = []
perturbation_covariates = {'dosage': ['dosage_a'], 'drug': ['drug_a']}
perturbation_covariate_reps = {}, sample_covariates = []

    @pytest.mark.parametrize("sample_rep", ["X", "X_pca"])
    @pytest.mark.parametrize("split_covariates", [[], ["cell_type"]])
    @pytest.mark.parametrize("perturbation_covariates", perturbation_covariates_args)
    @pytest.mark.parametrize("perturbation_covariate_reps", [{}, {"drug": "drug"}])
    @pytest.mark.parametrize("sample_covariates", [[], ["dosage_c"]])
    def test_get_train_data(
        self,
        adata_perturbation: ad.AnnData,
        sample_rep,
        split_covariates,
        perturbation_covariates,
        perturbation_covariate_reps,
        sample_covariates,
    ):
        from cfp.data._data import TrainingData
        from cfp.data._datamanager import DataManager
    
        dm = DataManager(
            adata_perturbation,
            sample_rep=sample_rep,
            split_covariates=split_covariates,
            control_key="control",
            perturbation_covariates=perturbation_covariates,
            perturbation_covariate_reps=perturbation_covariate_reps,
            sample_covariates=sample_covariates,
        )
        assert isinstance(dm, DataManager)
        assert dm._sample_rep == sample_rep
        assert dm._control_key == "control"
        assert dm._split_covariates == split_covariates
        assert dm._perturbation_covariates == perturbation_covariates
        assert dm._sample_covariates == sample_covariates
    
        train_data = dm.get_train_data(adata_perturbation)
        assert isinstance(train_data, TrainingData)
        assert isinstance(train_data, TrainingData)
        assert (
            (train_data.perturbation_covariates_mask == -1)
            + (train_data.split_covariates_mask == -1)
        ).all()
        if split_covariates == []:
>           assert train_data.n_controls == 1
E           assert 0 == 1
E            +  where 0 = TrainingData(cell_data=array([[0.79298756, 0.27049256, 0.34885654, ..., 0.3974889 , 0.14739925,\n        0.79453544],\n ...5])}, max_combination_length=1, null_value=0.0, data_manager=<cfp.data._datamanager.DataManager object at 0x32976b950>).n_controls

tests/data/test_datamanager.py:190: AssertionError
_ TestDataManager.test_get_train_data[sample_covariates0-perturbation_covariate_reps0-perturbation_covariates2-split_covariates0-X_pca] _

self = <tests.data.test_datamanager.TestDataManager object at 0x3297d1650>
adata_perturbation = AnnData object with n_obs × n_vars = 500 × 50
    obs: 'cell_type', 'dosage', 'drug1', 'drug2', 'drug3', 'dosage_a', '...sage_c', 'drug_a', 'drug_b', 'drug_c', 'control'
    uns: 'drug', 'cell_type'
    obsm: 'X_pca'
    layers: 'my_counts'
sample_rep = 'X_pca', split_covariates = []
perturbation_covariates = {'dosage': ['dosage_a'], 'drug': ['drug_a']}
perturbation_covariate_reps = {}, sample_covariates = []

    @pytest.mark.parametrize("sample_rep", ["X", "X_pca"])
    @pytest.mark.parametrize("split_covariates", [[], ["cell_type"]])
    @pytest.mark.parametrize("perturbation_covariates", perturbation_covariates_args)
    @pytest.mark.parametrize("perturbation_covariate_reps", [{}, {"drug": "drug"}])
    @pytest.mark.parametrize("sample_covariates", [[], ["dosage_c"]])
    def test_get_train_data(
        self,
        adata_perturbation: ad.AnnData,
        sample_rep,
        split_covariates,
        perturbation_covariates,
        perturbation_covariate_reps,
        sample_covariates,
    ):
        from cfp.data._data import TrainingData
        from cfp.data._datamanager import DataManager
    
        dm = DataManager(
            adata_perturbation,
            sample_rep=sample_rep,
            split_covariates=split_covariates,
            control_key="control",
            perturbation_covariates=perturbation_covariates,
            perturbation_covariate_reps=perturbation_covariate_reps,
            sample_covariates=sample_covariates,
        )
        assert isinstance(dm, DataManager)
        assert dm._sample_rep == sample_rep
        assert dm._control_key == "control"
        assert dm._split_covariates == split_covariates
        assert dm._perturbation_covariates == perturbation_covariates
        assert dm._sample_covariates == sample_covariates
    
        train_data = dm.get_train_data(adata_perturbation)
        assert isinstance(train_data, TrainingData)
        assert isinstance(train_data, TrainingData)
        assert (
            (train_data.perturbation_covariates_mask == -1)
            + (train_data.split_covariates_mask == -1)
        ).all()
        if split_covariates == []:
>           assert train_data.n_controls == 1
E           assert 0 == 1
E            +  where 0 = TrainingData(cell_data=array([[0.24803681, 0.33470414, 0.51749534, ..., 0.01359342, 0.16231465,\n        0.81642207],\n ...5])}, max_combination_length=1, null_value=0.0, data_manager=<cfp.data._datamanager.DataManager object at 0x329868810>).n_controls

tests/data/test_datamanager.py:190: AssertionError
_ TestDataManager.test_get_train_data[sample_covariates0-perturbation_covariate_reps0-perturbation_covariates2-split_covariates1-X] _

self = <tests.data.test_datamanager.TestDataManager object at 0x3297d1790>
adata_perturbation = AnnData object with n_obs × n_vars = 500 × 50
    obs: 'cell_type', 'dosage', 'drug1', 'drug2', 'drug3', 'dosage_a', '...sage_c', 'drug_a', 'drug_b', 'drug_c', 'control'
    uns: 'drug', 'cell_type'
    obsm: 'X_pca'
    layers: 'my_counts'
sample_rep = 'X', split_covariates = ['cell_type']
perturbation_covariates = {'dosage': ['dosage_a'], 'drug': ['drug_a']}
perturbation_covariate_reps = {}, sample_covariates = []

    @pytest.mark.parametrize("sample_rep", ["X", "X_pca"])
    @pytest.mark.parametrize("split_covariates", [[], ["cell_type"]])
    @pytest.mark.parametrize("perturbation_covariates", perturbation_covariates_args)
    @pytest.mark.parametrize("perturbation_covariate_reps", [{}, {"drug": "drug"}])
    @pytest.mark.parametrize("sample_covariates", [[], ["dosage_c"]])
    def test_get_train_data(
        self,
        adata_perturbation: ad.AnnData,
        sample_rep,
        split_covariates,
        perturbation_covariates,
        perturbation_covariate_reps,
        sample_covariates,
    ):
        from cfp.data._data import TrainingData
        from cfp.data._datamanager import DataManager
    
        dm = DataManager(
            adata_perturbation,
            sample_rep=sample_rep,
            split_covariates=split_covariates,
            control_key="control",
            perturbation_covariates=perturbation_covariates,
            perturbation_covariate_reps=perturbation_covariate_reps,
            sample_covariates=sample_covariates,
        )
        assert isinstance(dm, DataManager)
        assert dm._sample_rep == sample_rep
        assert dm._control_key == "control"
        assert dm._split_covariates == split_covariates
        assert dm._perturbation_covariates == perturbation_covariates
        assert dm._sample_covariates == sample_covariates
    
        train_data = dm.get_train_data(adata_perturbation)
        assert isinstance(train_data, TrainingData)
        assert isinstance(train_data, TrainingData)
        assert (
            (train_data.perturbation_covariates_mask == -1)
            + (train_data.split_covariates_mask == -1)
        ).all()
        if split_covariates == []:
            assert train_data.n_controls == 1
        if split_covariates == ["cell_type"]:
>           assert train_data.n_controls == len(
                adata_perturbation.obs["cell_type"].cat.categories
            )
E           AssertionError: assert 0 == 3
E            +  where 0 = TrainingData(cell_data=array([[0.3215992 , 0.48319479, 0.79960066, ..., 0.49759992, 0.6984769 ,\n        0.04745184],\n ...7])}, max_combination_length=1, null_value=0.0, data_manager=<cfp.data._datamanager.DataManager object at 0x329d552d0>).n_controls
E            +  and   3 = len(Index(['cell_line_a', 'cell_line_b', 'cell_line_c'], dtype='object'))
E            +    where Index(['cell_line_a', 'cell_line_b', 'cell_line_c'], dtype='object') = <pandas.core.arrays.categorical.CategoricalAccessor object at 0x32989a4d0>.categories
E            +      where <pandas.core.arrays.categorical.CategoricalAccessor object at 0x32989a4d0> = 0      cell_line_a\n1      cell_line_b\n2      cell_line_b\n3      cell_line_b\n4      cell_line_a\n          ...     \n495 ...e_a\nName: cell_type, Length: 500, dtype: category\nCategories (3, object): ['cell_line_a', 'cell_line_b', 'cell_line_c'].cat

tests/data/test_datamanager.py:192: AssertionError
_ TestDataManager.test_get_train_data[sample_covariates0-perturbation_covariate_reps0-perturbation_covariates2-split_covariates1-X_pca] _

self = <tests.data.test_datamanager.TestDataManager object at 0x3297d18d0>
adata_perturbation = AnnData object with n_obs × n_vars = 500 × 50
    obs: 'cell_type', 'dosage', 'drug1', 'drug2', 'drug3', 'dosage_a', '...sage_c', 'drug_a', 'drug_b', 'drug_c', 'control'
    uns: 'drug', 'cell_type'
    obsm: 'X_pca'
    layers: 'my_counts'
sample_rep = 'X_pca', split_covariates = ['cell_type']
perturbation_covariates = {'dosage': ['dosage_a'], 'drug': ['drug_a']}
perturbation_covariate_reps = {}, sample_covariates = []

    @pytest.mark.parametrize("sample_rep", ["X", "X_pca"])
    @pytest.mark.parametrize("split_covariates", [[], ["cell_type"]])
    @pytest.mark.parametrize("perturbation_covariates", perturbation_covariates_args)
    @pytest.mark.parametrize("perturbation_covariate_reps", [{}, {"drug": "drug"}])
    @pytest.mark.parametrize("sample_covariates", [[], ["dosage_c"]])
    def test_get_train_data(
        self,
        adata_perturbation: ad.AnnData,
        sample_rep,
        split_covariates,
        perturbation_covariates,
        perturbation_covariate_reps,
        sample_covariates,
    ):
        from cfp.data._data import TrainingData
        from cfp.data._datamanager import DataManager
    
        dm = DataManager(
            adata_perturbation,
            sample_rep=sample_rep,
            split_covariates=split_covariates,
            control_key="control",
            perturbation_covariates=perturbation_covariates,
            perturbation_covariate_reps=perturbation_covariate_reps,
            sample_covariates=sample_covariates,
        )
        assert isinstance(dm, DataManager)
        assert dm._sample_rep == sample_rep
        assert dm._control_key == "control"
        assert dm._split_covariates == split_covariates
        assert dm._perturbation_covariates == perturbation_covariates
        assert dm._sample_covariates == sample_covariates
    
        train_data = dm.get_train_data(adata_perturbation)
        assert isinstance(train_data, TrainingData)
        assert isinstance(train_data, TrainingData)
        assert (
            (train_data.perturbation_covariates_mask == -1)
            + (train_data.split_covariates_mask == -1)
        ).all()
        if split_covariates == []:
            assert train_data.n_controls == 1
        if split_covariates == ["cell_type"]:
>           assert train_data.n_controls == len(
                adata_perturbation.obs["cell_type"].cat.categories
            )
E           AssertionError: assert 0 == 3
E            +  where 0 = TrainingData(cell_data=array([[0.17298018, 0.01036121, 0.55618453, ..., 0.7984063 , 0.87253018,\n        0.76437207],\n ...7])}, max_combination_length=1, null_value=0.0, data_manager=<cfp.data._datamanager.DataManager object at 0x329d102d0>).n_controls
E            +  and   3 = len(Index(['cell_line_a', 'cell_line_b', 'cell_line_c'], dtype='object'))
E            +    where Index(['cell_line_a', 'cell_line_b', 'cell_line_c'], dtype='object') = <pandas.core.arrays.categorical.CategoricalAccessor object at 0x329d46310>.categories
E            +      where <pandas.core.arrays.categorical.CategoricalAccessor object at 0x329d46310> = 0      cell_line_c\n1      cell_line_a\n2      cell_line_a\n3      cell_line_b\n4      cell_line_c\n          ...     \n495 ...e_c\nName: cell_type, Length: 500, dtype: category\nCategories (3, object): ['cell_line_a', 'cell_line_b', 'cell_line_c'].cat

tests/data/test_datamanager.py:192: AssertionError
_ TestDataManager.test_get_train_data[sample_covariates0-perturbation_covariate_reps1-perturbation_covariates0-split_covariates0-X] _

self = <tests.data.test_datamanager.TestDataManager object at 0x3297d1a10>
adata_perturbation = AnnData object with n_obs × n_vars = 500 × 50
    obs: 'cell_type', 'dosage', 'drug1', 'drug2', 'drug3', 'dosage_a', '...sage_c', 'drug_a', 'drug_b', 'drug_c', 'control'
    uns: 'drug', 'cell_type'
    obsm: 'X_pca'
    layers: 'my_counts'
sample_rep = 'X', split_covariates = []
perturbation_covariates = {'drug': ['drug1']}
perturbation_covariate_reps = {'drug': 'drug'}, sample_covariates = []

    @pytest.mark.parametrize("sample_rep", ["X", "X_pca"])
    @pytest.mark.parametrize("split_covariates", [[], ["cell_type"]])
    @pytest.mark.parametrize("perturbation_covariates", perturbation_covariates_args)
    @pytest.mark.parametrize("perturbation_covariate_reps", [{}, {"drug": "drug"}])
    @pytest.mark.parametrize("sample_covariates", [[], ["dosage_c"]])
    def test_get_train_data(
        self,
        adata_perturbation: ad.AnnData,
        sample_rep,
        split_covariates,
        perturbation_covariates,
        perturbation_covariate_reps,
        sample_covariates,
    ):
        from cfp.data._data import TrainingData
        from cfp.data._datamanager import DataManager
    
        dm = DataManager(
            adata_perturbation,
            sample_rep=sample_rep,
            split_covariates=split_covariates,
            control_key="control",
            perturbation_covariates=perturbation_covariates,
            perturbation_covariate_reps=perturbation_covariate_reps,
            sample_covariates=sample_covariates,
        )
        assert isinstance(dm, DataManager)
        assert dm._sample_rep == sample_rep
        assert dm._control_key == "control"
        assert dm._split_covariates == split_covariates
        assert dm._perturbation_covariates == perturbation_covariates
        assert dm._sample_covariates == sample_covariates
    
        train_data = dm.get_train_data(adata_perturbation)
        assert isinstance(train_data, TrainingData)
        assert isinstance(train_data, TrainingData)
        assert (
            (train_data.perturbation_covariates_mask == -1)
            + (train_data.split_covariates_mask == -1)
        ).all()
        if split_covariates == []:
>           assert train_data.n_controls == 1
E           assert 0 == 1
E            +  where 0 = TrainingData(cell_data=array([[0.61182859, 0.46066107, 0.84572639, ..., 0.63410461, 0.24240069,\n        0.01075887],\n ...3])}, max_combination_length=1, null_value=0.0, data_manager=<cfp.data._datamanager.DataManager object at 0x32988fd50>).n_controls

tests/data/test_datamanager.py:190: AssertionError
_ TestDataManager.test_get_train_data[sample_covariates0-perturbation_covariate_reps1-perturbation_covariates0-split_covariates0-X_pca] _

self = <tests.data.test_datamanager.TestDataManager object at 0x3297d1b50>
adata_perturbation = AnnData object with n_obs × n_vars = 500 × 50
    obs: 'cell_type', 'dosage', 'drug1', 'drug2', 'drug3', 'dosage_a', '...sage_c', 'drug_a', 'drug_b', 'drug_c', 'control'
    uns: 'drug', 'cell_type'
    obsm: 'X_pca'
    layers: 'my_counts'
sample_rep = 'X_pca', split_covariates = []
perturbation_covariates = {'drug': ['drug1']}
perturbation_covariate_reps = {'drug': 'drug'}, sample_covariates = []

    @pytest.mark.parametrize("sample_rep", ["X", "X_pca"])
    @pytest.mark.parametrize("split_covariates", [[], ["cell_type"]])
    @pytest.mark.parametrize("perturbation_covariates", perturbation_covariates_args)
    @pytest.mark.parametrize("perturbation_covariate_reps", [{}, {"drug": "drug"}])
    @pytest.mark.parametrize("sample_covariates", [[], ["dosage_c"]])
    def test_get_train_data(
        self,
        adata_perturbation: ad.AnnData,
        sample_rep,
        split_covariates,
        perturbation_covariates,
        perturbation_covariate_reps,
        sample_covariates,
    ):
        from cfp.data._data import TrainingData
        from cfp.data._datamanager import DataManager
    
        dm = DataManager(
            adata_perturbation,
            sample_rep=sample_rep,
            split_covariates=split_covariates,
            control_key="control",
            perturbation_covariates=perturbation_covariates,
            perturbation_covariate_reps=perturbation_covariate_reps,
            sample_covariates=sample_covariates,
        )
        assert isinstance(dm, DataManager)
        assert dm._sample_rep == sample_rep
        assert dm._control_key == "control"
        assert dm._split_covariates == split_covariates
        assert dm._perturbation_covariates == perturbation_covariates
        assert dm._sample_covariates == sample_covariates
    
        train_data = dm.get_train_data(adata_perturbation)
        assert isinstance(train_data, TrainingData)
        assert isinstance(train_data, TrainingData)
        assert (
            (train_data.perturbation_covariates_mask == -1)
            + (train_data.split_covariates_mask == -1)
        ).all()
        if split_covariates == []:
>           assert train_data.n_controls == 1
E           assert 0 == 1
E            +  where 0 = TrainingData(cell_data=array([[0.83408829, 0.05038197, 0.07110835, ..., 0.44961183, 0.16989712,\n        0.55288138],\n ...3])}, max_combination_length=1, null_value=0.0, data_manager=<cfp.data._datamanager.DataManager object at 0x329852110>).n_controls

tests/data/test_datamanager.py:190: AssertionError
_ TestDataManager.test_get_train_data[sample_covariates0-perturbation_covariate_reps1-perturbation_covariates0-split_covariates1-X] _

self = <tests.data.test_datamanager.TestDataManager object at 0x3297bb310>
adata_perturbation = AnnData object with n_obs × n_vars = 500 × 50
    obs: 'cell_type', 'dosage', 'drug1', 'drug2', 'drug3', 'dosage_a', '...sage_c', 'drug_a', 'drug_b', 'drug_c', 'control'
    uns: 'drug', 'cell_type'
    obsm: 'X_pca'
    layers: 'my_counts'
sample_rep = 'X', split_covariates = ['cell_type']
perturbation_covariates = {'drug': ['drug1']}
perturbation_covariate_reps = {'drug': 'drug'}, sample_covariates = []

    @pytest.mark.parametrize("sample_rep", ["X", "X_pca"])
    @pytest.mark.parametrize("split_covariates", [[], ["cell_type"]])
    @pytest.mark.parametrize("perturbation_covariates", perturbation_covariates_args)
    @pytest.mark.parametrize("perturbation_covariate_reps", [{}, {"drug": "drug"}])
    @pytest.mark.parametrize("sample_covariates", [[], ["dosage_c"]])
    def test_get_train_data(
        self,
        adata_perturbation: ad.AnnData,
        sample_rep,
        split_covariates,
        perturbation_covariates,
        perturbation_covariate_reps,
        sample_covariates,
    ):
        from cfp.data._data import TrainingData
        from cfp.data._datamanager import DataManager
    
        dm = DataManager(
            adata_perturbation,
            sample_rep=sample_rep,
            split_covariates=split_covariates,
            control_key="control",
            perturbation_covariates=perturbation_covariates,
            perturbation_covariate_reps=perturbation_covariate_reps,
            sample_covariates=sample_covariates,
        )
        assert isinstance(dm, DataManager)
        assert dm._sample_rep == sample_rep
        assert dm._control_key == "control"
        assert dm._split_covariates == split_covariates
        assert dm._perturbation_covariates == perturbation_covariates
        assert dm._sample_covariates == sample_covariates
    
        train_data = dm.get_train_data(adata_perturbation)
        assert isinstance(train_data, TrainingData)
        assert isinstance(train_data, TrainingData)
        assert (
            (train_data.perturbation_covariates_mask == -1)
            + (train_data.split_covariates_mask == -1)
        ).all()
        if split_covariates == []:
            assert train_data.n_controls == 1
        if split_covariates == ["cell_type"]:
>           assert train_data.n_controls == len(
                adata_perturbation.obs["cell_type"].cat.categories
            )
E           AssertionError: assert 0 == 3
E            +  where 0 = TrainingData(cell_data=array([[0.28108631, 0.12546235, 0.12530363, ..., 0.5335634 , 0.75210443,\n        0.75280091],\n ...1])}, max_combination_length=1, null_value=0.0, data_manager=<cfp.data._datamanager.DataManager object at 0x3298535d0>).n_controls
E            +  and   3 = len(Index(['cell_line_a', 'cell_line_b', 'cell_line_c'], dtype='object'))
E            +    where Index(['cell_line_a', 'cell_line_b', 'cell_line_c'], dtype='object') = <pandas.core.arrays.categorical.CategoricalAccessor object at 0x32985da50>.categories
E            +      where <pandas.core.arrays.categorical.CategoricalAccessor object at 0x32985da50> = 0      cell_line_b\n1      cell_line_a\n2      cell_line_b\n3      cell_line_c\n4      cell_line_a\n          ...     \n495 ...e_a\nName: cell_type, Length: 500, dtype: category\nCategories (3, object): ['cell_line_a', 'cell_line_b', 'cell_line_c'].cat

tests/data/test_datamanager.py:192: AssertionError
_ TestDataManager.test_get_train_data[sample_covariates0-perturbation_covariate_reps1-perturbation_covariates0-split_covariates1-X_pca] _

self = <tests.data.test_datamanager.TestDataManager object at 0x3297d1d10>
adata_perturbation = AnnData object with n_obs × n_vars = 500 × 50
    obs: 'cell_type', 'dosage', 'drug1', 'drug2', 'drug3', 'dosage_a', '...sage_c', 'drug_a', 'drug_b', 'drug_c', 'control'
    uns: 'drug', 'cell_type'
    obsm: 'X_pca'
    layers: 'my_counts'
sample_rep = 'X_pca', split_covariates = ['cell_type']
perturbation_covariates = {'drug': ['drug1']}
perturbation_covariate_reps = {'drug': 'drug'}, sample_covariates = []

    @pytest.mark.parametrize("sample_rep", ["X", "X_pca"])
    @pytest.mark.parametrize("split_covariates", [[], ["cell_type"]])
    @pytest.mark.parametrize("perturbation_covariates", perturbation_covariates_args)
    @pytest.mark.parametrize("perturbation_covariate_reps", [{}, {"drug": "drug"}])
    @pytest.mark.parametrize("sample_covariates", [[], ["dosage_c"]])
    def test_get_train_data(
        self,
        adata_perturbation: ad.AnnData,
        sample_rep,
        split_covariates,
        perturbation_covariates,
        perturbation_covariate_reps,
        sample_covariates,
    ):
        from cfp.data._data import TrainingData
        from cfp.data._datamanager import DataManager
    
        dm = DataManager(
            adata_perturbation,
            sample_rep=sample_rep,
            split_covariates=split_covariates,
            control_key="control",
            perturbation_covariates=perturbation_covariates,
            perturbation_covariate_reps=perturbation_covariate_reps,
            sample_covariates=sample_covariates,
        )
        assert isinstance(dm, DataManager)
        assert dm._sample_rep == sample_rep
        assert dm._control_key == "control"
        assert dm._split_covariates == split_covariates
        assert dm._perturbation_covariates == perturbation_covariates
        assert dm._sample_covariates == sample_covariates
    
        train_data = dm.get_train_data(adata_perturbation)
        assert isinstance(train_data, TrainingData)
        assert isinstance(train_data, TrainingData)
        assert (
            (train_data.perturbation_covariates_mask == -1)
            + (train_data.split_covariates_mask == -1)
        ).all()
        if split_covariates == []:
            assert train_data.n_controls == 1
        if split_covariates == ["cell_type"]:
>           assert train_data.n_controls == len(
                adata_perturbation.obs["cell_type"].cat.categories
            )
E           AssertionError: assert 0 == 3
E            +  where 0 = TrainingData(cell_data=array([[0.45096576, 0.58684937, 0.65787814, ..., 0.24337947, 0.96906062,\n        0.42049166],\n ...1])}, max_combination_length=1, null_value=0.0, data_manager=<cfp.data._datamanager.DataManager object at 0x329d0a090>).n_controls
E            +  and   3 = len(Index(['cell_line_a', 'cell_line_b', 'cell_line_c'], dtype='object'))
E            +    where Index(['cell_line_a', 'cell_line_b', 'cell_line_c'], dtype='object') = <pandas.core.arrays.categorical.CategoricalAccessor object at 0x329d0a550>.categories
E            +      where <pandas.core.arrays.categorical.CategoricalAccessor object at 0x329d0a550> = 0      cell_line_c\n1      cell_line_c\n2      cell_line_c\n3      cell_line_b\n4      cell_line_c\n          ...     \n495 ...e_b\nName: cell_type, Length: 500, dtype: category\nCategories (3, object): ['cell_line_a', 'cell_line_b', 'cell_line_c'].cat

tests/data/test_datamanager.py:192: AssertionError
_ TestDataManager.test_get_train_data[sample_covariates0-perturbation_covariate_reps1-perturbation_covariates1-split_covariates0-X] _

self = <tests.data.test_datamanager.TestDataManager object at 0x3297d1f10>
adata_perturbation = AnnData object with n_obs × n_vars = 500 × 50
    obs: 'cell_type', 'dosage', 'drug1', 'drug2', 'drug3', 'dosage_a', '...sage_c', 'drug_a', 'drug_b', 'drug_c', 'control'
    uns: 'drug', 'cell_type'
    obsm: 'X_pca'
    layers: 'my_counts'
sample_rep = 'X', split_covariates = []
perturbation_covariates = {'dosage': ['dosage_a'], 'drug': ['drug1']}
perturbation_covariate_reps = {'drug': 'drug'}, sample_covariates = []

    @pytest.mark.parametrize("sample_rep", ["X", "X_pca"])
    @pytest.mark.parametrize("split_covariates", [[], ["cell_type"]])
    @pytest.mark.parametrize("perturbation_covariates", perturbation_covariates_args)
    @pytest.mark.parametrize("perturbation_covariate_reps", [{}, {"drug": "drug"}])
    @pytest.mark.parametrize("sample_covariates", [[], ["dosage_c"]])
    def test_get_train_data(
        self,
        adata_perturbation: ad.AnnData,
        sample_rep,
        split_covariates,
        perturbation_covariates,
        perturbation_covariate_reps,
        sample_covariates,
    ):
        from cfp.data._data import TrainingData
        from cfp.data._datamanager import DataManager
    
        dm = DataManager(
            adata_perturbation,
            sample_rep=sample_rep,
            split_covariates=split_covariates,
            control_key="control",
            perturbation_covariates=perturbation_covariates,
            perturbation_covariate_reps=perturbation_covariate_reps,
            sample_covariates=sample_covariates,
        )
        assert isinstance(dm, DataManager)
        assert dm._sample_rep == sample_rep
        assert dm._control_key == "control"
        assert dm._split_covariates == split_covariates
        assert dm._perturbation_covariates == perturbation_covariates
        assert dm._sample_covariates == sample_covariates
    
        train_data = dm.get_train_data(adata_perturbation)
        assert isinstance(train_data, TrainingData)
        assert isinstance(train_data, TrainingData)
        assert (
            (train_data.perturbation_covariates_mask == -1)
            + (train_data.split_covariates_mask == -1)
        ).all()
        if split_covariates == []:
>           assert train_data.n_controls == 1
E           assert 0 == 1
E            +  where 0 = TrainingData(cell_data=array([[0.84274898, 0.60909466, 0.63144459, ..., 0.09144154, 0.03709101,\n        0.38278225],\n ...1])}, max_combination_length=1, null_value=0.0, data_manager=<cfp.data._datamanager.DataManager object at 0x329d082d0>).n_controls

tests/data/test_datamanager.py:190: AssertionError
_ TestDataManager.test_get_train_data[sample_covariates0-perturbation_covariate_reps1-perturbation_covariates1-split_covariates0-X_pca] _

self = <tests.data.test_datamanager.TestDataManager object at 0x3297d2190>
adata_perturbation = AnnData object with n_obs × n_vars = 500 × 50
    obs: 'cell_type', 'dosage', 'drug1', 'drug2', 'drug3', 'dosage_a', '...sage_c', 'drug_a', 'drug_b', 'drug_c', 'control'
    uns: 'drug', 'cell_type'
    obsm: 'X_pca'
    layers: 'my_counts'
sample_rep = 'X_pca', split_covariates = []
perturbation_covariates = {'dosage': ['dosage_a'], 'drug': ['drug1']}
perturbation_covariate_reps = {'drug': 'drug'}, sample_covariates = []

    @pytest.mark.parametrize("sample_rep", ["X", "X_pca"])
    @pytest.mark.parametrize("split_covariates", [[], ["cell_type"]])
    @pytest.mark.parametrize("perturbation_covariates", perturbation_covariates_args)
    @pytest.mark.parametrize("perturbation_covariate_reps", [{}, {"drug": "drug"}])
    @pytest.mark.parametrize("sample_covariates", [[], ["dosage_c"]])
    def test_get_train_data(
        self,
        adata_perturbation: ad.AnnData,
        sample_rep,
        split_covariates,
        perturbation_covariates,
        perturbation_covariate_reps,
        sample_covariates,
    ):
        from cfp.data._data import TrainingData
        from cfp.data._datamanager import DataManager
    
        dm = DataManager(
            adata_perturbation,
            sample_rep=sample_rep,
            split_covariates=split_covariates,
            control_key="control",
            perturbation_covariates=perturbation_covariates,
            perturbation_covariate_reps=perturbation_covariate_reps,
            sample_covariates=sample_covariates,
        )
        assert isinstance(dm, DataManager)
        assert dm._sample_rep == sample_rep
        assert dm._control_key == "control"
        assert dm._split_covariates == split_covariates
        assert dm._perturbation_covariates == perturbation_covariates
        assert dm._sample_covariates == sample_covariates
    
        train_data = dm.get_train_data(adata_perturbation)
        assert isinstance(train_data, TrainingData)
        assert isinstance(train_data, TrainingData)
        assert (
            (train_data.perturbation_covariates_mask == -1)
            + (train_data.split_covariates_mask == -1)
        ).all()
        if split_covariates == []:
>           assert train_data.n_controls == 1
E           assert 0 == 1
E            +  where 0 = TrainingData(cell_data=array([[0.1620204 , 0.81815383, 0.64068543, ..., 0.5106313 , 0.98922882,\n        0.96189385],\n ...1])}, max_combination_length=1, null_value=0.0, data_manager=<cfp.data._datamanager.DataManager object at 0x329853e90>).n_controls

tests/data/test_datamanager.py:190: AssertionError
_ TestDataManager.test_get_train_data[sample_covariates0-perturbation_covariate_reps1-perturbation_covariates1-split_covariates1-X] _

self = <tests.data.test_datamanager.TestDataManager object at 0x3297d2410>
adata_perturbation = AnnData object with n_obs × n_vars = 500 × 50
    obs: 'cell_type', 'dosage', 'drug1', 'drug2', 'drug3', 'dosage_a', '...sage_c', 'drug_a', 'drug_b', 'drug_c', 'control'
    uns: 'drug', 'cell_type'
    obsm: 'X_pca'
    layers: 'my_counts'
sample_rep = 'X', split_covariates = ['cell_type']
perturbation_covariates = {'dosage': ['dosage_a'], 'drug': ['drug1']}
perturbation_covariate_reps = {'drug': 'drug'}, sample_covariates = []

    @pytest.mark.parametrize("sample_rep", ["X", "X_pca"])
    @pytest.mark.parametrize("split_covariates", [[], ["cell_type"]])
    @pytest.mark.parametrize("perturbation_covariates", perturbation_covariates_args)
    @pytest.mark.parametrize("perturbation_covariate_reps", [{}, {"drug": "drug"}])
    @pytest.mark.parametrize("sample_covariates", [[], ["dosage_c"]])
    def test_get_train_data(
        self,
        adata_perturbation: ad.AnnData,
        sample_rep,
        split_covariates,
        perturbation_covariates,
        perturbation_covariate_reps,
        sample_covariates,
    ):
        from cfp.data._data import TrainingData
        from cfp.data._datamanager import DataManager
    
        dm = DataManager(
            adata_perturbation,
            sample_rep=sample_rep,
            split_covariates=split_covariates,
            control_key="control",
            perturbation_covariates=perturbation_covariates,
            perturbation_covariate_reps=perturbation_covariate_reps,
            sample_covariates=sample_covariates,
        )
        assert isinstance(dm, DataManager)
        assert dm._sample_rep == sample_rep
        assert dm._control_key == "control"
        assert dm._split_covariates == split_covariates
        assert dm._perturbation_covariates == perturbation_covariates
        assert dm._sample_covariates == sample_covariates
    
        train_data = dm.get_train_data(adata_perturbation)
        assert isinstance(train_data, TrainingData)
        assert isinstance(train_data, TrainingData)
        assert (
            (train_data.perturbation_covariates_mask == -1)
            + (train_data.split_covariates_mask == -1)
        ).all()
        if split_covariates == []:
            assert train_data.n_controls == 1
        if split_covariates == ["cell_type"]:
>           assert train_data.n_controls == len(
                adata_perturbation.obs["cell_type"].cat.categories
            )
E           AssertionError: assert 0 == 3
E            +  where 0 = TrainingData(cell_data=array([[0.36776229, 0.76462841, 0.71012384, ..., 0.89293613, 0.62450351,\n        0.21182169],\n ...5])}, max_combination_length=1, null_value=0.0, data_manager=<cfp.data._datamanager.DataManager object at 0x329cf4f90>).n_controls
E            +  and   3 = len(Index(['cell_line_a', 'cell_line_b', 'cell_line_c'], dtype='object'))
E            +    where Index(['cell_line_a', 'cell_line_b', 'cell_line_c'], dtype='object') = <pandas.core.arrays.categorical.CategoricalAccessor object at 0x329cf4190>.categories
E            +      where <pandas.core.arrays.categorical.CategoricalAccessor object at 0x329cf4190> = 0      cell_line_c\n1      cell_line_a\n2      cell_line_b\n3      cell_line_b\n4      cell_line_a\n          ...     \n495 ...e_c\nName: cell_type, Length: 500, dtype: category\nCategories (3, object): ['cell_line_a', 'cell_line_b', 'cell_line_c'].cat

tests/data/test_datamanager.py:192: AssertionError
_ TestDataManager.test_get_train_data[sample_covariates0-perturbation_covariate_reps1-perturbation_covariates1-split_covariates1-X_pca] _

self = <tests.data.test_datamanager.TestDataManager object at 0x3297d2690>
adata_perturbation = AnnData object with n_obs × n_vars = 500 × 50
    obs: 'cell_type', 'dosage', 'drug1', 'drug2', 'drug3', 'dosage_a', '...sage_c', 'drug_a', 'drug_b', 'drug_c', 'control'
    uns: 'drug', 'cell_type'
    obsm: 'X_pca'
    layers: 'my_counts'
sample_rep = 'X_pca', split_covariates = ['cell_type']
perturbation_covariates = {'dosage': ['dosage_a'], 'drug': ['drug1']}
perturbation_covariate_reps = {'drug': 'drug'}, sample_covariates = []

    @pytest.mark.parametrize("sample_rep", ["X", "X_pca"])
    @pytest.mark.parametrize("split_covariates", [[], ["cell_type"]])
    @pytest.mark.parametrize("perturbation_covariates", perturbation_covariates_args)
    @pytest.mark.parametrize("perturbation_covariate_reps", [{}, {"drug": "drug"}])
    @pytest.mark.parametrize("sample_covariates", [[], ["dosage_c"]])
    def test_get_train_data(
        self,
        adata_perturbation: ad.AnnData,
        sample_rep,
        split_covariates,
        perturbation_covariates,
        perturbation_covariate_reps,
        sample_covariates,
    ):
        from cfp.data._data import TrainingData
        from cfp.data._datamanager import DataManager
    
        dm = DataManager(
            adata_perturbation,
            sample_rep=sample_rep,
            split_covariates=split_covariates,
            control_key="control",
            perturbation_covariates=perturbation_covariates,
            perturbation_covariate_reps=perturbation_covariate_reps,
            sample_covariates=sample_covariates,
        )
        assert isinstance(dm, DataManager)
        assert dm._sample_rep == sample_rep
        assert dm._control_key == "control"
        assert dm._split_covariates == split_covariates
        assert dm._perturbation_covariates == perturbation_covariates
        assert dm._sample_covariates == sample_covariates
    
        train_data = dm.get_train_data(adata_perturbation)
        assert isinstance(train_data, TrainingData)
        assert isinstance(train_data, TrainingData)
        assert (
            (train_data.perturbation_covariates_mask == -1)
            + (train_data.split_covariates_mask == -1)
        ).all()
        if split_covariates == []:
            assert train_data.n_controls == 1
        if split_covariates == ["cell_type"]:
>           assert train_data.n_controls == len(
                adata_perturbation.obs["cell_type"].cat.categories
            )
E           AssertionError: assert 0 == 3
E            +  where 0 = TrainingData(cell_data=array([[0.09897426, 0.14812046, 0.02242943, ..., 0.15310271, 0.04567911,\n        0.49573437],\n ...5])}, max_combination_length=1, null_value=0.0, data_manager=<cfp.data._datamanager.DataManager object at 0x329e1b750>).n_controls
E            +  and   3 = len(Index(['cell_line_a', 'cell_line_b', 'cell_line_c'], dtype='object'))
E            +    where Index(['cell_line_a', 'cell_line_b', 'cell_line_c'], dtype='object') = <pandas.core.arrays.categorical.CategoricalAccessor object at 0x329e18650>.categories
E            +      where <pandas.core.arrays.categorical.CategoricalAccessor object at 0x329e18650> = 0      cell_line_b\n1      cell_line_c\n2      cell_line_b\n3      cell_line_c\n4      cell_line_b\n          ...     \n495 ...e_c\nName: cell_type, Length: 500, dtype: category\nCategories (3, object): ['cell_line_a', 'cell_line_b', 'cell_line_c'].cat

tests/data/test_datamanager.py:192: AssertionError
_ TestDataManager.test_get_train_data[sample_covariates0-perturbation_covariate_reps1-perturbation_covariates2-split_covariates0-X] _

self = <tests.data.test_datamanager.TestDataManager object at 0x3297d2910>
adata_perturbation = AnnData object with n_obs × n_vars = 500 × 50
    obs: 'cell_type', 'dosage', 'drug1', 'drug2', 'drug3', 'dosage_a', '...sage_c', 'drug_a', 'drug_b', 'drug_c', 'control'
    uns: 'drug', 'cell_type'
    obsm: 'X_pca'
    layers: 'my_counts'
sample_rep = 'X', split_covariates = []
perturbation_covariates = {'dosage': ['dosage_a'], 'drug': ['drug_a']}
perturbation_covariate_reps = {'drug': 'drug'}, sample_covariates = []

    @pytest.mark.parametrize("sample_rep", ["X", "X_pca"])
    @pytest.mark.parametrize("split_covariates", [[], ["cell_type"]])
    @pytest.mark.parametrize("perturbation_covariates", perturbation_covariates_args)
    @pytest.mark.parametrize("perturbation_covariate_reps", [{}, {"drug": "drug"}])
    @pytest.mark.parametrize("sample_covariates", [[], ["dosage_c"]])
    def test_get_train_data(
        self,
        adata_perturbation: ad.AnnData,
        sample_rep,
        split_covariates,
        perturbation_covariates,
        perturbation_covariate_reps,
        sample_covariates,
    ):
        from cfp.data._data import TrainingData
        from cfp.data._datamanager import DataManager
    
        dm = DataManager(
            adata_perturbation,
            sample_rep=sample_rep,
            split_covariates=split_covariates,
            control_key="control",
            perturbation_covariates=perturbation_covariates,
            perturbation_covariate_reps=perturbation_covariate_reps,
            sample_covariates=sample_covariates,
        )
        assert isinstance(dm, DataManager)
        assert dm._sample_rep == sample_rep
        assert dm._control_key == "control"
        assert dm._split_covariates == split_covariates
        assert dm._perturbation_covariates == perturbation_covariates
        assert dm._sample_covariates == sample_covariates
    
        train_data = dm.get_train_data(adata_perturbation)
        assert isinstance(train_data, TrainingData)
        assert isinstance(train_data, TrainingData)
        assert (
            (train_data.perturbation_covariates_mask == -1)
            + (train_data.split_covariates_mask == -1)
        ).all()
        if split_covariates == []:
>           assert train_data.n_controls == 1
E           assert 0 == 1
E            +  where 0 = TrainingData(cell_data=array([[0.1391255 , 0.9645779 , 0.61598855, ..., 0.80547929, 0.70728209,\n        0.15098753],\n ...5])}, max_combination_length=1, null_value=0.0, data_manager=<cfp.data._datamanager.DataManager object at 0x329cf5210>).n_controls

tests/data/test_datamanager.py:190: AssertionError
_ TestDataManager.test_get_train_data[sample_covariates0-perturbation_covariate_reps1-perturbation_covariates2-split_covariates0-X_pca] _

self = <tests.data.test_datamanager.TestDataManager object at 0x3297d2b90>
adata_perturbation = AnnData object with n_obs × n_vars = 500 × 50
    obs: 'cell_type', 'dosage', 'drug1', 'drug2', 'drug3', 'dosage_a', '...sage_c', 'drug_a', 'drug_b', 'drug_c', 'control'
    uns: 'drug', 'cell_type'
    obsm: 'X_pca'
    layers: 'my_counts'
sample_rep = 'X_pca', split_covariates = []
perturbation_covariates = {'dosage': ['dosage_a'], 'drug': ['drug_a']}
perturbation_covariate_reps = {'drug': 'drug'}, sample_covariates = []

    @pytest.mark.parametrize("sample_rep", ["X", "X_pca"])
    @pytest.mark.parametrize("split_covariates", [[], ["cell_type"]])
    @pytest.mark.parametrize("perturbation_covariates", perturbation_covariates_args)
    @pytest.mark.parametrize("perturbation_covariate_reps", [{}, {"drug": "drug"}])
    @pytest.mark.parametrize("sample_covariates", [[], ["dosage_c"]])
    def test_get_train_data(
        self,
        adata_perturbation: ad.AnnData,
        sample_rep,
        split_covariates,
        perturbation_covariates,
        perturbation_covariate_reps,
        sample_covariates,
    ):
        from cfp.data._data import TrainingData
        from cfp.data._datamanager import DataManager
    
        dm = DataManager(
            adata_perturbation,
            sample_rep=sample_rep,
            split_covariates=split_covariates,
            control_key="control",
            perturbation_covariates=perturbation_covariates,
            perturbation_covariate_reps=perturbation_covariate_reps,
            sample_covariates=sample_covariates,
        )
        assert isinstance(dm, DataManager)
        assert dm._sample_rep == sample_rep
        assert dm._control_key == "control"
        assert dm._split_covariates == split_covariates
        assert dm._perturbation_covariates == perturbation_covariates
        assert dm._sample_covariates == sample_covariates
    
        train_data = dm.get_train_data(adata_perturbation)
        assert isinstance(train_data, TrainingData)
        assert isinstance(train_data, TrainingData)
        assert (
            (train_data.perturbation_covariates_mask == -1)
            + (train_data.split_covariates_mask == -1)
        ).all()
        if split_covariates == []:
>           assert train_data.n_controls == 1
E           assert 0 == 1
E            +  where 0 = TrainingData(cell_data=array([[0.35797198, 0.46078048, 0.00792605, ..., 0.46944444, 0.57672635,\n        0.74713171],\n ...5])}, max_combination_length=1, null_value=0.0, data_manager=<cfp.data._datamanager.DataManager object at 0x329d4b5d0>).n_controls

tests/data/test_datamanager.py:190: AssertionError
_ TestDataManager.test_get_train_data[sample_covariates0-perturbation_covariate_reps1-perturbation_covariates2-split_covariates1-X] _

self = <tests.data.test_datamanager.TestDataManager object at 0x3297d2e10>
adata_perturbation = AnnData object with n_obs × n_vars = 500 × 50
    obs: 'cell_type', 'dosage', 'drug1', 'drug2', 'drug3', 'dosage_a', '...sage_c', 'drug_a', 'drug_b', 'drug_c', 'control'
    uns: 'drug', 'cell_type'
    obsm: 'X_pca'
    layers: 'my_counts'
sample_rep = 'X', split_covariates = ['cell_type']
perturbation_covariates = {'dosage': ['dosage_a'], 'drug': ['drug_a']}
perturbation_covariate_reps = {'drug': 'drug'}, sample_covariates = []

    @pytest.mark.parametrize("sample_rep", ["X", "X_pca"])
    @pytest.mark.parametrize("split_covariates", [[], ["cell_type"]])
    @pytest.mark.parametrize("perturbation_covariates", perturbation_covariates_args)
    @pytest.mark.parametrize("perturbation_covariate_reps", [{}, {"drug": "drug"}])
    @pytest.mark.parametrize("sample_covariates", [[], ["dosage_c"]])
    def test_get_train_data(
        self,
        adata_perturbation: ad.AnnData,
        sample_rep,
        split_covariates,
        perturbation_covariates,
        perturbation_covariate_reps,
        sample_covariates,
    ):
        from cfp.data._data import TrainingData
        from cfp.data._datamanager import DataManager
    
        dm = DataManager(
            adata_perturbation,
            sample_rep=sample_rep,
            split_covariates=split_covariates,
            control_key="control",
            perturbation_covariates=perturbation_covariates,
            perturbation_covariate_reps=perturbation_covariate_reps,
            sample_covariates=sample_covariates,
        )
        assert isinstance(dm, DataManager)
        assert dm._sample_rep == sample_rep
        assert dm._control_key == "control"
        assert dm._split_covariates == split_covariates
        assert dm._perturbation_covariates == perturbation_covariates
        assert dm._sample_covariates == sample_covariates
    
        train_data = dm.get_train_data(adata_perturbation)
        assert isinstance(train_data, TrainingData)
        assert isinstance(train_data, TrainingData)
        assert (
            (train_data.perturbation_covariates_mask == -1)
            + (train_data.split_covariates_mask == -1)
        ).all()
        if split_covariates == []:
            assert train_data.n_controls == 1
        if split_covariates == ["cell_type"]:
>           assert train_data.n_controls == len(
                adata_perturbation.obs["cell_type"].cat.categories
            )
E           AssertionError: assert 0 == 3
E            +  where 0 = TrainingData(cell_data=array([[0.01686736, 0.57619273, 0.74929858, ..., 0.0528441 , 0.30873854,\n        0.97825511],\n ...7])}, max_combination_length=1, null_value=0.0, data_manager=<cfp.data._datamanager.DataManager object at 0x329d24e10>).n_controls
E            +  and   3 = len(Index(['cell_line_a', 'cell_line_b', 'cell_line_c'], dtype='object'))
E            +    where Index(['cell_line_a', 'cell_line_b', 'cell_line_c'], dtype='object') = <pandas.core.arrays.categorical.CategoricalAccessor object at 0x329d11b90>.categories
E            +      where <pandas.core.arrays.categorical.CategoricalAccessor object at 0x329d11b90> = 0      cell_line_b\n1      cell_line_b\n2      cell_line_b\n3      cell_line_c\n4      cell_line_c\n          ...     \n495 ...e_b\nName: cell_type, Length: 500, dtype: category\nCategories (3, object): ['cell_line_a', 'cell_line_b', 'cell_line_c'].cat

tests/data/test_datamanager.py:192: AssertionError
_ TestDataManager.test_get_train_data[sample_covariates0-perturbation_covariate_reps1-perturbation_covariates2-split_covariates1-X_pca] _

self = <tests.data.test_datamanager.TestDataManager object at 0x3297d3090>
adata_perturbation = AnnData object with n_obs × n_vars = 500 × 50
    obs: 'cell_type', 'dosage', 'drug1', 'drug2', 'drug3', 'dosage_a', '...sage_c', 'drug_a', 'drug_b', 'drug_c', 'control'
    uns: 'drug', 'cell_type'
    obsm: 'X_pca'
    layers: 'my_counts'
sample_rep = 'X_pca', split_covariates = ['cell_type']
perturbation_covariates = {'dosage': ['dosage_a'], 'drug': ['drug_a']}
perturbation_covariate_reps = {'drug': 'drug'}, sample_covariates = []

    @pytest.mark.parametrize("sample_rep", ["X", "X_pca"])
    @pytest.mark.parametrize("split_covariates", [[], ["cell_type"]])
    @pytest.mark.parametrize("perturbation_covariates", perturbation_covariates_args)
    @pytest.mark.parametrize("perturbation_covariate_reps", [{}, {"drug": "drug"}])
    @pytest.mark.parametrize("sample_covariates", [[], ["dosage_c"]])
    def test_get_train_data(
        self,
        adata_perturbation: ad.AnnData,
        sample_rep,
        split_covariates,
        perturbation_covariates,
        perturbation_covariate_reps,
        sample_covariates,
    ):
        from cfp.data._data import TrainingData
        from cfp.data._datamanager import DataManager
    
        dm = DataManager(
            adata_perturbation,
            sample_rep=sample_rep,
            split_covariates=split_covariates,
            control_key="control",
            perturbation_covariates=perturbation_covariates,
            perturbation_covariate_reps=perturbation_covariate_reps,
            sample_covariates=sample_covariates,
        )
        assert isinstance(dm, DataManager)
        assert dm._sample_rep == sample_rep
        assert dm._control_key == "control"
        assert dm._split_covariates == split_covariates
        assert dm._perturbation_covariates == perturbation_covariates
        assert dm._sample_covariates == sample_covariates
    
        train_data = dm.get_train_data(adata_perturbation)
        assert isinstance(train_data, TrainingData)
        assert isinstance(train_data, TrainingData)
        assert (
            (train_data.perturbation_covariates_mask == -1)
            + (train_data.split_covariates_mask == -1)
        ).all()
        if split_covariates == []:
            assert train_data.n_controls == 1
        if split_covariates == ["cell_type"]:
>           assert train_data.n_controls == len(
                adata_perturbation.obs["cell_type"].cat.categories
            )
E           AssertionError: assert 0 == 3
E            +  where 0 = TrainingData(cell_data=array([[0.36409825, 0.91119309, 0.63827638, ..., 0.75136496, 0.9911831 ,\n        0.34151425],\n ...7])}, max_combination_length=1, null_value=0.0, data_manager=<cfp.data._datamanager.DataManager object at 0x329d5dc50>).n_controls
E            +  and   3 = len(Index(['cell_line_a', 'cell_line_b', 'cell_line_c'], dtype='object'))
E            +    where Index(['cell_line_a', 'cell_line_b', 'cell_line_c'], dtype='object') = <pandas.core.arrays.categorical.CategoricalAccessor object at 0x329d65150>.categories
E            +      where <pandas.core.arrays.categorical.CategoricalAccessor object at 0x329d65150> = 0      cell_line_a\n1      cell_line_c\n2      cell_line_c\n3      cell_line_a\n4      cell_line_a\n          ...     \n495 ...e_a\nName: cell_type, Length: 500, dtype: category\nCategories (3, object): ['cell_line_a', 'cell_line_b', 'cell_line_c'].cat

tests/data/test_datamanager.py:192: AssertionError
_ TestDataManager.test_get_train_data[sample_covariates1-perturbation_covariate_reps0-perturbation_covariates0-split_covariates0-X] _

self = <tests.data.test_datamanager.TestDataManager object at 0x3297d3310>
adata_perturbation = AnnData object with n_obs × n_vars = 500 × 50
    obs: 'cell_type', 'dosage', 'drug1', 'drug2', 'drug3', 'dosage_a', '...sage_c', 'drug_a', 'drug_b', 'drug_c', 'control'
    uns: 'drug', 'cell_type'
    obsm: 'X_pca'
    layers: 'my_counts'
sample_rep = 'X', split_covariates = []
perturbation_covariates = {'drug': ['drug1']}, perturbation_covariate_reps = {}
sample_covariates = ['dosage_c']

    @pytest.mark.parametrize("sample_rep", ["X", "X_pca"])
    @pytest.mark.parametrize("split_covariates", [[], ["cell_type"]])
    @pytest.mark.parametrize("perturbation_covariates", perturbation_covariates_args)
    @pytest.mark.parametrize("perturbation_covariate_reps", [{}, {"drug": "drug"}])
    @pytest.mark.parametrize("sample_covariates", [[], ["dosage_c"]])
    def test_get_train_data(
        self,
        adata_perturbation: ad.AnnData,
        sample_rep,
        split_covariates,
        perturbation_covariates,
        perturbation_covariate_reps,
        sample_covariates,
    ):
        from cfp.data._data import TrainingData
        from cfp.data._datamanager import DataManager
    
        dm = DataManager(
            adata_perturbation,
            sample_rep=sample_rep,
            split_covariates=split_covariates,
            control_key="control",
            perturbation_covariates=perturbation_covariates,
            perturbation_covariate_reps=perturbation_covariate_reps,
            sample_covariates=sample_covariates,
        )
        assert isinstance(dm, DataManager)
        assert dm._sample_rep == sample_rep
        assert dm._control_key == "control"
        assert dm._split_covariates == split_covariates
        assert dm._perturbation_covariates == perturbation_covariates
        assert dm._sample_covariates == sample_covariates
    
        train_data = dm.get_train_data(adata_perturbation)
        assert isinstance(train_data, TrainingData)
        assert isinstance(train_data, TrainingData)
        assert (
            (train_data.perturbation_covariates_mask == -1)
            + (train_data.split_covariates_mask == -1)
        ).all()
        if split_covariates == []:
>           assert train_data.n_controls == 1
E           assert 0 == 1
E            +  where 0 = TrainingData(cell_data=array([[0.51693322, 0.0446561 , 0.25775593, ..., 0.30966646, 0.82431829,\n        0.49210092],\n ...1])}, max_combination_length=1, null_value=0.0, data_manager=<cfp.data._datamanager.DataManager object at 0x329cf5a50>).n_controls

tests/data/test_datamanager.py:190: AssertionError
_ TestDataManager.test_get_train_data[sample_covariates1-perturbation_covariate_reps0-perturbation_covariates0-split_covariates0-X_pca] _

self = <tests.data.test_datamanager.TestDataManager object at 0x3297d3590>
adata_perturbation = AnnData object with n_obs × n_vars = 500 × 50
    obs: 'cell_type', 'dosage', 'drug1', 'drug2', 'drug3', 'dosage_a', '...sage_c', 'drug_a', 'drug_b', 'drug_c', 'control'
    uns: 'drug', 'cell_type'
    obsm: 'X_pca'
    layers: 'my_counts'
sample_rep = 'X_pca', split_covariates = []
perturbation_covariates = {'drug': ['drug1']}, perturbation_covariate_reps = {}
sample_covariates = ['dosage_c']

    @pytest.mark.parametrize("sample_rep", ["X", "X_pca"])
    @pytest.mark.parametrize("split_covariates", [[], ["cell_type"]])
    @pytest.mark.parametrize("perturbation_covariates", perturbation_covariates_args)
    @pytest.mark.parametrize("perturbation_covariate_reps", [{}, {"drug": "drug"}])
    @pytest.mark.parametrize("sample_covariates", [[], ["dosage_c"]])
    def test_get_train_data(
        self,
        adata_perturbation: ad.AnnData,
        sample_rep,
        split_covariates,
        perturbation_covariates,
        perturbation_covariate_reps,
        sample_covariates,
    ):
        from cfp.data._data import TrainingData
        from cfp.data._datamanager import DataManager
    
        dm = DataManager(
            adata_perturbation,
            sample_rep=sample_rep,
            split_covariates=split_covariates,
            control_key="control",
            perturbation_covariates=perturbation_covariates,
            perturbation_covariate_reps=perturbation_covariate_reps,
            sample_covariates=sample_covariates,
        )
        assert isinstance(dm, DataManager)
        assert dm._sample_rep == sample_rep
        assert dm._control_key == "control"
        assert dm._split_covariates == split_covariates
        assert dm._perturbation_covariates == perturbation_covariates
        assert dm._sample_covariates == sample_covariates
    
        train_data = dm.get_train_data(adata_perturbation)
        assert isinstance(train_data, TrainingData)
        assert isinstance(train_data, TrainingData)
        assert (
            (train_data.perturbation_covariates_mask == -1)
            + (train_data.split_covariates_mask == -1)
        ).all()
        if split_covariates == []:
>           assert train_data.n_controls == 1
E           assert 0 == 1
E            +  where 0 = TrainingData(cell_data=array([[0.47036609, 0.6509396 , 0.08755007, ..., 0.23280475, 0.83748322,\n        0.43505219],\n ...1])}, max_combination_length=1, null_value=0.0, data_manager=<cfp.data._datamanager.DataManager object at 0x329dd8a50>).n_controls

tests/data/test_datamanager.py:190: AssertionError
_ TestDataManager.test_get_train_data[sample_covariates1-perturbation_covariate_reps0-perturbation_covariates0-split_covariates1-X] _

self = <tests.data.test_datamanager.TestDataManager object at 0x3297d3810>
adata_perturbation = AnnData object with n_obs × n_vars = 500 × 50
    obs: 'cell_type', 'dosage', 'drug1', 'drug2', 'drug3', 'dosage_a', '...sage_c', 'drug_a', 'drug_b', 'drug_c', 'control'
    uns: 'drug', 'cell_type'
    obsm: 'X_pca'
    layers: 'my_counts'
sample_rep = 'X', split_covariates = ['cell_type']
perturbation_covariates = {'drug': ['drug1']}, perturbation_covariate_reps = {}
sample_covariates = ['dosage_c']

    @pytest.mark.parametrize("sample_rep", ["X", "X_pca"])
    @pytest.mark.parametrize("split_covariates", [[], ["cell_type"]])
    @pytest.mark.parametrize("perturbation_covariates", perturbation_covariates_args)
    @pytest.mark.parametrize("perturbation_covariate_reps", [{}, {"drug": "drug"}])
    @pytest.mark.parametrize("sample_covariates", [[], ["dosage_c"]])
    def test_get_train_data(
        self,
        adata_perturbation: ad.AnnData,
        sample_rep,
        split_covariates,
        perturbation_covariates,
        perturbation_covariate_reps,
        sample_covariates,
    ):
        from cfp.data._data import TrainingData
        from cfp.data._datamanager import DataManager
    
        dm = DataManager(
            adata_perturbation,
            sample_rep=sample_rep,
            split_covariates=split_covariates,
            control_key="control",
            perturbation_covariates=perturbation_covariates,
            perturbation_covariate_reps=perturbation_covariate_reps,
            sample_covariates=sample_covariates,
        )
        assert isinstance(dm, DataManager)
        assert dm._sample_rep == sample_rep
        assert dm._control_key == "control"
        assert dm._split_covariates == split_covariates
        assert dm._perturbation_covariates == perturbation_covariates
        assert dm._sample_covariates == sample_covariates
    
        train_data = dm.get_train_data(adata_perturbation)
        assert isinstance(train_data, TrainingData)
        assert isinstance(train_data, TrainingData)
        assert (
            (train_data.perturbation_covariates_mask == -1)
            + (train_data.split_covariates_mask == -1)
        ).all()
        if split_covariates == []:
            assert train_data.n_controls == 1
        if split_covariates == ["cell_type"]:
>           assert train_data.n_controls == len(
                adata_perturbation.obs["cell_type"].cat.categories
            )
E           AssertionError: assert 0 == 3
E            +  where 0 = TrainingData(cell_data=array([[0.11835504, 0.28519702, 0.77296062, ..., 0.72329544, 0.98795135,\n        0.06731999],\n ...5])}, max_combination_length=1, null_value=0.0, data_manager=<cfp.data._datamanager.DataManager object at 0x329e4b5d0>).n_controls
E            +  and   3 = len(Index(['cell_line_a', 'cell_line_b', 'cell_line_c'], dtype='object'))
E            +    where Index(['cell_line_a', 'cell_line_b', 'cell_line_c'], dtype='object') = <pandas.core.arrays.categorical.CategoricalAccessor object at 0x329842390>.categories
E            +      where <pandas.core.arrays.categorical.CategoricalAccessor object at 0x329842390> = 0      cell_line_b\n1      cell_line_c\n2      cell_line_c\n3      cell_line_a\n4      cell_line_b\n          ...     \n495 ...e_b\nName: cell_type, Length: 500, dtype: category\nCategories (3, object): ['cell_line_a', 'cell_line_b', 'cell_line_c'].cat

tests/data/test_datamanager.py:192: AssertionError
_ TestDataManager.test_get_train_data[sample_covariates1-perturbation_covariate_reps0-perturbation_covariates0-split_covariates1-X_pca] _

self = <tests.data.test_datamanager.TestDataManager object at 0x3297d3a90>
adata_perturbation = AnnData object with n_obs × n_vars = 500 × 50
    obs: 'cell_type', 'dosage', 'drug1', 'drug2', 'drug3', 'dosage_a', '...sage_c', 'drug_a', 'drug_b', 'drug_c', 'control'
    uns: 'drug', 'cell_type'
    obsm: 'X_pca'
    layers: 'my_counts'
sample_rep = 'X_pca', split_covariates = ['cell_type']
perturbation_covariates = {'drug': ['drug1']}, perturbation_covariate_reps = {}
sample_covariates = ['dosage_c']

    @pytest.mark.parametrize("sample_rep", ["X", "X_pca"])
    @pytest.mark.parametrize("split_covariates", [[], ["cell_type"]])
    @pytest.mark.parametrize("perturbation_covariates", perturbation_covariates_args)
    @pytest.mark.parametrize("perturbation_covariate_reps", [{}, {"drug": "drug"}])
    @pytest.mark.parametrize("sample_covariates", [[], ["dosage_c"]])
    def test_get_train_data(
        self,
        adata_perturbation: ad.AnnData,
        sample_rep,
        split_covariates,
        perturbation_covariates,
        perturbation_covariate_reps,
        sample_covariates,
    ):
        from cfp.data._data import TrainingData
        from cfp.data._datamanager import DataManager
    
        dm = DataManager(
            adata_perturbation,
            sample_rep=sample_rep,
            split_covariates=split_covariates,
            control_key="control",
            perturbation_covariates=perturbation_covariates,
            perturbation_covariate_reps=perturbation_covariate_reps,
            sample_covariates=sample_covariates,
        )
        assert isinstance(dm, DataManager)
        assert dm._sample_rep == sample_rep
        assert dm._control_key == "control"
        assert dm._split_covariates == split_covariates
        assert dm._perturbation_covariates == perturbation_covariates
        assert dm._sample_covariates == sample_covariates
    
        train_data = dm.get_train_data(adata_perturbation)
        assert isinstance(train_data, TrainingData)
        assert isinstance(train_data, TrainingData)
        assert (
            (train_data.perturbation_covariates_mask == -1)
            + (train_data.split_covariates_mask == -1)
        ).all()
        if split_covariates == []:
            assert train_data.n_controls == 1
        if split_covariates == ["cell_type"]:
>           assert train_data.n_controls == len(
                adata_perturbation.obs["cell_type"].cat.categories
            )
E           AssertionError: assert 0 == 3
E            +  where 0 = TrainingData(cell_data=array([[0.56236992, 0.48365772, 0.6367636 , ..., 0.18639497, 0.85206419,\n        0.18417022],\n ...5])}, max_combination_length=1, null_value=0.0, data_manager=<cfp.data._datamanager.DataManager object at 0x329d66990>).n_controls
E            +  and   3 = len(Index(['cell_line_a', 'cell_line_b', 'cell_line_c'], dtype='object'))
E            +    where Index(['cell_line_a', 'cell_line_b', 'cell_line_c'], dtype='object') = <pandas.core.arrays.categorical.CategoricalAccessor object at 0x3297d2090>.categories
E            +      where <pandas.core.arrays.categorical.CategoricalAccessor object at 0x3297d2090> = 0      cell_line_b\n1      cell_line_c\n2      cell_line_b\n3      cell_line_a\n4      cell_line_b\n          ...     \n495 ...e_b\nName: cell_type, Length: 500, dtype: category\nCategories (3, object): ['cell_line_a', 'cell_line_b', 'cell_line_c'].cat

tests/data/test_datamanager.py:192: AssertionError
_ TestDataManager.test_get_train_data[sample_covariates1-perturbation_covariate_reps0-perturbation_covariates1-split_covariates0-X] _

self = <tests.data.test_datamanager.TestDataManager object at 0x3297d3d10>
adata_perturbation = AnnData object with n_obs × n_vars = 500 × 50
    obs: 'cell_type', 'dosage', 'drug1', 'drug2', 'drug3', 'dosage_a', '...sage_c', 'drug_a', 'drug_b', 'drug_c', 'control'
    uns: 'drug', 'cell_type'
    obsm: 'X_pca'
    layers: 'my_counts'
sample_rep = 'X', split_covariates = []
perturbation_covariates = {'dosage': ['dosage_a'], 'drug': ['drug1']}
perturbation_covariate_reps = {}, sample_covariates = ['dosage_c']

    @pytest.mark.parametrize("sample_rep", ["X", "X_pca"])
    @pytest.mark.parametrize("split_covariates", [[], ["cell_type"]])
    @pytest.mark.parametrize("perturbation_covariates", perturbation_covariates_args)
    @pytest.mark.parametrize("perturbation_covariate_reps", [{}, {"drug": "drug"}])
    @pytest.mark.parametrize("sample_covariates", [[], ["dosage_c"]])
    def test_get_train_data(
        self,
        adata_perturbation: ad.AnnData,
        sample_rep,
        split_covariates,
        perturbation_covariates,
        perturbation_covariate_reps,
        sample_covariates,
    ):
        from cfp.data._data import TrainingData
        from cfp.data._datamanager import DataManager
    
        dm = DataManager(
            adata_perturbation,
            sample_rep=sample_rep,
            split_covariates=split_covariates,
            control_key="control",
            perturbation_covariates=perturbation_covariates,
            perturbation_covariate_reps=perturbation_covariate_reps,
            sample_covariates=sample_covariates,
        )
        assert isinstance(dm, DataManager)
        assert dm._sample_rep == sample_rep
        assert dm._control_key == "control"
        assert dm._split_covariates == split_covariates
        assert dm._perturbation_covariates == perturbation_covariates
        assert dm._sample_covariates == sample_covariates
    
        train_data = dm.get_train_data(adata_perturbation)
        assert isinstance(train_data, TrainingData)
        assert isinstance(train_data, TrainingData)
        assert (
            (train_data.perturbation_covariates_mask == -1)
            + (train_data.split_covariates_mask == -1)
        ).all()
        if split_covariates == []:
>           assert train_data.n_controls == 1
E           assert 0 == 1
E            +  where 0 = TrainingData(cell_data=array([[0.64604975, 0.76836267, 0.85892005, ..., 0.1095476 , 0.76960728,\n        0.8460155 ],\n ...5])}, max_combination_length=1, null_value=0.0, data_manager=<cfp.data._datamanager.DataManager object at 0x329e33d10>).n_controls

tests/data/test_datamanager.py:190: AssertionError
_ TestDataManager.test_get_train_data[sample_covariates1-perturbation_covariate_reps0-perturbation_covariates1-split_covariates0-X_pca] _

self = <tests.data.test_datamanager.TestDataManager object at 0x3297d3f90>
adata_perturbation = AnnData object with n_obs × n_vars = 500 × 50
    obs: 'cell_type', 'dosage', 'drug1', 'drug2', 'drug3', 'dosage_a', '...sage_c', 'drug_a', 'drug_b', 'drug_c', 'control'
    uns: 'drug', 'cell_type'
    obsm: 'X_pca'
    layers: 'my_counts'
sample_rep = 'X_pca', split_covariates = []
perturbation_covariates = {'dosage': ['dosage_a'], 'drug': ['drug1']}
perturbation_covariate_reps = {}, sample_covariates = ['dosage_c']

    @pytest.mark.parametrize("sample_rep", ["X", "X_pca"])
    @pytest.mark.parametrize("split_covariates", [[], ["cell_type"]])
    @pytest.mark.parametrize("perturbation_covariates", perturbation_covariates_args)
    @pytest.mark.parametrize("perturbation_covariate_reps", [{}, {"drug": "drug"}])
    @pytest.mark.parametrize("sample_covariates", [[], ["dosage_c"]])
    def test_get_train_data(
        self,
        adata_perturbation: ad.AnnData,
        sample_rep,
        split_covariates,
        perturbation_covariates,
        perturbation_covariate_reps,
        sample_covariates,
    ):
        from cfp.data._data import TrainingData
        from cfp.data._datamanager import DataManager
    
        dm = DataManager(
            adata_perturbation,
            sample_rep=sample_rep,
            split_covariates=split_covariates,
            control_key="control",
            perturbation_covariates=perturbation_covariates,
            perturbation_covariate_reps=perturbation_covariate_reps,
            sample_covariates=sample_covariates,
        )
        assert isinstance(dm, DataManager)
        assert dm._sample_rep == sample_rep
        assert dm._control_key == "control"
        assert dm._split_covariates == split_covariates
        assert dm._perturbation_covariates == perturbation_covariates
        assert dm._sample_covariates == sample_covariates
    
        train_data = dm.get_train_data(adata_perturbation)
        assert isinstance(train_data, TrainingData)
        assert isinstance(train_data, TrainingData)
        assert (
            (train_data.perturbation_covariates_mask == -1)
            + (train_data.split_covariates_mask == -1)
        ).all()
        if split_covariates == []:
>           assert train_data.n_controls == 1
E           assert 0 == 1
E            +  where 0 = TrainingData(cell_data=array([[0.84851257, 0.61806683, 0.88081965, ..., 0.57031198, 0.53264089,\n        0.19204802],\n ...5])}, max_combination_length=1, null_value=0.0, data_manager=<cfp.data._datamanager.DataManager object at 0x329df2750>).n_controls

tests/data/test_datamanager.py:190: AssertionError
_ TestDataManager.test_get_train_data[sample_covariates1-perturbation_covariate_reps0-perturbation_covariates1-split_covariates1-X] _

self = <tests.data.test_datamanager.TestDataManager object at 0x3297dc290>
adata_perturbation = AnnData object with n_obs × n_vars = 500 × 50
    obs: 'cell_type', 'dosage', 'drug1', 'drug2', 'drug3', 'dosage_a', '...sage_c', 'drug_a', 'drug_b', 'drug_c', 'control'
    uns: 'drug', 'cell_type'
    obsm: 'X_pca'
    layers: 'my_counts'
sample_rep = 'X', split_covariates = ['cell_type']
perturbation_covariates = {'dosage': ['dosage_a'], 'drug': ['drug1']}
perturbation_covariate_reps = {}, sample_covariates = ['dosage_c']

    @pytest.mark.parametrize("sample_rep", ["X", "X_pca"])
    @pytest.mark.parametrize("split_covariates", [[], ["cell_type"]])
    @pytest.mark.parametrize("perturbation_covariates", perturbation_covariates_args)
    @pytest.mark.parametrize("perturbation_covariate_reps", [{}, {"drug": "drug"}])
    @pytest.mark.parametrize("sample_covariates", [[], ["dosage_c"]])
    def test_get_train_data(
        self,
        adata_perturbation: ad.AnnData,
        sample_rep,
        split_covariates,
        perturbation_covariates,
        perturbation_covariate_reps,
        sample_covariates,
    ):
        from cfp.data._data import TrainingData
        from cfp.data._datamanager import DataManager
    
        dm = DataManager(
            adata_perturbation,
            sample_rep=sample_rep,
            split_covariates=split_covariates,
            control_key="control",
            perturbation_covariates=perturbation_covariates,
            perturbation_covariate_reps=perturbation_covariate_reps,
            sample_covariates=sample_covariates,
        )
        assert isinstance(dm, DataManager)
        assert dm._sample_rep == sample_rep
        assert dm._control_key == "control"
        assert dm._split_covariates == split_covariates
        assert dm._perturbation_covariates == perturbation_covariates
        assert dm._sample_covariates == sample_covariates
    
        train_data = dm.get_train_data(adata_perturbation)
        assert isinstance(train_data, TrainingData)
        assert isinstance(train_data, TrainingData)
        assert (
            (train_data.perturbation_covariates_mask == -1)
            + (train_data.split_covariates_mask == -1)
        ).all()
        if split_covariates == []:
            assert train_data.n_controls == 1
        if split_covariates == ["cell_type"]:
>           assert train_data.n_controls == len(
                adata_perturbation.obs["cell_type"].cat.categories
            )
E           AssertionError: assert 0 == 3
E            +  where 0 = TrainingData(cell_data=array([[0.34033969, 0.25873484, 0.78621012, ..., 0.57508189, 0.69993853,\n        0.62874426],\n ...4])}, max_combination_length=1, null_value=0.0, data_manager=<cfp.data._datamanager.DataManager object at 0x329df8e10>).n_controls
E            +  and   3 = len(Index(['cell_line_a', 'cell_line_b', 'cell_line_c'], dtype='object'))
E            +    where Index(['cell_line_a', 'cell_line_b', 'cell_line_c'], dtype='object') = <pandas.core.arrays.categorical.CategoricalAccessor object at 0x329dda810>.categories
E            +      where <pandas.core.arrays.categorical.CategoricalAccessor object at 0x329dda810> = 0      cell_line_b\n1      cell_line_b\n2      cell_line_b\n3      cell_line_a\n4      cell_line_c\n          ...     \n495 ...e_a\nName: cell_type, Length: 500, dtype: category\nCategories (3, object): ['cell_line_a', 'cell_line_b', 'cell_line_c'].cat

tests/data/test_datamanager.py:192: AssertionError
_ TestDataManager.test_get_train_data[sample_covariates1-perturbation_covariate_reps0-perturbation_covariates1-split_covariates1-X_pca] _

self = <tests.data.test_datamanager.TestDataManager object at 0x3297dc590>
adata_perturbation = AnnData object with n_obs × n_vars = 500 × 50
    obs: 'cell_type', 'dosage', 'drug1', 'drug2', 'drug3', 'dosage_a', '...sage_c', 'drug_a', 'drug_b', 'drug_c', 'control'
    uns: 'drug', 'cell_type'
    obsm: 'X_pca'
    layers: 'my_counts'
sample_rep = 'X_pca', split_covariates = ['cell_type']
perturbation_covariates = {'dosage': ['dosage_a'], 'drug': ['drug1']}
perturbation_covariate_reps = {}, sample_covariates = ['dosage_c']

    @pytest.mark.parametrize("sample_rep", ["X", "X_pca"])
    @pytest.mark.parametrize("split_covariates", [[], ["cell_type"]])
    @pytest.mark.parametrize("perturbation_covariates", perturbation_covariates_args)
    @pytest.mark.parametrize("perturbation_covariate_reps", [{}, {"drug": "drug"}])
    @pytest.mark.parametrize("sample_covariates", [[], ["dosage_c"]])
    def test_get_train_data(
        self,
        adata_perturbation: ad.AnnData,
        sample_rep,
        split_covariates,
        perturbation_covariates,
        perturbation_covariate_reps,
        sample_covariates,
    ):
        from cfp.data._data import TrainingData
        from cfp.data._datamanager import DataManager
    
        dm = DataManager(
            adata_perturbation,
            sample_rep=sample_rep,
            split_covariates=split_covariates,
            control_key="control",
            perturbation_covariates=perturbation_covariates,
            perturbation_covariate_reps=perturbation_covariate_reps,
            sample_covariates=sample_covariates,
        )
        assert isinstance(dm, DataManager)
        assert dm._sample_rep == sample_rep
        assert dm._control_key == "control"
        assert dm._split_covariates == split_covariates
        assert dm._perturbation_covariates == perturbation_covariates
        assert dm._sample_covariates == sample_covariates
    
        train_data = dm.get_train_data(adata_perturbation)
        assert isinstance(train_data, TrainingData)
        assert isinstance(train_data, TrainingData)
        assert (
            (train_data.perturbation_covariates_mask == -1)
            + (train_data.split_covariates_mask == -1)
        ).all()
        if split_covariates == []:
            assert train_data.n_controls == 1
        if split_covariates == ["cell_type"]:
>           assert train_data.n_controls == len(
                adata_perturbation.obs["cell_type"].cat.categories
            )
E           AssertionError: assert 0 == 3
E            +  where 0 = TrainingData(cell_data=array([[0.43663128, 0.30545398, 0.49624618, ..., 0.3657439 , 0.69105239,\n        0.16652304],\n ...2])}, max_combination_length=1, null_value=0.0, data_manager=<cfp.data._datamanager.DataManager object at 0x329e93ed0>).n_controls
E            +  and   3 = len(Index(['cell_line_a', 'cell_line_b', 'cell_line_c'], dtype='object'))
E            +    where Index(['cell_line_a', 'cell_line_b', 'cell_line_c'], dtype='object') = <pandas.core.arrays.categorical.CategoricalAccessor object at 0x3290d7090>.categories
E            +      where <pandas.core.arrays.categorical.CategoricalAccessor object at 0x3290d7090> = 0      cell_line_c\n1      cell_line_a\n2      cell_line_a\n3      cell_line_b\n4      cell_line_a\n          ...     \n495 ...e_b\nName: cell_type, Length: 500, dtype: category\nCategories (3, object): ['cell_line_a', 'cell_line_b', 'cell_line_c'].cat

tests/data/test_datamanager.py:192: AssertionError
_ TestDataManager.test_get_train_data[sample_covariates1-perturbation_covariate_reps0-perturbation_covariates2-split_covariates0-X] _

self = <tests.data.test_datamanager.TestDataManager object at 0x3297dc890>
adata_perturbation = AnnData object with n_obs × n_vars = 500 × 50
    obs: 'cell_type', 'dosage', 'drug1', 'drug2', 'drug3', 'dosage_a', '...sage_c', 'drug_a', 'drug_b', 'drug_c', 'control'
    uns: 'drug', 'cell_type'
    obsm: 'X_pca'
    layers: 'my_counts'
sample_rep = 'X', split_covariates = []
perturbation_covariates = {'dosage': ['dosage_a'], 'drug': ['drug_a']}
perturbation_covariate_reps = {}, sample_covariates = ['dosage_c']

    @pytest.mark.parametrize("sample_rep", ["X", "X_pca"])
    @pytest.mark.parametrize("split_covariates", [[], ["cell_type"]])
    @pytest.mark.parametrize("perturbation_covariates", perturbation_covariates_args)
    @pytest.mark.parametrize("perturbation_covariate_reps", [{}, {"drug": "drug"}])
    @pytest.mark.parametrize("sample_covariates", [[], ["dosage_c"]])
    def test_get_train_data(
        self,
        adata_perturbation: ad.AnnData,
        sample_rep,
        split_covariates,
        perturbation_covariates,
        perturbation_covariate_reps,
        sample_covariates,
    ):
        from cfp.data._data import TrainingData
        from cfp.data._datamanager import DataManager
    
        dm = DataManager(
            adata_perturbation,
            sample_rep=sample_rep,
            split_covariates=split_covariates,
            control_key="control",
            perturbation_covariates=perturbation_covariates,
            perturbation_covariate_reps=perturbation_covariate_reps,
            sample_covariates=sample_covariates,
        )
        assert isinstance(dm, DataManager)
        assert dm._sample_rep == sample_rep
        assert dm._control_key == "control"
        assert dm._split_covariates == split_covariates
        assert dm._perturbation_covariates == perturbation_covariates
        assert dm._sample_covariates == sample_covariates
    
        train_data = dm.get_train_data(adata_perturbation)
        assert isinstance(train_data, TrainingData)
        assert isinstance(train_data, TrainingData)
        assert (
            (train_data.perturbation_covariates_mask == -1)
            + (train_data.split_covariates_mask == -1)
        ).all()
        if split_covariates == []:
>           assert train_data.n_controls == 1
E           assert 0 == 1
E            +  where 0 = TrainingData(cell_data=array([[0.73498142, 0.32167465, 0.69368872, ..., 0.84659249, 0.536645  ,\n        0.12491103],\n ...7])}, max_combination_length=1, null_value=0.0, data_manager=<cfp.data._datamanager.DataManager object at 0x32a2b8cd0>).n_controls

tests/data/test_datamanager.py:190: AssertionError
_ TestDataManager.test_get_train_data[sample_covariates1-perturbation_covariate_reps0-perturbation_covariates2-split_covariates0-X_pca] _

self = <tests.data.test_datamanager.TestDataManager object at 0x3297dcb90>
adata_perturbation = AnnData object with n_obs × n_vars = 500 × 50
    obs: 'cell_type', 'dosage', 'drug1', 'drug2', 'drug3', 'dosage_a', '...sage_c', 'drug_a', 'drug_b', 'drug_c', 'control'
    uns: 'drug', 'cell_type'
    obsm: 'X_pca'
    layers: 'my_counts'
sample_rep = 'X_pca', split_covariates = []
perturbation_covariates = {'dosage': ['dosage_a'], 'drug': ['drug_a']}
perturbation_covariate_reps = {}, sample_covariates = ['dosage_c']

    @pytest.mark.parametrize("sample_rep", ["X", "X_pca"])
    @pytest.mark.parametrize("split_covariates", [[], ["cell_type"]])
    @pytest.mark.parametrize("perturbation_covariates", perturbation_covariates_args)
    @pytest.mark.parametrize("perturbation_covariate_reps", [{}, {"drug": "drug"}])
    @pytest.mark.parametrize("sample_covariates", [[], ["dosage_c"]])
    def test_get_train_data(
        self,
        adata_perturbation: ad.AnnData,
        sample_rep,
        split_covariates,
        perturbation_covariates,
        perturbation_covariate_reps,
        sample_covariates,
    ):
        from cfp.data._data import TrainingData
        from cfp.data._datamanager import DataManager
    
        dm = DataManager(
            adata_perturbation,
            sample_rep=sample_rep,
            split_covariates=split_covariates,
            control_key="control",
            perturbation_covariates=perturbation_covariates,
            perturbation_covariate_reps=perturbation_covariate_reps,
            sample_covariates=sample_covariates,
        )
        assert isinstance(dm, DataManager)
        assert dm._sample_rep == sample_rep
        assert dm._control_key == "control"
        assert dm._split_covariates == split_covariates
        assert dm._perturbation_covariates == perturbation_covariates
        assert dm._sample_covariates == sample_covariates
    
        train_data = dm.get_train_data(adata_perturbation)
        assert isinstance(train_data, TrainingData)
        assert isinstance(train_data, TrainingData)
        assert (
            (train_data.perturbation_covariates_mask == -1)
            + (train_data.split_covariates_mask == -1)
        ).all()
        if split_covariates == []:
>           assert train_data.n_controls == 1
E           assert 0 == 1
E            +  where 0 = TrainingData(cell_data=array([[0.68046701, 0.90618822, 0.13299377, ..., 0.72662389, 0.06847653,\n        0.32213893],\n ...7])}, max_combination_length=1, null_value=0.0, data_manager=<cfp.data._datamanager.DataManager object at 0x3298a3110>).n_controls

tests/data/test_datamanager.py:190: AssertionError
_ TestDataManager.test_get_train_data[sample_covariates1-perturbation_covariate_reps0-perturbation_covariates2-split_covariates1-X] _

self = <tests.data.test_datamanager.TestDataManager object at 0x3297dce90>
adata_perturbation = AnnData object with n_obs × n_vars = 500 × 50
    obs: 'cell_type', 'dosage', 'drug1', 'drug2', 'drug3', 'dosage_a', '...sage_c', 'drug_a', 'drug_b', 'drug_c', 'control'
    uns: 'drug', 'cell_type'
    obsm: 'X_pca'
    layers: 'my_counts'
sample_rep = 'X', split_covariates = ['cell_type']
perturbation_covariates = {'dosage': ['dosage_a'], 'drug': ['drug_a']}
perturbation_covariate_reps = {}, sample_covariates = ['dosage_c']

    @pytest.mark.parametrize("sample_rep", ["X", "X_pca"])
    @pytest.mark.parametrize("split_covariates", [[], ["cell_type"]])
    @pytest.mark.parametrize("perturbation_covariates", perturbation_covariates_args)
    @pytest.mark.parametrize("perturbation_covariate_reps", [{}, {"drug": "drug"}])
    @pytest.mark.parametrize("sample_covariates", [[], ["dosage_c"]])
    def test_get_train_data(
        self,
        adata_perturbation: ad.AnnData,
        sample_rep,
        split_covariates,
        perturbation_covariates,
        perturbation_covariate_reps,
        sample_covariates,
    ):
        from cfp.data._data import TrainingData
        from cfp.data._datamanager import DataManager
    
        dm = DataManager(
            adata_perturbation,
            sample_rep=sample_rep,
            split_covariates=split_covariates,
            control_key="control",
            perturbation_covariates=perturbation_covariates,
            perturbation_covariate_reps=perturbation_covariate_reps,
            sample_covariates=sample_covariates,
        )
        assert isinstance(dm, DataManager)
        assert dm._sample_rep == sample_rep
        assert dm._control_key == "control"
        assert dm._split_covariates == split_covariates
        assert dm._perturbation_covariates == perturbation_covariates
        assert dm._sample_covariates == sample_covariates
    
        train_data = dm.get_train_data(adata_perturbation)
        assert isinstance(train_data, TrainingData)
        assert isinstance(train_data, TrainingData)
        assert (
            (train_data.perturbation_covariates_mask == -1)
            + (train_data.split_covariates_mask == -1)
        ).all()
        if split_covariates == []:
            assert train_data.n_controls == 1
        if split_covariates == ["cell_type"]:
>           assert train_data.n_controls == len(
                adata_perturbation.obs["cell_type"].cat.categories
            )
E           AssertionError: assert 0 == 3
E            +  where 0 = TrainingData(cell_data=array([[0.59975114, 0.30059643, 0.1980937 , ..., 0.880769  , 0.22669616,\n        0.69652915],\n ...3])}, max_combination_length=1, null_value=0.0, data_manager=<cfp.data._datamanager.DataManager object at 0x329e78c10>).n_controls
E            +  and   3 = len(Index(['cell_line_a', 'cell_line_b', 'cell_line_c'], dtype='object'))
E            +    where Index(['cell_line_a', 'cell_line_b', 'cell_line_c'], dtype='object') = <pandas.core.arrays.categorical.CategoricalAccessor object at 0x329e7b610>.categories
E            +      where <pandas.core.arrays.categorical.CategoricalAccessor object at 0x329e7b610> = 0      cell_line_b\n1      cell_line_b\n2      cell_line_b\n3      cell_line_c\n4      cell_line_c\n          ...     \n495 ...e_b\nName: cell_type, Length: 500, dtype: category\nCategories (3, object): ['cell_line_a', 'cell_line_b', 'cell_line_c'].cat

tests/data/test_datamanager.py:192: AssertionError
_ TestDataManager.test_get_train_data[sample_covariates1-perturbation_covariate_reps0-perturbation_covariates2-split_covariates1-X_pca] _

self = <tests.data.test_datamanager.TestDataManager object at 0x3297dd190>
adata_perturbation = AnnData object with n_obs × n_vars = 500 × 50
    obs: 'cell_type', 'dosage', 'drug1', 'drug2', 'drug3', 'dosage_a', '...sage_c', 'drug_a', 'drug_b', 'drug_c', 'control'
    uns: 'drug', 'cell_type'
    obsm: 'X_pca'
    layers: 'my_counts'
sample_rep = 'X_pca', split_covariates = ['cell_type']
perturbation_covariates = {'dosage': ['dosage_a'], 'drug': ['drug_a']}
perturbation_covariate_reps = {}, sample_covariates = ['dosage_c']

    @pytest.mark.parametrize("sample_rep", ["X", "X_pca"])
    @pytest.mark.parametrize("split_covariates", [[], ["cell_type"]])
    @pytest.mark.parametrize("perturbation_covariates", perturbation_covariates_args)
    @pytest.mark.parametrize("perturbation_covariate_reps", [{}, {"drug": "drug"}])
    @pytest.mark.parametrize("sample_covariates", [[], ["dosage_c"]])
    def test_get_train_data(
        self,
        adata_perturbation: ad.AnnData,
        sample_rep,
        split_covariates,
        perturbation_covariates,
        perturbation_covariate_reps,
        sample_covariates,
    ):
        from cfp.data._data import TrainingData
        from cfp.data._datamanager import DataManager
    
        dm = DataManager(
            adata_perturbation,
            sample_rep=sample_rep,
            split_covariates=split_covariates,
            control_key="control",
            perturbation_covariates=perturbation_covariates,
            perturbation_covariate_reps=perturbation_covariate_reps,
            sample_covariates=sample_covariates,
        )
        assert isinstance(dm, DataManager)
        assert dm._sample_rep == sample_rep
        assert dm._control_key == "control"
        assert dm._split_covariates == split_covariates
        assert dm._perturbation_covariates == perturbation_covariates
        assert dm._sample_covariates == sample_covariates
    
        train_data = dm.get_train_data(adata_perturbation)
        assert isinstance(train_data, TrainingData)
        assert isinstance(train_data, TrainingData)
        assert (
            (train_data.perturbation_covariates_mask == -1)
            + (train_data.split_covariates_mask == -1)
        ).all()
        if split_covariates == []:
            assert train_data.n_controls == 1
        if split_covariates == ["cell_type"]:
>           assert train_data.n_controls == len(
                adata_perturbation.obs["cell_type"].cat.categories
            )
E           AssertionError: assert 0 == 3
E            +  where 0 = TrainingData(cell_data=array([[0.84840688, 0.40534447, 0.4991471 , ..., 0.06726481, 0.83528704,\n        0.81412323],\n ...3])}, max_combination_length=1, null_value=0.0, data_manager=<cfp.data._datamanager.DataManager object at 0x329e4a050>).n_controls
E            +  and   3 = len(Index(['cell_line_a', 'cell_line_b', 'cell_line_c'], dtype='object'))
E            +    where Index(['cell_line_a', 'cell_line_b', 'cell_line_c'], dtype='object') = <pandas.core.arrays.categorical.CategoricalAccessor object at 0x329e48e10>.categories
E            +      where <pandas.core.arrays.categorical.CategoricalAccessor object at 0x329e48e10> = 0      cell_line_b\n1      cell_line_a\n2      cell_line_c\n3      cell_line_b\n4      cell_line_b\n          ...     \n495 ...e_a\nName: cell_type, Length: 500, dtype: category\nCategories (3, object): ['cell_line_a', 'cell_line_b', 'cell_line_c'].cat

tests/data/test_datamanager.py:192: AssertionError
_ TestDataManager.test_get_train_data[sample_covariates1-perturbation_covariate_reps1-perturbation_covariates0-split_covariates0-X] _

self = <tests.data.test_datamanager.TestDataManager object at 0x3297dd490>
adata_perturbation = AnnData object with n_obs × n_vars = 500 × 50
    obs: 'cell_type', 'dosage', 'drug1', 'drug2', 'drug3', 'dosage_a', '...sage_c', 'drug_a', 'drug_b', 'drug_c', 'control'
    uns: 'drug', 'cell_type'
    obsm: 'X_pca'
    layers: 'my_counts'
sample_rep = 'X', split_covariates = []
perturbation_covariates = {'drug': ['drug1']}
perturbation_covariate_reps = {'drug': 'drug'}, sample_covariates = ['dosage_c']

    @pytest.mark.parametrize("sample_rep", ["X", "X_pca"])
    @pytest.mark.parametrize("split_covariates", [[], ["cell_type"]])
    @pytest.mark.parametrize("perturbation_covariates", perturbation_covariates_args)
    @pytest.mark.parametrize("perturbation_covariate_reps", [{}, {"drug": "drug"}])
    @pytest.mark.parametrize("sample_covariates", [[], ["dosage_c"]])
    def test_get_train_data(
        self,
        adata_perturbation: ad.AnnData,
        sample_rep,
        split_covariates,
        perturbation_covariates,
        perturbation_covariate_reps,
        sample_covariates,
    ):
        from cfp.data._data import TrainingData
        from cfp.data._datamanager import DataManager
    
        dm = DataManager(
            adata_perturbation,
            sample_rep=sample_rep,
            split_covariates=split_covariates,
            control_key="control",
            perturbation_covariates=perturbation_covariates,
            perturbation_covariate_reps=perturbation_covariate_reps,
            sample_covariates=sample_covariates,
        )
        assert isinstance(dm, DataManager)
        assert dm._sample_rep == sample_rep
        assert dm._control_key == "control"
        assert dm._split_covariates == split_covariates
        assert dm._perturbation_covariates == perturbation_covariates
        assert dm._sample_covariates == sample_covariates
    
        train_data = dm.get_train_data(adata_perturbation)
        assert isinstance(train_data, TrainingData)
        assert isinstance(train_data, TrainingData)
        assert (
            (train_data.perturbation_covariates_mask == -1)
            + (train_data.split_covariates_mask == -1)
        ).all()
        if split_covariates == []:
>           assert train_data.n_controls == 1
E           assert 0 == 1
E            +  where 0 = TrainingData(cell_data=array([[0.43652514, 0.25470391, 0.69575205, ..., 0.43305838, 0.0261416 ,\n        0.90333649],\n ...1])}, max_combination_length=1, null_value=0.0, data_manager=<cfp.data._datamanager.DataManager object at 0x329d22550>).n_controls

tests/data/test_datamanager.py:190: AssertionError
_ TestDataManager.test_get_train_data[sample_covariates1-perturbation_covariate_reps1-perturbation_covariates0-split_covariates0-X_pca] _

self = <tests.data.test_datamanager.TestDataManager object at 0x3297dd790>
adata_perturbation = AnnData object with n_obs × n_vars = 500 × 50
    obs: 'cell_type', 'dosage', 'drug1', 'drug2', 'drug3', 'dosage_a', '...sage_c', 'drug_a', 'drug_b', 'drug_c', 'control'
    uns: 'drug', 'cell_type'
    obsm: 'X_pca'
    layers: 'my_counts'
sample_rep = 'X_pca', split_covariates = []
perturbation_covariates = {'drug': ['drug1']}
perturbation_covariate_reps = {'drug': 'drug'}, sample_covariates = ['dosage_c']

    @pytest.mark.parametrize("sample_rep", ["X", "X_pca"])
    @pytest.mark.parametrize("split_covariates", [[], ["cell_type"]])
    @pytest.mark.parametrize("perturbation_covariates", perturbation_covariates_args)
    @pytest.mark.parametrize("perturbation_covariate_reps", [{}, {"drug": "drug"}])
    @pytest.mark.parametrize("sample_covariates", [[], ["dosage_c"]])
    def test_get_train_data(
        self,
        adata_perturbation: ad.AnnData,
        sample_rep,
        split_covariates,
        perturbation_covariates,
        perturbation_covariate_reps,
        sample_covariates,
    ):
        from cfp.data._data import TrainingData
        from cfp.data._datamanager import DataManager
    
        dm = DataManager(
            adata_perturbation,
            sample_rep=sample_rep,
            split_covariates=split_covariates,
            control_key="control",
            perturbation_covariates=perturbation_covariates,
            perturbation_covariate_reps=perturbation_covariate_reps,
            sample_covariates=sample_covariates,
        )
        assert isinstance(dm, DataManager)
        assert dm._sample_rep == sample_rep
        assert dm._control_key == "control"
        assert dm._split_covariates == split_covariates
        assert dm._perturbation_covariates == perturbation_covariates
        assert dm._sample_covariates == sample_covariates
    
        train_data = dm.get_train_data(adata_perturbation)
        assert isinstance(train_data, TrainingData)
        assert isinstance(train_data, TrainingData)
        assert (
            (train_data.perturbation_covariates_mask == -1)
            + (train_data.split_covariates_mask == -1)
        ).all()
        if split_covariates == []:
>           assert train_data.n_controls == 1
E           assert 0 == 1
E            +  where 0 = TrainingData(cell_data=array([[0.441803  , 0.24232534, 0.19850125, ..., 0.80854562, 0.62865164,\n        0.82129517],\n ...1])}, max_combination_length=1, null_value=0.0, data_manager=<cfp.data._datamanager.DataManager object at 0x3297d2f50>).n_controls

tests/data/test_datamanager.py:190: AssertionError
_ TestDataManager.test_get_train_data[sample_covariates1-perturbation_covariate_reps1-perturbation_covariates0-split_covariates1-X] _

self = <tests.data.test_datamanager.TestDataManager object at 0x3297dda90>
adata_perturbation = AnnData object with n_obs × n_vars = 500 × 50
    obs: 'cell_type', 'dosage', 'drug1', 'drug2', 'drug3', 'dosage_a', '...sage_c', 'drug_a', 'drug_b', 'drug_c', 'control'
    uns: 'drug', 'cell_type'
    obsm: 'X_pca'
    layers: 'my_counts'
sample_rep = 'X', split_covariates = ['cell_type']
perturbation_covariates = {'drug': ['drug1']}
perturbation_covariate_reps = {'drug': 'drug'}, sample_covariates = ['dosage_c']

    @pytest.mark.parametrize("sample_rep", ["X", "X_pca"])
    @pytest.mark.parametrize("split_covariates", [[], ["cell_type"]])
    @pytest.mark.parametrize("perturbation_covariates", perturbation_covariates_args)
    @pytest.mark.parametrize("perturbation_covariate_reps", [{}, {"drug": "drug"}])
    @pytest.mark.parametrize("sample_covariates", [[], ["dosage_c"]])
    def test_get_train_data(
        self,
        adata_perturbation: ad.AnnData,
        sample_rep,
        split_covariates,
        perturbation_covariates,
        perturbation_covariate_reps,
        sample_covariates,
    ):
        from cfp.data._data import TrainingData
        from cfp.data._datamanager import DataManager
    
        dm = DataManager(
            adata_perturbation,
            sample_rep=sample_rep,
            split_covariates=split_covariates,
            control_key="control",
            perturbation_covariates=perturbation_covariates,
            perturbation_covariate_reps=perturbation_covariate_reps,
            sample_covariates=sample_covariates,
        )
        assert isinstance(dm, DataManager)
        assert dm._sample_rep == sample_rep
        assert dm._control_key == "control"
        assert dm._split_covariates == split_covariates
        assert dm._perturbation_covariates == perturbation_covariates
        assert dm._sample_covariates == sample_covariates
    
        train_data = dm.get_train_data(adata_perturbation)
        assert isinstance(train_data, TrainingData)
        assert isinstance(train_data, TrainingData)
        assert (
            (train_data.perturbation_covariates_mask == -1)
            + (train_data.split_covariates_mask == -1)
        ).all()
        if split_covariates == []:
            assert train_data.n_controls == 1
        if split_covariates == ["cell_type"]:
>           assert train_data.n_controls == len(
                adata_perturbation.obs["cell_type"].cat.categories
            )
E           AssertionError: assert 0 == 3
E            +  where 0 = TrainingData(cell_data=array([[0.4199354 , 0.42127453, 0.60881499, ..., 0.29696369, 0.27239852,\n        0.47523338],\n ...5])}, max_combination_length=1, null_value=0.0, data_manager=<cfp.data._datamanager.DataManager object at 0x32a2b6410>).n_controls
E            +  and   3 = len(Index(['cell_line_a', 'cell_line_b', 'cell_line_c'], dtype='object'))
E            +    where Index(['cell_line_a', 'cell_line_b', 'cell_line_c'], dtype='object') = <pandas.core.arrays.categorical.CategoricalAccessor object at 0x329e83d50>.categories
E            +      where <pandas.core.arrays.categorical.CategoricalAccessor object at 0x329e83d50> = 0      cell_line_a\n1      cell_line_c\n2      cell_line_a\n3      cell_line_c\n4      cell_line_c\n          ...     \n495 ...e_a\nName: cell_type, Length: 500, dtype: category\nCategories (3, object): ['cell_line_a', 'cell_line_b', 'cell_line_c'].cat

tests/data/test_datamanager.py:192: AssertionError
_ TestDataManager.test_get_train_data[sample_covariates1-perturbation_covariate_reps1-perturbation_covariates0-split_covariates1-X_pca] _

self = <tests.data.test_datamanager.TestDataManager object at 0x3297ddd90>
adata_perturbation = AnnData object with n_obs × n_vars = 500 × 50
    obs: 'cell_type', 'dosage', 'drug1', 'drug2', 'drug3', 'dosage_a', '...sage_c', 'drug_a', 'drug_b', 'drug_c', 'control'
    uns: 'drug', 'cell_type'
    obsm: 'X_pca'
    layers: 'my_counts'
sample_rep = 'X_pca', split_covariates = ['cell_type']
perturbation_covariates = {'drug': ['drug1']}
perturbation_covariate_reps = {'drug': 'drug'}, sample_covariates = ['dosage_c']

    @pytest.mark.parametrize("sample_rep", ["X", "X_pca"])
    @pytest.mark.parametrize("split_covariates", [[], ["cell_type"]])
    @pytest.mark.parametrize("perturbation_covariates", perturbation_covariates_args)
    @pytest.mark.parametrize("perturbation_covariate_reps", [{}, {"drug": "drug"}])
    @pytest.mark.parametrize("sample_covariates", [[], ["dosage_c"]])
    def test_get_train_data(
        self,
        adata_perturbation: ad.AnnData,
        sample_rep,
        split_covariates,
        perturbation_covariates,
        perturbation_covariate_reps,
        sample_covariates,
    ):
        from cfp.data._data import TrainingData
        from cfp.data._datamanager import DataManager
    
        dm = DataManager(
            adata_perturbation,
            sample_rep=sample_rep,
            split_covariates=split_covariates,
            control_key="control",
            perturbation_covariates=perturbation_covariates,
            perturbation_covariate_reps=perturbation_covariate_reps,
            sample_covariates=sample_covariates,
        )
        assert isinstance(dm, DataManager)
        assert dm._sample_rep == sample_rep
        assert dm._control_key == "control"
        assert dm._split_covariates == split_covariates
        assert dm._perturbation_covariates == perturbation_covariates
        assert dm._sample_covariates == sample_covariates
    
        train_data = dm.get_train_data(adata_perturbation)
        assert isinstance(train_data, TrainingData)
        assert isinstance(train_data, TrainingData)
        assert (
            (train_data.perturbation_covariates_mask == -1)
            + (train_data.split_covariates_mask == -1)
        ).all()
        if split_covariates == []:
            assert train_data.n_controls == 1
        if split_covariates == ["cell_type"]:
>           assert train_data.n_controls == len(
                adata_perturbation.obs["cell_type"].cat.categories
            )
E           AssertionError: assert 0 == 3
E            +  where 0 = TrainingData(cell_data=array([[0.85446814, 0.69054497, 0.8088134 , ..., 0.01887224, 0.25958239,\n        0.7166554 ],\n ...5])}, max_combination_length=1, null_value=0.0, data_manager=<cfp.data._datamanager.DataManager object at 0x32a357510>).n_controls
E            +  and   3 = len(Index(['cell_line_a', 'cell_line_b', 'cell_line_c'], dtype='object'))
E            +    where Index(['cell_line_a', 'cell_line_b', 'cell_line_c'], dtype='object') = <pandas.core.arrays.categorical.CategoricalAccessor object at 0x32a355110>.categories
E            +      where <pandas.core.arrays.categorical.CategoricalAccessor object at 0x32a355110> = 0      cell_line_c\n1      cell_line_a\n2      cell_line_c\n3      cell_line_c\n4      cell_line_b\n          ...     \n495 ...e_b\nName: cell_type, Length: 500, dtype: category\nCategories (3, object): ['cell_line_a', 'cell_line_b', 'cell_line_c'].cat

tests/data/test_datamanager.py:192: AssertionError
_ TestDataManager.test_get_train_data[sample_covariates1-perturbation_covariate_reps1-perturbation_covariates1-split_covariates0-X] _

self = <tests.data.test_datamanager.TestDataManager object at 0x3297de090>
adata_perturbation = AnnData object with n_obs × n_vars = 500 × 50
    obs: 'cell_type', 'dosage', 'drug1', 'drug2', 'drug3', 'dosage_a', '...sage_c', 'drug_a', 'drug_b', 'drug_c', 'control'
    uns: 'drug', 'cell_type'
    obsm: 'X_pca'
    layers: 'my_counts'
sample_rep = 'X', split_covariates = []
perturbation_covariates = {'dosage': ['dosage_a'], 'drug': ['drug1']}
perturbation_covariate_reps = {'drug': 'drug'}, sample_covariates = ['dosage_c']

    @pytest.mark.parametrize("sample_rep", ["X", "X_pca"])
    @pytest.mark.parametrize("split_covariates", [[], ["cell_type"]])
    @pytest.mark.parametrize("perturbation_covariates", perturbation_covariates_args)
    @pytest.mark.parametrize("perturbation_covariate_reps", [{}, {"drug": "drug"}])
    @pytest.mark.parametrize("sample_covariates", [[], ["dosage_c"]])
    def test_get_train_data(
        self,
        adata_perturbation: ad.AnnData,
        sample_rep,
        split_covariates,
        perturbation_covariates,
        perturbation_covariate_reps,
        sample_covariates,
    ):
        from cfp.data._data import TrainingData
        from cfp.data._datamanager import DataManager
    
        dm = DataManager(
            adata_perturbation,
            sample_rep=sample_rep,
            split_covariates=split_covariates,
            control_key="control",
            perturbation_covariates=perturbation_covariates,
            perturbation_covariate_reps=perturbation_covariate_reps,
            sample_covariates=sample_covariates,
        )
        assert isinstance(dm, DataManager)
        assert dm._sample_rep == sample_rep
        assert dm._control_key == "control"
        assert dm._split_covariates == split_covariates
        assert dm._perturbation_covariates == perturbation_covariates
        assert dm._sample_covariates == sample_covariates
    
        train_data = dm.get_train_data(adata_perturbation)
        assert isinstance(train_data, TrainingData)
        assert isinstance(train_data, TrainingData)
        assert (
            (train_data.perturbation_covariates_mask == -1)
            + (train_data.split_covariates_mask == -1)
        ).all()
        if split_covariates == []:
>           assert train_data.n_controls == 1
E           assert 0 == 1
E            +  where 0 = TrainingData(cell_data=array([[0.63387302, 0.32295079, 0.22476914, ..., 0.65454117, 0.36874376,\n        0.19087445],\n ...5])}, max_combination_length=1, null_value=0.0, data_manager=<cfp.data._datamanager.DataManager object at 0x32a3552d0>).n_controls

tests/data/test_datamanager.py:190: AssertionError
_ TestDataManager.test_get_train_data[sample_covariates1-perturbation_covariate_reps1-perturbation_covariates1-split_covariates0-X_pca] _

self = <tests.data.test_datamanager.TestDataManager object at 0x3297de390>
adata_perturbation = AnnData object with n_obs × n_vars = 500 × 50
    obs: 'cell_type', 'dosage', 'drug1', 'drug2', 'drug3', 'dosage_a', '...sage_c', 'drug_a', 'drug_b', 'drug_c', 'control'
    uns: 'drug', 'cell_type'
    obsm: 'X_pca'
    layers: 'my_counts'
sample_rep = 'X_pca', split_covariates = []
perturbation_covariates = {'dosage': ['dosage_a'], 'drug': ['drug1']}
perturbation_covariate_reps = {'drug': 'drug'}, sample_covariates = ['dosage_c']

    @pytest.mark.parametrize("sample_rep", ["X", "X_pca"])
    @pytest.mark.parametrize("split_covariates", [[], ["cell_type"]])
    @pytest.mark.parametrize("perturbation_covariates", perturbation_covariates_args)
    @pytest.mark.parametrize("perturbation_covariate_reps", [{}, {"drug": "drug"}])
    @pytest.mark.parametrize("sample_covariates", [[], ["dosage_c"]])
    def test_get_train_data(
        self,
        adata_perturbation: ad.AnnData,
        sample_rep,
        split_covariates,
        perturbation_covariates,
        perturbation_covariate_reps,
        sample_covariates,
    ):
        from cfp.data._data import TrainingData
        from cfp.data._datamanager import DataManager
    
        dm = DataManager(
            adata_perturbation,
            sample_rep=sample_rep,
            split_covariates=split_covariates,
            control_key="control",
            perturbation_covariates=perturbation_covariates,
            perturbation_covariate_reps=perturbation_covariate_reps,
            sample_covariates=sample_covariates,
        )
        assert isinstance(dm, DataManager)
        assert dm._sample_rep == sample_rep
        assert dm._control_key == "control"
        assert dm._split_covariates == split_covariates
        assert dm._perturbation_covariates == perturbation_covariates
        assert dm._sample_covariates == sample_covariates
    
        train_data = dm.get_train_data(adata_perturbation)
        assert isinstance(train_data, TrainingData)
        assert isinstance(train_data, TrainingData)
        assert (
            (train_data.perturbation_covariates_mask == -1)
            + (train_data.split_covariates_mask == -1)
        ).all()
        if split_covariates == []:
>           assert train_data.n_controls == 1
E           assert 0 == 1
E            +  where 0 = TrainingData(cell_data=array([[0.12117658, 0.97067345, 0.53279961, ..., 0.41459932, 0.74478532,\n        0.90212179],\n ...5])}, max_combination_length=1, null_value=0.0, data_manager=<cfp.data._datamanager.DataManager object at 0x329dd9cd0>).n_controls

tests/data/test_datamanager.py:190: AssertionError
_ TestDataManager.test_get_train_data[sample_covariates1-perturbation_covariate_reps1-perturbation_covariates1-split_covariates1-X] _

self = <tests.data.test_datamanager.TestDataManager object at 0x3297de690>
adata_perturbation = AnnData object with n_obs × n_vars = 500 × 50
    obs: 'cell_type', 'dosage', 'drug1', 'drug2', 'drug3', 'dosage_a', '...sage_c', 'drug_a', 'drug_b', 'drug_c', 'control'
    uns: 'drug', 'cell_type'
    obsm: 'X_pca'
    layers: 'my_counts'
sample_rep = 'X', split_covariates = ['cell_type']
perturbation_covariates = {'dosage': ['dosage_a'], 'drug': ['drug1']}
perturbation_covariate_reps = {'drug': 'drug'}, sample_covariates = ['dosage_c']

    @pytest.mark.parametrize("sample_rep", ["X", "X_pca"])
    @pytest.mark.parametrize("split_covariates", [[], ["cell_type"]])
    @pytest.mark.parametrize("perturbation_covariates", perturbation_covariates_args)
    @pytest.mark.parametrize("perturbation_covariate_reps", [{}, {"drug": "drug"}])
    @pytest.mark.parametrize("sample_covariates", [[], ["dosage_c"]])
    def test_get_train_data(
        self,
        adata_perturbation: ad.AnnData,
        sample_rep,
        split_covariates,
        perturbation_covariates,
        perturbation_covariate_reps,
        sample_covariates,
    ):
        from cfp.data._data import TrainingData
        from cfp.data._datamanager import DataManager
    
        dm = DataManager(
            adata_perturbation,
            sample_rep=sample_rep,
            split_covariates=split_covariates,
            control_key="control",
            perturbation_covariates=perturbation_covariates,
            perturbation_covariate_reps=perturbation_covariate_reps,
            sample_covariates=sample_covariates,
        )
        assert isinstance(dm, DataManager)
        assert dm._sample_rep == sample_rep
        assert dm._control_key == "control"
        assert dm._split_covariates == split_covariates
        assert dm._perturbation_covariates == perturbation_covariates
        assert dm._sample_covariates == sample_covariates
    
        train_data = dm.get_train_data(adata_perturbation)
        assert isinstance(train_data, TrainingData)
        assert isinstance(train_data, TrainingData)
        assert (
            (train_data.perturbation_covariates_mask == -1)
            + (train_data.split_covariates_mask == -1)
        ).all()
        if split_covariates == []:
            assert train_data.n_controls == 1
        if split_covariates == ["cell_type"]:
>           assert train_data.n_controls == len(
                adata_perturbation.obs["cell_type"].cat.categories
            )
E           AssertionError: assert 0 == 3
E            +  where 0 = TrainingData(cell_data=array([[0.7054427 , 0.48400793, 0.60334592, ..., 0.61342246, 0.77736783,\n        0.16645588],\n ...3])}, max_combination_length=1, null_value=0.0, data_manager=<cfp.data._datamanager.DataManager object at 0x32a2e52d0>).n_controls
E            +  and   3 = len(Index(['cell_line_a', 'cell_line_b', 'cell_line_c'], dtype='object'))
E            +    where Index(['cell_line_a', 'cell_line_b', 'cell_line_c'], dtype='object') = <pandas.core.arrays.categorical.CategoricalAccessor object at 0x329dad110>.categories
E            +      where <pandas.core.arrays.categorical.CategoricalAccessor object at 0x329dad110> = 0      cell_line_b\n1      cell_line_a\n2      cell_line_a\n3      cell_line_a\n4      cell_line_a\n          ...     \n495 ...e_a\nName: cell_type, Length: 500, dtype: category\nCategories (3, object): ['cell_line_a', 'cell_line_b', 'cell_line_c'].cat

tests/data/test_datamanager.py:192: AssertionError
_ TestDataManager.test_get_train_data[sample_covariates1-perturbation_covariate_reps1-perturbation_covariates1-split_covariates1-X_pca] _

self = <tests.data.test_datamanager.TestDataManager object at 0x3297de990>
adata_perturbation = AnnData object with n_obs × n_vars = 500 × 50
    obs: 'cell_type', 'dosage', 'drug1', 'drug2', 'drug3', 'dosage_a', '...sage_c', 'drug_a', 'drug_b', 'drug_c', 'control'
    uns: 'drug', 'cell_type'
    obsm: 'X_pca'
    layers: 'my_counts'
sample_rep = 'X_pca', split_covariates = ['cell_type']
perturbation_covariates = {'dosage': ['dosage_a'], 'drug': ['drug1']}
perturbation_covariate_reps = {'drug': 'drug'}, sample_covariates = ['dosage_c']

    @pytest.mark.parametrize("sample_rep", ["X", "X_pca"])
    @pytest.mark.parametrize("split_covariates", [[], ["cell_type"]])
    @pytest.mark.parametrize("perturbation_covariates", perturbation_covariates_args)
    @pytest.mark.parametrize("perturbation_covariate_reps", [{}, {"drug": "drug"}])
    @pytest.mark.parametrize("sample_covariates", [[], ["dosage_c"]])
    def test_get_train_data(
        self,
        adata_perturbation: ad.AnnData,
        sample_rep,
        split_covariates,
        perturbation_covariates,
        perturbation_covariate_reps,
        sample_covariates,
    ):
        from cfp.data._data import TrainingData
        from cfp.data._datamanager import DataManager
    
        dm = DataManager(
            adata_perturbation,
            sample_rep=sample_rep,
            split_covariates=split_covariates,
            control_key="control",
            perturbation_covariates=perturbation_covariates,
            perturbation_covariate_reps=perturbation_covariate_reps,
            sample_covariates=sample_covariates,
        )
        assert isinstance(dm, DataManager)
        assert dm._sample_rep == sample_rep
        assert dm._control_key == "control"
        assert dm._split_covariates == split_covariates
        assert dm._perturbation_covariates == perturbation_covariates
        assert dm._sample_covariates == sample_covariates
    
        train_data = dm.get_train_data(adata_perturbation)
        assert isinstance(train_data, TrainingData)
        assert isinstance(train_data, TrainingData)
        assert (
            (train_data.perturbation_covariates_mask == -1)
            + (train_data.split_covariates_mask == -1)
        ).all()
        if split_covariates == []:
            assert train_data.n_controls == 1
        if split_covariates == ["cell_type"]:
>           assert train_data.n_controls == len(
                adata_perturbation.obs["cell_type"].cat.categories
            )
E           AssertionError: assert 0 == 3
E            +  where 0 = TrainingData(cell_data=array([[0.60505093, 0.69001508, 0.84097354, ..., 0.88817801, 0.71414759,\n        0.04851472],\n ...2])}, max_combination_length=1, null_value=0.0, data_manager=<cfp.data._datamanager.DataManager object at 0x32a3a38d0>).n_controls
E            +  and   3 = len(Index(['cell_line_a', 'cell_line_b', 'cell_line_c'], dtype='object'))
E            +    where Index(['cell_line_a', 'cell_line_b', 'cell_line_c'], dtype='object') = <pandas.core.arrays.categorical.CategoricalAccessor object at 0x32a333890>.categories
E            +      where <pandas.core.arrays.categorical.CategoricalAccessor object at 0x32a333890> = 0      cell_line_b\n1      cell_line_b\n2      cell_line_b\n3      cell_line_c\n4      cell_line_b\n          ...     \n495 ...e_c\nName: cell_type, Length: 500, dtype: category\nCategories (3, object): ['cell_line_a', 'cell_line_b', 'cell_line_c'].cat

tests/data/test_datamanager.py:192: AssertionError
_ TestDataManager.test_get_train_data[sample_covariates1-perturbation_covariate_reps1-perturbation_covariates2-split_covariates0-X] _

self = <tests.data.test_datamanager.TestDataManager object at 0x3297dec90>
adata_perturbation = AnnData object with n_obs × n_vars = 500 × 50
    obs: 'cell_type', 'dosage', 'drug1', 'drug2', 'drug3', 'dosage_a', '...sage_c', 'drug_a', 'drug_b', 'drug_c', 'control'
    uns: 'drug', 'cell_type'
    obsm: 'X_pca'
    layers: 'my_counts'
sample_rep = 'X', split_covariates = []
perturbation_covariates = {'dosage': ['dosage_a'], 'drug': ['drug_a']}
perturbation_covariate_reps = {'drug': 'drug'}, sample_covariates = ['dosage_c']

    @pytest.mark.parametrize("sample_rep", ["X", "X_pca"])
    @pytest.mark.parametrize("split_covariates", [[], ["cell_type"]])
    @pytest.mark.parametrize("perturbation_covariates", perturbation_covariates_args)
    @pytest.mark.parametrize("perturbation_covariate_reps", [{}, {"drug": "drug"}])
    @pytest.mark.parametrize("sample_covariates", [[], ["dosage_c"]])
    def test_get_train_data(
        self,
        adata_perturbation: ad.AnnData,
        sample_rep,
        split_covariates,
        perturbation_covariates,
        perturbation_covariate_reps,
        sample_covariates,
    ):
        from cfp.data._data import TrainingData
        from cfp.data._datamanager import DataManager
    
        dm = DataManager(
            adata_perturbation,
            sample_rep=sample_rep,
            split_covariates=split_covariates,
            control_key="control",
            perturbation_covariates=perturbation_covariates,
            perturbation_covariate_reps=perturbation_covariate_reps,
            sample_covariates=sample_covariates,
        )
        assert isinstance(dm, DataManager)
        assert dm._sample_rep == sample_rep
        assert dm._control_key == "control"
        assert dm._split_covariates == split_covariates
        assert dm._perturbation_covariates == perturbation_covariates
        assert dm._sample_covariates == sample_covariates
    
        train_data = dm.get_train_data(adata_perturbation)
        assert isinstance(train_data, TrainingData)
        assert isinstance(train_data, TrainingData)
        assert (
            (train_data.perturbation_covariates_mask == -1)
            + (train_data.split_covariates_mask == -1)
        ).all()
        if split_covariates == []:
>           assert train_data.n_controls == 1
E           assert 0 == 1
E            +  where 0 = TrainingData(cell_data=array([[0.22284251, 0.19730408, 0.44861593, ..., 0.09566226, 0.8634796 ,\n        0.3986871 ],\n ...7])}, max_combination_length=1, null_value=0.0, data_manager=<cfp.data._datamanager.DataManager object at 0x329daef10>).n_controls

tests/data/test_datamanager.py:190: AssertionError
_ TestDataManager.test_get_train_data[sample_covariates1-perturbation_covariate_reps1-perturbation_covariates2-split_covariates0-X_pca] _

self = <tests.data.test_datamanager.TestDataManager object at 0x3297def90>
adata_perturbation = AnnData object with n_obs × n_vars = 500 × 50
    obs: 'cell_type', 'dosage', 'drug1', 'drug2', 'drug3', 'dosage_a', '...sage_c', 'drug_a', 'drug_b', 'drug_c', 'control'
    uns: 'drug', 'cell_type'
    obsm: 'X_pca'
    layers: 'my_counts'
sample_rep = 'X_pca', split_covariates = []
perturbation_covariates = {'dosage': ['dosage_a'], 'drug': ['drug_a']}
perturbation_covariate_reps = {'drug': 'drug'}, sample_covariates = ['dosage_c']

    @pytest.mark.parametrize("sample_rep", ["X", "X_pca"])
    @pytest.mark.parametrize("split_covariates", [[], ["cell_type"]])
    @pytest.mark.parametrize("perturbation_covariates", perturbation_covariates_args)
    @pytest.mark.parametrize("perturbation_covariate_reps", [{}, {"drug": "drug"}])
    @pytest.mark.parametrize("sample_covariates", [[], ["dosage_c"]])
    def test_get_train_data(
        self,
        adata_perturbation: ad.AnnData,
        sample_rep,
        split_covariates,
        perturbation_covariates,
        perturbation_covariate_reps,
        sample_covariates,
    ):
        from cfp.data._data import TrainingData
        from cfp.data._datamanager import DataManager
    
        dm = DataManager(
            adata_perturbation,
            sample_rep=sample_rep,
            split_covariates=split_covariates,
            control_key="control",
            perturbation_covariates=perturbation_covariates,
            perturbation_covariate_reps=perturbation_covariate_reps,
            sample_covariates=sample_covariates,
        )
        assert isinstance(dm, DataManager)
        assert dm._sample_rep == sample_rep
        assert dm._control_key == "control"
        assert dm._split_covariates == split_covariates
        assert dm._perturbation_covariates == perturbation_covariates
        assert dm._sample_covariates == sample_covariates
    
        train_data = dm.get_train_data(adata_perturbation)
        assert isinstance(train_data, TrainingData)
        assert isinstance(train_data, TrainingData)
        assert (
            (train_data.perturbation_covariates_mask == -1)
            + (train_data.split_covariates_mask == -1)
        ).all()
        if split_covariates == []:
>           assert train_data.n_controls == 1
E           assert 0 == 1
E            +  where 0 = TrainingData(cell_data=array([[2.68376979e-01, 4.98980328e-02, 5.73669821e-01, ...,\n        8.21357802e-01, 4.22061497...7])}, max_combination_length=1, null_value=0.0, data_manager=<cfp.data._datamanager.DataManager object at 0x32a374650>).n_controls

tests/data/test_datamanager.py:190: AssertionError
_ TestDataManager.test_get_train_data[sample_covariates1-perturbation_covariate_reps1-perturbation_covariates2-split_covariates1-X] _

self = <tests.data.test_datamanager.TestDataManager object at 0x3297df290>
adata_perturbation = AnnData object with n_obs × n_vars = 500 × 50
    obs: 'cell_type', 'dosage', 'drug1', 'drug2', 'drug3', 'dosage_a', '...sage_c', 'drug_a', 'drug_b', 'drug_c', 'control'
    uns: 'drug', 'cell_type'
    obsm: 'X_pca'
    layers: 'my_counts'
sample_rep = 'X', split_covariates = ['cell_type']
perturbation_covariates = {'dosage': ['dosage_a'], 'drug': ['drug_a']}
perturbation_covariate_reps = {'drug': 'drug'}, sample_covariates = ['dosage_c']

    @pytest.mark.parametrize("sample_rep", ["X", "X_pca"])
    @pytest.mark.parametrize("split_covariates", [[], ["cell_type"]])
    @pytest.mark.parametrize("perturbation_covariates", perturbation_covariates_args)
    @pytest.mark.parametrize("perturbation_covariate_reps", [{}, {"drug": "drug"}])
    @pytest.mark.parametrize("sample_covariates", [[], ["dosage_c"]])
    def test_get_train_data(
        self,
        adata_perturbation: ad.AnnData,
        sample_rep,
        split_covariates,
        perturbation_covariates,
        perturbation_covariate_reps,
        sample_covariates,
    ):
        from cfp.data._data import TrainingData
        from cfp.data._datamanager import DataManager
    
        dm = DataManager(
            adata_perturbation,
            sample_rep=sample_rep,
            split_covariates=split_covariates,
            control_key="control",
            perturbation_covariates=perturbation_covariates,
            perturbation_covariate_reps=perturbation_covariate_reps,
            sample_covariates=sample_covariates,
        )
        assert isinstance(dm, DataManager)
        assert dm._sample_rep == sample_rep
        assert dm._control_key == "control"
        assert dm._split_covariates == split_covariates
        assert dm._perturbation_covariates == perturbation_covariates
        assert dm._sample_covariates == sample_covariates
    
        train_data = dm.get_train_data(adata_perturbation)
        assert isinstance(train_data, TrainingData)
        assert isinstance(train_data, TrainingData)
        assert (
            (train_data.perturbation_covariates_mask == -1)
            + (train_data.split_covariates_mask == -1)
        ).all()
        if split_covariates == []:
            assert train_data.n_controls == 1
        if split_covariates == ["cell_type"]:
>           assert train_data.n_controls == len(
                adata_perturbation.obs["cell_type"].cat.categories
            )
E           AssertionError: assert 0 == 3
E            +  where 0 = TrainingData(cell_data=array([[0.29307206, 0.43113691, 0.07831684, ..., 0.33103067, 0.93759714,\n        0.71691264],\n ...3])}, max_combination_length=1, null_value=0.0, data_manager=<cfp.data._datamanager.DataManager object at 0x32a36be50>).n_controls
E            +  and   3 = len(Index(['cell_line_a', 'cell_line_b', 'cell_line_c'], dtype='object'))
E            +    where Index(['cell_line_a', 'cell_line_b', 'cell_line_c'], dtype='object') = <pandas.core.arrays.categorical.CategoricalAccessor object at 0x32a2ba050>.categories
E            +      where <pandas.core.arrays.categorical.CategoricalAccessor object at 0x32a2ba050> = 0      cell_line_a\n1      cell_line_a\n2      cell_line_a\n3      cell_line_a\n4      cell_line_a\n          ...     \n495 ...e_b\nName: cell_type, Length: 500, dtype: category\nCategories (3, object): ['cell_line_a', 'cell_line_b', 'cell_line_c'].cat

tests/data/test_datamanager.py:192: AssertionError
_ TestDataManager.test_get_train_data[sample_covariates1-perturbation_covariate_reps1-perturbation_covariates2-split_covariates1-X_pca] _

self = <tests.data.test_datamanager.TestDataManager object at 0x3297df590>
adata_perturbation = AnnData object with n_obs × n_vars = 500 × 50
    obs: 'cell_type', 'dosage', 'drug1', 'drug2', 'drug3', 'dosage_a', '...sage_c', 'drug_a', 'drug_b', 'drug_c', 'control'
    uns: 'drug', 'cell_type'
    obsm: 'X_pca'
    layers: 'my_counts'
sample_rep = 'X_pca', split_covariates = ['cell_type']
perturbation_covariates = {'dosage': ['dosage_a'], 'drug': ['drug_a']}
perturbation_covariate_reps = {'drug': 'drug'}, sample_covariates = ['dosage_c']

    @pytest.mark.parametrize("sample_rep", ["X", "X_pca"])
    @pytest.mark.parametrize("split_covariates", [[], ["cell_type"]])
    @pytest.mark.parametrize("perturbation_covariates", perturbation_covariates_args)
    @pytest.mark.parametrize("perturbation_covariate_reps", [{}, {"drug": "drug"}])
    @pytest.mark.parametrize("sample_covariates", [[], ["dosage_c"]])
    def test_get_train_data(
        self,
        adata_perturbation: ad.AnnData,
        sample_rep,
        split_covariates,
        perturbation_covariates,
        perturbation_covariate_reps,
        sample_covariates,
    ):
        from cfp.data._data import TrainingData
        from cfp.data._datamanager import DataManager
    
        dm = DataManager(
            adata_perturbation,
            sample_rep=sample_rep,
            split_covariates=split_covariates,
            control_key="control",
            perturbation_covariates=perturbation_covariates,
            perturbation_covariate_reps=perturbation_covariate_reps,
            sample_covariates=sample_covariates,
        )
        assert isinstance(dm, DataManager)
        assert dm._sample_rep == sample_rep
        assert dm._control_key == "control"
        assert dm._split_covariates == split_covariates
        assert dm._perturbation_covariates == perturbation_covariates
        assert dm._sample_covariates == sample_covariates
    
        train_data = dm.get_train_data(adata_perturbation)
        assert isinstance(train_data, TrainingData)
        assert isinstance(train_data, TrainingData)
        assert (
            (train_data.perturbation_covariates_mask == -1)
            + (train_data.split_covariates_mask == -1)
        ).all()
        if split_covariates == []:
            assert train_data.n_controls == 1
        if split_covariates == ["cell_type"]:
>           assert train_data.n_controls == len(
                adata_perturbation.obs["cell_type"].cat.categories
            )
E           AssertionError: assert 0 == 3
E            +  where 0 = TrainingData(cell_data=array([[0.43679468, 0.04486632, 0.35114522, ..., 0.78811814, 0.81518626,\n        0.06960072],\n ...3])}, max_combination_length=1, null_value=0.0, data_manager=<cfp.data._datamanager.DataManager object at 0x32a381410>).n_controls
E            +  and   3 = len(Index(['cell_line_a', 'cell_line_b', 'cell_line_c'], dtype='object'))
E            +    where Index(['cell_line_a', 'cell_line_b', 'cell_line_c'], dtype='object') = <pandas.core.arrays.categorical.CategoricalAccessor object at 0x329e917d0>.categories
E            +      where <pandas.core.arrays.categorical.CategoricalAccessor object at 0x329e917d0> = 0      cell_line_c\n1      cell_line_b\n2      cell_line_a\n3      cell_line_c\n4      cell_line_a\n          ...     \n495 ...e_c\nName: cell_type, Length: 500, dtype: category\nCategories (3, object): ['cell_line_a', 'cell_line_b', 'cell_line_c'].cat

tests/data/test_datamanager.py:192: AssertionError
_ TestDataManager.test_get_train_data_with_combinations[perturbation_covariate_reps0-perturbation_covariates0-split_covariates0] _

self = <tests.data.test_datamanager.TestDataManager object at 0x3297e8450>
adata_perturbation = AnnData object with n_obs × n_vars = 500 × 50
    obs: 'cell_type', 'dosage', 'drug1', 'drug2', 'drug3', 'dosage_a', '...sage_c', 'drug_a', 'drug_b', 'drug_c', 'control'
    uns: 'drug', 'cell_type'
    obsm: 'X_pca'
    layers: 'my_counts'
split_covariates = [], perturbation_covariates = {'drug': ['drug1', 'drug2']}
perturbation_covariate_reps = {}

    @pytest.mark.parametrize("split_covariates", [[], ["cell_type"]])
    @pytest.mark.parametrize(
        "perturbation_covariates", perturbation_covariate_comb_args
    )
    @pytest.mark.parametrize("perturbation_covariate_reps", [{}, {"drug": "drug"}])
    def test_get_train_data_with_combinations(
        self,
        adata_perturbation: ad.AnnData,
        split_covariates,
        perturbation_covariates,
        perturbation_covariate_reps,
    ):
        from cfp.data._datamanager import DataManager
    
        dm = DataManager(
            adata_perturbation,
            sample_rep="X",
            split_covariates=split_covariates,
            control_key="control",
            perturbation_covariates=perturbation_covariates,
            perturbation_covariate_reps=perturbation_covariate_reps,
            sample_covariates=["cell_type"],
            sample_covariate_reps={"cell_type": "cell_type"},
        )
    
        train_data = dm.get_train_data(adata_perturbation)
    
        assert (
            (train_data.perturbation_covariates_mask == -1)
            + (train_data.split_covariates_mask == -1)
        ).all()
    
        if split_covariates == []:
>           assert train_data.n_controls == 1
E           assert 0 == 1
E            +  where 0 = TrainingData(cell_data=array([[0.604543  , 0.00709937, 0.27455288, ..., 0.50473197, 0.73770799,\n        0.19825309],\n ...9])}, max_combination_length=2, null_value=0.0, data_manager=<cfp.data._datamanager.DataManager object at 0x32a2eb990>).n_controls

tests/data/test_datamanager.py:246: AssertionError
_ TestDataManager.test_get_train_data_with_combinations[perturbation_covariate_reps0-perturbation_covariates0-split_covariates1] _

self = <tests.data.test_datamanager.TestDataManager object at 0x3297e8710>
adata_perturbation = AnnData object with n_obs × n_vars = 500 × 50
    obs: 'cell_type', 'dosage', 'drug1', 'drug2', 'drug3', 'dosage_a', '...sage_c', 'drug_a', 'drug_b', 'drug_c', 'control'
    uns: 'drug', 'cell_type'
    obsm: 'X_pca'
    layers: 'my_counts'
split_covariates = ['cell_type']
perturbation_covariates = {'drug': ['drug1', 'drug2']}
perturbation_covariate_reps = {}

    @pytest.mark.parametrize("split_covariates", [[], ["cell_type"]])
    @pytest.mark.parametrize(
        "perturbation_covariates", perturbation_covariate_comb_args
    )
    @pytest.mark.parametrize("perturbation_covariate_reps", [{}, {"drug": "drug"}])
    def test_get_train_data_with_combinations(
        self,
        adata_perturbation: ad.AnnData,
        split_covariates,
        perturbation_covariates,
        perturbation_covariate_reps,
    ):
        from cfp.data._datamanager import DataManager
    
        dm = DataManager(
            adata_perturbation,
            sample_rep="X",
            split_covariates=split_covariates,
            control_key="control",
            perturbation_covariates=perturbation_covariates,
            perturbation_covariate_reps=perturbation_covariate_reps,
            sample_covariates=["cell_type"],
            sample_covariate_reps={"cell_type": "cell_type"},
        )
    
        train_data = dm.get_train_data(adata_perturbation)
    
        assert (
            (train_data.perturbation_covariates_mask == -1)
            + (train_data.split_covariates_mask == -1)
        ).all()
    
        if split_covariates == []:
            assert train_data.n_controls == 1
        if split_covariates == ["cell_type"]:
>           assert train_data.n_controls == len(
                adata_perturbation.obs["cell_type"].cat.categories
            )
E           AssertionError: assert 0 == 3
E            +  where 0 = TrainingData(cell_data=array([[0.39210988, 0.14937641, 0.01518196, ..., 0.91975907, 0.32731796,\n        0.15560679],\n ...9])}, max_combination_length=2, null_value=0.0, data_manager=<cfp.data._datamanager.DataManager object at 0x32a31a810>).n_controls
E            +  and   3 = len(Index(['cell_line_a', 'cell_line_b', 'cell_line_c'], dtype='object'))
E            +    where Index(['cell_line_a', 'cell_line_b', 'cell_line_c'], dtype='object') = <pandas.core.arrays.categorical.CategoricalAccessor object at 0x32a2e8050>.categories
E            +      where <pandas.core.arrays.categorical.CategoricalAccessor object at 0x32a2e8050> = 0      cell_line_b\n1      cell_line_a\n2      cell_line_b\n3      cell_line_b\n4      cell_line_a\n          ...     \n495 ...e_a\nName: cell_type, Length: 500, dtype: category\nCategories (3, object): ['cell_line_a', 'cell_line_b', 'cell_line_c'].cat

tests/data/test_datamanager.py:248: AssertionError
_ TestDataManager.test_get_train_data_with_combinations[perturbation_covariate_reps0-perturbation_covariates1-split_covariates0] _

self = <tests.data.test_datamanager.TestDataManager object at 0x3297ea090>
adata_perturbation = AnnData object with n_obs × n_vars = 500 × 50
    obs: 'cell_type', 'dosage', 'drug1', 'drug2', 'drug3', 'dosage_a', '...sage_c', 'drug_a', 'drug_b', 'drug_c', 'control'
    uns: 'drug', 'cell_type'
    obsm: 'X_pca'
    layers: 'my_counts'
split_covariates = []
perturbation_covariates = {'dosage': ['dosage_a', 'dosage_b'], 'drug': ['drug1', 'drug2']}
perturbation_covariate_reps = {}

    @pytest.mark.parametrize("split_covariates", [[], ["cell_type"]])
    @pytest.mark.parametrize(
        "perturbation_covariates", perturbation_covariate_comb_args
    )
    @pytest.mark.parametrize("perturbation_covariate_reps", [{}, {"drug": "drug"}])
    def test_get_train_data_with_combinations(
        self,
        adata_perturbation: ad.AnnData,
        split_covariates,
        perturbation_covariates,
        perturbation_covariate_reps,
    ):
        from cfp.data._datamanager import DataManager
    
        dm = DataManager(
            adata_perturbation,
            sample_rep="X",
            split_covariates=split_covariates,
            control_key="control",
            perturbation_covariates=perturbation_covariates,
            perturbation_covariate_reps=perturbation_covariate_reps,
            sample_covariates=["cell_type"],
            sample_covariate_reps={"cell_type": "cell_type"},
        )
    
        train_data = dm.get_train_data(adata_perturbation)
    
        assert (
            (train_data.perturbation_covariates_mask == -1)
            + (train_data.split_covariates_mask == -1)
        ).all()
    
        if split_covariates == []:
>           assert train_data.n_controls == 1
E           assert 0 == 1
E            +  where 0 = TrainingData(cell_data=array([[0.74122272, 0.77120489, 0.04841988, ..., 0.28864482, 0.79102373,\n        0.92341082],\n ...2])}, max_combination_length=2, null_value=0.0, data_manager=<cfp.data._datamanager.DataManager object at 0x32a3768d0>).n_controls

tests/data/test_datamanager.py:246: AssertionError
_ TestDataManager.test_get_train_data_with_combinations[perturbation_covariate_reps0-perturbation_covariates1-split_covariates1] _

self = <tests.data.test_datamanager.TestDataManager object at 0x3297ea290>
adata_perturbation = AnnData object with n_obs × n_vars = 500 × 50
    obs: 'cell_type', 'dosage', 'drug1', 'drug2', 'drug3', 'dosage_a', '...sage_c', 'drug_a', 'drug_b', 'drug_c', 'control'
    uns: 'drug', 'cell_type'
    obsm: 'X_pca'
    layers: 'my_counts'
split_covariates = ['cell_type']
perturbation_covariates = {'dosage': ['dosage_a', 'dosage_b'], 'drug': ['drug1', 'drug2']}
perturbation_covariate_reps = {}

    @pytest.mark.parametrize("split_covariates", [[], ["cell_type"]])
    @pytest.mark.parametrize(
        "perturbation_covariates", perturbation_covariate_comb_args
    )
    @pytest.mark.parametrize("perturbation_covariate_reps", [{}, {"drug": "drug"}])
    def test_get_train_data_with_combinations(
        self,
        adata_perturbation: ad.AnnData,
        split_covariates,
        perturbation_covariates,
        perturbation_covariate_reps,
    ):
        from cfp.data._datamanager import DataManager
    
        dm = DataManager(
            adata_perturbation,
            sample_rep="X",
            split_covariates=split_covariates,
            control_key="control",
            perturbation_covariates=perturbation_covariates,
            perturbation_covariate_reps=perturbation_covariate_reps,
            sample_covariates=["cell_type"],
            sample_covariate_reps={"cell_type": "cell_type"},
        )
    
        train_data = dm.get_train_data(adata_perturbation)
    
        assert (
            (train_data.perturbation_covariates_mask == -1)
            + (train_data.split_covariates_mask == -1)
        ).all()
    
        if split_covariates == []:
            assert train_data.n_controls == 1
        if split_covariates == ["cell_type"]:
>           assert train_data.n_controls == len(
                adata_perturbation.obs["cell_type"].cat.categories
            )
E           AssertionError: assert 0 == 3
E            +  where 0 = TrainingData(cell_data=array([[0.04579455, 0.93553892, 0.21222017, ..., 0.01397723, 0.04640091,\n        0.61966252],\n ...5])}, max_combination_length=2, null_value=0.0, data_manager=<cfp.data._datamanager.DataManager object at 0x329e83d50>).n_controls
E            +  and   3 = len(Index(['cell_line_a', 'cell_line_b', 'cell_line_c'], dtype='object'))
E            +    where Index(['cell_line_a', 'cell_line_b', 'cell_line_c'], dtype='object') = <pandas.core.arrays.categorical.CategoricalAccessor object at 0x32a363b50>.categories
E            +      where <pandas.core.arrays.categorical.CategoricalAccessor object at 0x32a363b50> = 0      cell_line_b\n1      cell_line_a\n2      cell_line_b\n3      cell_line_a\n4      cell_line_b\n          ...     \n495 ...e_b\nName: cell_type, Length: 500, dtype: category\nCategories (3, object): ['cell_line_a', 'cell_line_b', 'cell_line_c'].cat

tests/data/test_datamanager.py:248: AssertionError
_ TestDataManager.test_get_train_data_with_combinations[perturbation_covariate_reps0-perturbation_covariates2-split_covariates0] _

self = <tests.data.test_datamanager.TestDataManager object at 0x3297ea510>
adata_perturbation = AnnData object with n_obs × n_vars = 500 × 50
    obs: 'cell_type', 'dosage', 'drug1', 'drug2', 'drug3', 'dosage_a', '...sage_c', 'drug_a', 'drug_b', 'drug_c', 'control'
    uns: 'drug', 'cell_type'
    obsm: 'X_pca'
    layers: 'my_counts'
split_covariates = []
perturbation_covariates = {'dosage': ['dosage_a', 'dosage_b', 'dosage_c'], 'drug': ['drug_a', 'drug_b', 'drug_c']}
perturbation_covariate_reps = {}

    @pytest.mark.parametrize("split_covariates", [[], ["cell_type"]])
    @pytest.mark.parametrize(
        "perturbation_covariates", perturbation_covariate_comb_args
    )
    @pytest.mark.parametrize("perturbation_covariate_reps", [{}, {"drug": "drug"}])
    def test_get_train_data_with_combinations(
        self,
        adata_perturbation: ad.AnnData,
        split_covariates,
        perturbation_covariates,
        perturbation_covariate_reps,
    ):
        from cfp.data._datamanager import DataManager
    
        dm = DataManager(
            adata_perturbation,
            sample_rep="X",
            split_covariates=split_covariates,
            control_key="control",
            perturbation_covariates=perturbation_covariates,
            perturbation_covariate_reps=perturbation_covariate_reps,
            sample_covariates=["cell_type"],
            sample_covariate_reps={"cell_type": "cell_type"},
        )
    
        train_data = dm.get_train_data(adata_perturbation)
    
        assert (
            (train_data.perturbation_covariates_mask == -1)
            + (train_data.split_covariates_mask == -1)
        ).all()
    
        if split_covariates == []:
>           assert train_data.n_controls == 1
E           assert 0 == 1
E            +  where 0 = TrainingData(cell_data=array([[0.65550431, 0.78072167, 0.14426735, ..., 0.92552219, 0.36372543,\n        0.51203268],\n ...0])}, max_combination_length=3, null_value=0.0, data_manager=<cfp.data._datamanager.DataManager object at 0x16b6b12d0>).n_controls

tests/data/test_datamanager.py:246: AssertionError
_ TestDataManager.test_get_train_data_with_combinations[perturbation_covariate_reps0-perturbation_covariates2-split_covariates1] _

self = <tests.data.test_datamanager.TestDataManager object at 0x3297ea790>
adata_perturbation = AnnData object with n_obs × n_vars = 500 × 50
    obs: 'cell_type', 'dosage', 'drug1', 'drug2', 'drug3', 'dosage_a', '...sage_c', 'drug_a', 'drug_b', 'drug_c', 'control'
    uns: 'drug', 'cell_type'
    obsm: 'X_pca'
    layers: 'my_counts'
split_covariates = ['cell_type']
perturbation_covariates = {'dosage': ['dosage_a', 'dosage_b', 'dosage_c'], 'drug': ['drug_a', 'drug_b', 'drug_c']}
perturbation_covariate_reps = {}

    @pytest.mark.parametrize("split_covariates", [[], ["cell_type"]])
    @pytest.mark.parametrize(
        "perturbation_covariates", perturbation_covariate_comb_args
    )
    @pytest.mark.parametrize("perturbation_covariate_reps", [{}, {"drug": "drug"}])
    def test_get_train_data_with_combinations(
        self,
        adata_perturbation: ad.AnnData,
        split_covariates,
        perturbation_covariates,
        perturbation_covariate_reps,
    ):
        from cfp.data._datamanager import DataManager
    
        dm = DataManager(
            adata_perturbation,
            sample_rep="X",
            split_covariates=split_covariates,
            control_key="control",
            perturbation_covariates=perturbation_covariates,
            perturbation_covariate_reps=perturbation_covariate_reps,
            sample_covariates=["cell_type"],
            sample_covariate_reps={"cell_type": "cell_type"},
        )
    
        train_data = dm.get_train_data(adata_perturbation)
    
        assert (
            (train_data.perturbation_covariates_mask == -1)
            + (train_data.split_covariates_mask == -1)
        ).all()
    
        if split_covariates == []:
            assert train_data.n_controls == 1
        if split_covariates == ["cell_type"]:
>           assert train_data.n_controls == len(
                adata_perturbation.obs["cell_type"].cat.categories
            )
E           AssertionError: assert 0 == 3
E            +  where 0 = TrainingData(cell_data=array([[0.11654213, 0.71841165, 0.82912906, ..., 0.95689291, 0.15879167,\n        0.24948332],\n ...9])}, max_combination_length=3, null_value=0.0, data_manager=<cfp.data._datamanager.DataManager object at 0x32a318790>).n_controls
E            +  and   3 = len(Index(['cell_line_a', 'cell_line_b', 'cell_line_c'], dtype='object'))
E            +    where Index(['cell_line_a', 'cell_line_b', 'cell_line_c'], dtype='object') = <pandas.core.arrays.categorical.CategoricalAccessor object at 0x16b67c0d0>.categories
E            +      where <pandas.core.arrays.categorical.CategoricalAccessor object at 0x16b67c0d0> = 0      cell_line_a\n1      cell_line_c\n2      cell_line_b\n3      cell_line_b\n4      cell_line_c\n          ...     \n495 ...e_a\nName: cell_type, Length: 500, dtype: category\nCategories (3, object): ['cell_line_a', 'cell_line_b', 'cell_line_c'].cat

tests/data/test_datamanager.py:248: AssertionError
_ TestDataManager.test_get_train_data_with_combinations[perturbation_covariate_reps1-perturbation_covariates0-split_covariates0] _

self = <tests.data.test_datamanager.TestDataManager object at 0x3297eaa10>
adata_perturbation = AnnData object with n_obs × n_vars = 500 × 50
    obs: 'cell_type', 'dosage', 'drug1', 'drug2', 'drug3', 'dosage_a', '...sage_c', 'drug_a', 'drug_b', 'drug_c', 'control'
    uns: 'drug', 'cell_type'
    obsm: 'X_pca'
    layers: 'my_counts'
split_covariates = [], perturbation_covariates = {'drug': ['drug1', 'drug2']}
perturbation_covariate_reps = {'drug': 'drug'}

    @pytest.mark.parametrize("split_covariates", [[], ["cell_type"]])
    @pytest.mark.parametrize(
        "perturbation_covariates", perturbation_covariate_comb_args
    )
    @pytest.mark.parametrize("perturbation_covariate_reps", [{}, {"drug": "drug"}])
    def test_get_train_data_with_combinations(
        self,
        adata_perturbation: ad.AnnData,
        split_covariates,
        perturbation_covariates,
        perturbation_covariate_reps,
    ):
        from cfp.data._datamanager import DataManager
    
        dm = DataManager(
            adata_perturbation,
            sample_rep="X",
            split_covariates=split_covariates,
            control_key="control",
            perturbation_covariates=perturbation_covariates,
            perturbation_covariate_reps=perturbation_covariate_reps,
            sample_covariates=["cell_type"],
            sample_covariate_reps={"cell_type": "cell_type"},
        )
    
        train_data = dm.get_train_data(adata_perturbation)
    
        assert (
            (train_data.perturbation_covariates_mask == -1)
            + (train_data.split_covariates_mask == -1)
        ).all()
    
        if split_covariates == []:
>           assert train_data.n_controls == 1
E           assert 0 == 1
E            +  where 0 = TrainingData(cell_data=array([[0.98375325, 0.25478082, 0.44903985, ..., 0.90955354, 0.97543204,\n        0.1206321 ],\n ...9])}, max_combination_length=2, null_value=0.0, data_manager=<cfp.data._datamanager.DataManager object at 0x16b69d2d0>).n_controls

tests/data/test_datamanager.py:246: AssertionError
_ TestDataManager.test_get_train_data_with_combinations[perturbation_covariate_reps1-perturbation_covariates0-split_covariates1] _

self = <tests.data.test_datamanager.TestDataManager object at 0x3297eac90>
adata_perturbation = AnnData object with n_obs × n_vars = 500 × 50
    obs: 'cell_type', 'dosage', 'drug1', 'drug2', 'drug3', 'dosage_a', '...sage_c', 'drug_a', 'drug_b', 'drug_c', 'control'
    uns: 'drug', 'cell_type'
    obsm: 'X_pca'
    layers: 'my_counts'
split_covariates = ['cell_type']
perturbation_covariates = {'drug': ['drug1', 'drug2']}
perturbation_covariate_reps = {'drug': 'drug'}

    @pytest.mark.parametrize("split_covariates", [[], ["cell_type"]])
    @pytest.mark.parametrize(
        "perturbation_covariates", perturbation_covariate_comb_args
    )
    @pytest.mark.parametrize("perturbation_covariate_reps", [{}, {"drug": "drug"}])
    def test_get_train_data_with_combinations(
        self,
        adata_perturbation: ad.AnnData,
        split_covariates,
        perturbation_covariates,
        perturbation_covariate_reps,
    ):
        from cfp.data._datamanager import DataManager
    
        dm = DataManager(
            adata_perturbation,
            sample_rep="X",
            split_covariates=split_covariates,
            control_key="control",
            perturbation_covariates=perturbation_covariates,
            perturbation_covariate_reps=perturbation_covariate_reps,
            sample_covariates=["cell_type"],
            sample_covariate_reps={"cell_type": "cell_type"},
        )
    
        train_data = dm.get_train_data(adata_perturbation)
    
        assert (
            (train_data.perturbation_covariates_mask == -1)
            + (train_data.split_covariates_mask == -1)
        ).all()
    
        if split_covariates == []:
            assert train_data.n_controls == 1
        if split_covariates == ["cell_type"]:
>           assert train_data.n_controls == len(
                adata_perturbation.obs["cell_type"].cat.categories
            )
E           AssertionError: assert 0 == 3
E            +  where 0 = TrainingData(cell_data=array([[0.55459949, 0.08301058, 0.74553467, ..., 0.59237311, 0.06796047,\n        0.72010333],\n ...9])}, max_combination_length=2, null_value=0.0, data_manager=<cfp.data._datamanager.DataManager object at 0x32a362310>).n_controls
E            +  and   3 = len(Index(['cell_line_a', 'cell_line_b', 'cell_line_c'], dtype='object'))
E            +    where Index(['cell_line_a', 'cell_line_b', 'cell_line_c'], dtype='object') = <pandas.core.arrays.categorical.CategoricalAccessor object at 0x3297ea410>.categories
E            +      where <pandas.core.arrays.categorical.CategoricalAccessor object at 0x3297ea410> = 0      cell_line_b\n1      cell_line_a\n2      cell_line_a\n3      cell_line_a\n4      cell_line_a\n          ...     \n495 ...e_b\nName: cell_type, Length: 500, dtype: category\nCategories (3, object): ['cell_line_a', 'cell_line_b', 'cell_line_c'].cat

tests/data/test_datamanager.py:248: AssertionError
_ TestDataManager.test_get_train_data_with_combinations[perturbation_covariate_reps1-perturbation_covariates1-split_covariates0] _

self = <tests.data.test_datamanager.TestDataManager object at 0x3297eaf10>
adata_perturbation = AnnData object with n_obs × n_vars = 500 × 50
    obs: 'cell_type', 'dosage', 'drug1', 'drug2', 'drug3', 'dosage_a', '...sage_c', 'drug_a', 'drug_b', 'drug_c', 'control'
    uns: 'drug', 'cell_type'
    obsm: 'X_pca'
    layers: 'my_counts'
split_covariates = []
perturbation_covariates = {'dosage': ['dosage_a', 'dosage_b'], 'drug': ['drug1', 'drug2']}
perturbation_covariate_reps = {'drug': 'drug'}

    @pytest.mark.parametrize("split_covariates", [[], ["cell_type"]])
    @pytest.mark.parametrize(
        "perturbation_covariates", perturbation_covariate_comb_args
    )
    @pytest.mark.parametrize("perturbation_covariate_reps", [{}, {"drug": "drug"}])
    def test_get_train_data_with_combinations(
        self,
        adata_perturbation: ad.AnnData,
        split_covariates,
        perturbation_covariates,
        perturbation_covariate_reps,
    ):
        from cfp.data._datamanager import DataManager
    
        dm = DataManager(
            adata_perturbation,
            sample_rep="X",
            split_covariates=split_covariates,
            control_key="control",
            perturbation_covariates=perturbation_covariates,
            perturbation_covariate_reps=perturbation_covariate_reps,
            sample_covariates=["cell_type"],
            sample_covariate_reps={"cell_type": "cell_type"},
        )
    
        train_data = dm.get_train_data(adata_perturbation)
    
        assert (
            (train_data.perturbation_covariates_mask == -1)
            + (train_data.split_covariates_mask == -1)
        ).all()
    
        if split_covariates == []:
>           assert train_data.n_controls == 1
E           assert 0 == 1
E            +  where 0 = TrainingData(cell_data=array([[0.03985373, 0.41869645, 0.55970079, ..., 0.72277053, 0.56901807,\n        0.58556294],\n ...1])}, max_combination_length=2, null_value=0.0, data_manager=<cfp.data._datamanager.DataManager object at 0x329e91b10>).n_controls

tests/data/test_datamanager.py:246: AssertionError
_ TestDataManager.test_get_train_data_with_combinations[perturbation_covariate_reps1-perturbation_covariates1-split_covariates1] _

self = <tests.data.test_datamanager.TestDataManager object at 0x3297eb190>
adata_perturbation = AnnData object with n_obs × n_vars = 500 × 50
    obs: 'cell_type', 'dosage', 'drug1', 'drug2', 'drug3', 'dosage_a', '...sage_c', 'drug_a', 'drug_b', 'drug_c', 'control'
    uns: 'drug', 'cell_type'
    obsm: 'X_pca'
    layers: 'my_counts'
split_covariates = ['cell_type']
perturbation_covariates = {'dosage': ['dosage_a', 'dosage_b'], 'drug': ['drug1', 'drug2']}
perturbation_covariate_reps = {'drug': 'drug'}

    @pytest.mark.parametrize("split_covariates", [[], ["cell_type"]])
    @pytest.mark.parametrize(
        "perturbation_covariates", perturbation_covariate_comb_args
    )
    @pytest.mark.parametrize("perturbation_covariate_reps", [{}, {"drug": "drug"}])
    def test_get_train_data_with_combinations(
        self,
        adata_perturbation: ad.AnnData,
        split_covariates,
        perturbation_covariates,
        perturbation_covariate_reps,
    ):
        from cfp.data._datamanager import DataManager
    
        dm = DataManager(
            adata_perturbation,
            sample_rep="X",
            split_covariates=split_covariates,
            control_key="control",
            perturbation_covariates=perturbation_covariates,
            perturbation_covariate_reps=perturbation_covariate_reps,
            sample_covariates=["cell_type"],
            sample_covariate_reps={"cell_type": "cell_type"},
        )
    
        train_data = dm.get_train_data(adata_perturbation)
    
        assert (
            (train_data.perturbation_covariates_mask == -1)
            + (train_data.split_covariates_mask == -1)
        ).all()
    
        if split_covariates == []:
            assert train_data.n_controls == 1
        if split_covariates == ["cell_type"]:
>           assert train_data.n_controls == len(
                adata_perturbation.obs["cell_type"].cat.categories
            )
E           AssertionError: assert 0 == 3
E            +  where 0 = TrainingData(cell_data=array([[0.07473422, 0.8733421 , 0.13960439, ..., 0.71211237, 0.13181888,\n        0.1750313 ],\n ...9])}, max_combination_length=2, null_value=0.0, data_manager=<cfp.data._datamanager.DataManager object at 0x32a30e650>).n_controls
E            +  and   3 = len(Index(['cell_line_a', 'cell_line_b', 'cell_line_c'], dtype='object'))
E            +    where Index(['cell_line_a', 'cell_line_b', 'cell_line_c'], dtype='object') = <pandas.core.arrays.categorical.CategoricalAccessor object at 0x32a2b5dd0>.categories
E            +      where <pandas.core.arrays.categorical.CategoricalAccessor object at 0x32a2b5dd0> = 0      cell_line_c\n1      cell_line_a\n2      cell_line_c\n3      cell_line_b\n4      cell_line_a\n          ...     \n495 ...e_b\nName: cell_type, Length: 500, dtype: category\nCategories (3, object): ['cell_line_a', 'cell_line_b', 'cell_line_c'].cat

tests/data/test_datamanager.py:248: AssertionError
_ TestDataManager.test_get_train_data_with_combinations[perturbation_covariate_reps1-perturbation_covariates2-split_covariates0] _

self = <tests.data.test_datamanager.TestDataManager object at 0x3297eb490>
adata_perturbation = AnnData object with n_obs × n_vars = 500 × 50
    obs: 'cell_type', 'dosage', 'drug1', 'drug2', 'drug3', 'dosage_a', '...sage_c', 'drug_a', 'drug_b', 'drug_c', 'control'
    uns: 'drug', 'cell_type'
    obsm: 'X_pca'
    layers: 'my_counts'
split_covariates = []
perturbation_covariates = {'dosage': ['dosage_a', 'dosage_b', 'dosage_c'], 'drug': ['drug_a', 'drug_b', 'drug_c']}
perturbation_covariate_reps = {'drug': 'drug'}

    @pytest.mark.parametrize("split_covariates", [[], ["cell_type"]])
    @pytest.mark.parametrize(
        "perturbation_covariates", perturbation_covariate_comb_args
    )
    @pytest.mark.parametrize("perturbation_covariate_reps", [{}, {"drug": "drug"}])
    def test_get_train_data_with_combinations(
        self,
        adata_perturbation: ad.AnnData,
        split_covariates,
        perturbation_covariates,
        perturbation_covariate_reps,
    ):
        from cfp.data._datamanager import DataManager
    
        dm = DataManager(
            adata_perturbation,
            sample_rep="X",
            split_covariates=split_covariates,
            control_key="control",
            perturbation_covariates=perturbation_covariates,
            perturbation_covariate_reps=perturbation_covariate_reps,
            sample_covariates=["cell_type"],
            sample_covariate_reps={"cell_type": "cell_type"},
        )
    
        train_data = dm.get_train_data(adata_perturbation)
    
        assert (
            (train_data.perturbation_covariates_mask == -1)
            + (train_data.split_covariates_mask == -1)
        ).all()
    
        if split_covariates == []:
>           assert train_data.n_controls == 1
E           assert 0 == 1
E            +  where 0 = TrainingData(cell_data=array([[0.12248368, 0.09444541, 0.22110993, ..., 0.36889305, 0.76240879,\n        0.57621478],\n ...2])}, max_combination_length=3, null_value=0.0, data_manager=<cfp.data._datamanager.DataManager object at 0x32a2f1110>).n_controls

tests/data/test_datamanager.py:246: AssertionError
_ TestDataManager.test_get_train_data_with_combinations[perturbation_covariate_reps1-perturbation_covariates2-split_covariates1] _

self = <tests.data.test_datamanager.TestDataManager object at 0x3297eb790>
adata_perturbation = AnnData object with n_obs × n_vars = 500 × 50
    obs: 'cell_type', 'dosage', 'drug1', 'drug2', 'drug3', 'dosage_a', '...sage_c', 'drug_a', 'drug_b', 'drug_c', 'control'
    uns: 'drug', 'cell_type'
    obsm: 'X_pca'
    layers: 'my_counts'
split_covariates = ['cell_type']
perturbation_covariates = {'dosage': ['dosage_a', 'dosage_b', 'dosage_c'], 'drug': ['drug_a', 'drug_b', 'drug_c']}
perturbation_covariate_reps = {'drug': 'drug'}

    @pytest.mark.parametrize("split_covariates", [[], ["cell_type"]])
    @pytest.mark.parametrize(
        "perturbation_covariates", perturbation_covariate_comb_args
    )
    @pytest.mark.parametrize("perturbation_covariate_reps", [{}, {"drug": "drug"}])
    def test_get_train_data_with_combinations(
        self,
        adata_perturbation: ad.AnnData,
        split_covariates,
        perturbation_covariates,
        perturbation_covariate_reps,
    ):
        from cfp.data._datamanager import DataManager
    
        dm = DataManager(
            adata_perturbation,
            sample_rep="X",
            split_covariates=split_covariates,
            control_key="control",
            perturbation_covariates=perturbation_covariates,
            perturbation_covariate_reps=perturbation_covariate_reps,
            sample_covariates=["cell_type"],
            sample_covariate_reps={"cell_type": "cell_type"},
        )
    
        train_data = dm.get_train_data(adata_perturbation)
    
        assert (
            (train_data.perturbation_covariates_mask == -1)
            + (train_data.split_covariates_mask == -1)
        ).all()
    
        if split_covariates == []:
            assert train_data.n_controls == 1
        if split_covariates == ["cell_type"]:
>           assert train_data.n_controls == len(
                adata_perturbation.obs["cell_type"].cat.categories
            )
E           AssertionError: assert 0 == 3
E            +  where 0 = TrainingData(cell_data=array([[0.49860599, 0.83754887, 0.94882996, ..., 0.72333208, 0.75410393,\n        0.31578972],\n ...1])}, max_combination_length=3, null_value=0.0, data_manager=<cfp.data._datamanager.DataManager object at 0x16b673d50>).n_controls
E            +  and   3 = len(Index(['cell_line_a', 'cell_line_b', 'cell_line_c'], dtype='object'))
E            +    where Index(['cell_line_a', 'cell_line_b', 'cell_line_c'], dtype='object') = <pandas.core.arrays.categorical.CategoricalAccessor object at 0x32a2e38d0>.categories
E            +      where <pandas.core.arrays.categorical.CategoricalAccessor object at 0x32a2e38d0> = 0      cell_line_a\n1      cell_line_b\n2      cell_line_a\n3      cell_line_b\n4      cell_line_c\n          ...     \n495 ...e_a\nName: cell_type, Length: 500, dtype: category\nCategories (3, object): ['cell_line_a', 'cell_line_b', 'cell_line_c'].cat

tests/data/test_datamanager.py:248: AssertionError
=============================== warnings summary ===============================
../../../mambaforge/envs/moscot/lib/python3.11/site-packages/anndata/utils.py:429
  /Users/selman.ozleyen/mambaforge/envs/moscot/lib/python3.11/site-packages/anndata/utils.py:429: FutureWarning: Importing read_csv from `anndata` is deprecated. Import anndata.io.read_csv instead.
    warnings.warn(msg, FutureWarning)

../../../mambaforge/envs/moscot/lib/python3.11/site-packages/anndata/utils.py:429
  /Users/selman.ozleyen/mambaforge/envs/moscot/lib/python3.11/site-packages/anndata/utils.py:429: FutureWarning: Importing read_excel from `anndata` is deprecated. Import anndata.io.read_excel instead.
    warnings.warn(msg, FutureWarning)

../../../mambaforge/envs/moscot/lib/python3.11/site-packages/anndata/utils.py:429
  /Users/selman.ozleyen/mambaforge/envs/moscot/lib/python3.11/site-packages/anndata/utils.py:429: FutureWarning: Importing read_hdf from `anndata` is deprecated. Import anndata.io.read_hdf instead.
    warnings.warn(msg, FutureWarning)

../../../mambaforge/envs/moscot/lib/python3.11/site-packages/anndata/utils.py:429
  /Users/selman.ozleyen/mambaforge/envs/moscot/lib/python3.11/site-packages/anndata/utils.py:429: FutureWarning: Importing read_loom from `anndata` is deprecated. Import anndata.io.read_loom instead.
    warnings.warn(msg, FutureWarning)

../../../mambaforge/envs/moscot/lib/python3.11/site-packages/anndata/utils.py:429
  /Users/selman.ozleyen/mambaforge/envs/moscot/lib/python3.11/site-packages/anndata/utils.py:429: FutureWarning: Importing read_mtx from `anndata` is deprecated. Import anndata.io.read_mtx instead.
    warnings.warn(msg, FutureWarning)

../../../mambaforge/envs/moscot/lib/python3.11/site-packages/anndata/utils.py:429
  /Users/selman.ozleyen/mambaforge/envs/moscot/lib/python3.11/site-packages/anndata/utils.py:429: FutureWarning: Importing read_text from `anndata` is deprecated. Import anndata.io.read_text instead.
    warnings.warn(msg, FutureWarning)

../../../mambaforge/envs/moscot/lib/python3.11/site-packages/anndata/utils.py:429
  /Users/selman.ozleyen/mambaforge/envs/moscot/lib/python3.11/site-packages/anndata/utils.py:429: FutureWarning: Importing read_umi_tools from `anndata` is deprecated. Import anndata.io.read_umi_tools instead.
    warnings.warn(msg, FutureWarning)

tests/data/test_datamanager.py: 187 warnings
  /Users/selman.ozleyen/mambaforge/envs/moscot/lib/python3.11/site-packages/anndata/_core/aligned_df.py:68: ImplicitModificationWarning: Transforming to str index.
    warnings.warn("Transforming to str index.", ImplicitModificationWarning)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED tests/data/test_datamanager.py::TestDataManager::test_get_train_data[sample_covariates0-perturbation_covariate_reps0-perturbation_covariates0-split_covariates0-X]
FAILED tests/data/test_datamanager.py::TestDataManager::test_get_train_data[sample_covariates0-perturbation_covariate_reps0-perturbation_covariates0-split_covariates0-X_pca]
FAILED tests/data/test_datamanager.py::TestDataManager::test_get_train_data[sample_covariates0-perturbation_covariate_reps0-perturbation_covariates0-split_covariates1-X]
FAILED tests/data/test_datamanager.py::TestDataManager::test_get_train_data[sample_covariates0-perturbation_covariate_reps0-perturbation_covariates0-split_covariates1-X_pca]
FAILED tests/data/test_datamanager.py::TestDataManager::test_get_train_data[sample_covariates0-perturbation_covariate_reps0-perturbation_covariates1-split_covariates0-X]
FAILED tests/data/test_datamanager.py::TestDataManager::test_get_train_data[sample_covariates0-perturbation_covariate_reps0-perturbation_covariates1-split_covariates0-X_pca]
FAILED tests/data/test_datamanager.py::TestDataManager::test_get_train_data[sample_covariates0-perturbation_covariate_reps0-perturbation_covariates1-split_covariates1-X]
FAILED tests/data/test_datamanager.py::TestDataManager::test_get_train_data[sample_covariates0-perturbation_covariate_reps0-perturbation_covariates1-split_covariates1-X_pca]
FAILED tests/data/test_datamanager.py::TestDataManager::test_get_train_data[sample_covariates0-perturbation_covariate_reps0-perturbation_covariates2-split_covariates0-X]
FAILED tests/data/test_datamanager.py::TestDataManager::test_get_train_data[sample_covariates0-perturbation_covariate_reps0-perturbation_covariates2-split_covariates0-X_pca]
FAILED tests/data/test_datamanager.py::TestDataManager::test_get_train_data[sample_covariates0-perturbation_covariate_reps0-perturbation_covariates2-split_covariates1-X]
FAILED tests/data/test_datamanager.py::TestDataManager::test_get_train_data[sample_covariates0-perturbation_covariate_reps0-perturbation_covariates2-split_covariates1-X_pca]
FAILED tests/data/test_datamanager.py::TestDataManager::test_get_train_data[sample_covariates0-perturbation_covariate_reps1-perturbation_covariates0-split_covariates0-X]
FAILED tests/data/test_datamanager.py::TestDataManager::test_get_train_data[sample_covariates0-perturbation_covariate_reps1-perturbation_covariates0-split_covariates0-X_pca]
FAILED tests/data/test_datamanager.py::TestDataManager::test_get_train_data[sample_covariates0-perturbation_covariate_reps1-perturbation_covariates0-split_covariates1-X]
FAILED tests/data/test_datamanager.py::TestDataManager::test_get_train_data[sample_covariates0-perturbation_covariate_reps1-perturbation_covariates0-split_covariates1-X_pca]
FAILED tests/data/test_datamanager.py::TestDataManager::test_get_train_data[sample_covariates0-perturbation_covariate_reps1-perturbation_covariates1-split_covariates0-X]
FAILED tests/data/test_datamanager.py::TestDataManager::test_get_train_data[sample_covariates0-perturbation_covariate_reps1-perturbation_covariates1-split_covariates0-X_pca]
FAILED tests/data/test_datamanager.py::TestDataManager::test_get_train_data[sample_covariates0-perturbation_covariate_reps1-perturbation_covariates1-split_covariates1-X]
FAILED tests/data/test_datamanager.py::TestDataManager::test_get_train_data[sample_covariates0-perturbation_covariate_reps1-perturbation_covariates1-split_covariates1-X_pca]
FAILED tests/data/test_datamanager.py::TestDataManager::test_get_train_data[sample_covariates0-perturbation_covariate_reps1-perturbation_covariates2-split_covariates0-X]
FAILED tests/data/test_datamanager.py::TestDataManager::test_get_train_data[sample_covariates0-perturbation_covariate_reps1-perturbation_covariates2-split_covariates0-X_pca]
FAILED tests/data/test_datamanager.py::TestDataManager::test_get_train_data[sample_covariates0-perturbation_covariate_reps1-perturbation_covariates2-split_covariates1-X]
FAILED tests/data/test_datamanager.py::TestDataManager::test_get_train_data[sample_covariates0-perturbation_covariate_reps1-perturbation_covariates2-split_covariates1-X_pca]
FAILED tests/data/test_datamanager.py::TestDataManager::test_get_train_data[sample_covariates1-perturbation_covariate_reps0-perturbation_covariates0-split_covariates0-X]
FAILED tests/data/test_datamanager.py::TestDataManager::test_get_train_data[sample_covariates1-perturbation_covariate_reps0-perturbation_covariates0-split_covariates0-X_pca]
FAILED tests/data/test_datamanager.py::TestDataManager::test_get_train_data[sample_covariates1-perturbation_covariate_reps0-perturbation_covariates0-split_covariates1-X]
FAILED tests/data/test_datamanager.py::TestDataManager::test_get_train_data[sample_covariates1-perturbation_covariate_reps0-perturbation_covariates0-split_covariates1-X_pca]
FAILED tests/data/test_datamanager.py::TestDataManager::test_get_train_data[sample_covariates1-perturbation_covariate_reps0-perturbation_covariates1-split_covariates0-X]
FAILED tests/data/test_datamanager.py::TestDataManager::test_get_train_data[sample_covariates1-perturbation_covariate_reps0-perturbation_covariates1-split_covariates0-X_pca]
FAILED tests/data/test_datamanager.py::TestDataManager::test_get_train_data[sample_covariates1-perturbation_covariate_reps0-perturbation_covariates1-split_covariates1-X]
FAILED tests/data/test_datamanager.py::TestDataManager::test_get_train_data[sample_covariates1-perturbation_covariate_reps0-perturbation_covariates1-split_covariates1-X_pca]
FAILED tests/data/test_datamanager.py::TestDataManager::test_get_train_data[sample_covariates1-perturbation_covariate_reps0-perturbation_covariates2-split_covariates0-X]
FAILED tests/data/test_datamanager.py::TestDataManager::test_get_train_data[sample_covariates1-perturbation_covariate_reps0-perturbation_covariates2-split_covariates0-X_pca]
FAILED tests/data/test_datamanager.py::TestDataManager::test_get_train_data[sample_covariates1-perturbation_covariate_reps0-perturbation_covariates2-split_covariates1-X]
FAILED tests/data/test_datamanager.py::TestDataManager::test_get_train_data[sample_covariates1-perturbation_covariate_reps0-perturbation_covariates2-split_covariates1-X_pca]
FAILED tests/data/test_datamanager.py::TestDataManager::test_get_train_data[sample_covariates1-perturbation_covariate_reps1-perturbation_covariates0-split_covariates0-X]
FAILED tests/data/test_datamanager.py::TestDataManager::test_get_train_data[sample_covariates1-perturbation_covariate_reps1-perturbation_covariates0-split_covariates0-X_pca]
FAILED tests/data/test_datamanager.py::TestDataManager::test_get_train_data[sample_covariates1-perturbation_covariate_reps1-perturbation_covariates0-split_covariates1-X]
FAILED tests/data/test_datamanager.py::TestDataManager::test_get_train_data[sample_covariates1-perturbation_covariate_reps1-perturbation_covariates0-split_covariates1-X_pca]
FAILED tests/data/test_datamanager.py::TestDataManager::test_get_train_data[sample_covariates1-perturbation_covariate_reps1-perturbation_covariates1-split_covariates0-X]
FAILED tests/data/test_datamanager.py::TestDataManager::test_get_train_data[sample_covariates1-perturbation_covariate_reps1-perturbation_covariates1-split_covariates0-X_pca]
FAILED tests/data/test_datamanager.py::TestDataManager::test_get_train_data[sample_covariates1-perturbation_covariate_reps1-perturbation_covariates1-split_covariates1-X]
FAILED tests/data/test_datamanager.py::TestDataManager::test_get_train_data[sample_covariates1-perturbation_covariate_reps1-perturbation_covariates1-split_covariates1-X_pca]
FAILED tests/data/test_datamanager.py::TestDataManager::test_get_train_data[sample_covariates1-perturbation_covariate_reps1-perturbation_covariates2-split_covariates0-X]
FAILED tests/data/test_datamanager.py::TestDataManager::test_get_train_data[sample_covariates1-perturbation_covariate_reps1-perturbation_covariates2-split_covariates0-X_pca]
FAILED tests/data/test_datamanager.py::TestDataManager::test_get_train_data[sample_covariates1-perturbation_covariate_reps1-perturbation_covariates2-split_covariates1-X]
FAILED tests/data/test_datamanager.py::TestDataManager::test_get_train_data[sample_covariates1-perturbation_covariate_reps1-perturbation_covariates2-split_covariates1-X_pca]
FAILED tests/data/test_datamanager.py::TestDataManager::test_get_train_data_with_combinations[perturbation_covariate_reps0-perturbation_covariates0-split_covariates0]
FAILED tests/data/test_datamanager.py::TestDataManager::test_get_train_data_with_combinations[perturbation_covariate_reps0-perturbation_covariates0-split_covariates1]
FAILED tests/data/test_datamanager.py::TestDataManager::test_get_train_data_with_combinations[perturbation_covariate_reps0-perturbation_covariates1-split_covariates0]
FAILED tests/data/test_datamanager.py::TestDataManager::test_get_train_data_with_combinations[perturbation_covariate_reps0-perturbation_covariates1-split_covariates1]
FAILED tests/data/test_datamanager.py::TestDataManager::test_get_train_data_with_combinations[perturbation_covariate_reps0-perturbation_covariates2-split_covariates0]
FAILED tests/data/test_datamanager.py::TestDataManager::test_get_train_data_with_combinations[perturbation_covariate_reps0-perturbation_covariates2-split_covariates1]
FAILED tests/data/test_datamanager.py::TestDataManager::test_get_train_data_with_combinations[perturbation_covariate_reps1-perturbation_covariates0-split_covariates0]
FAILED tests/data/test_datamanager.py::TestDataManager::test_get_train_data_with_combinations[perturbation_covariate_reps1-perturbation_covariates0-split_covariates1]
FAILED tests/data/test_datamanager.py::TestDataManager::test_get_train_data_with_combinations[perturbation_covariate_reps1-perturbation_covariates1-split_covariates0]
FAILED tests/data/test_datamanager.py::TestDataManager::test_get_train_data_with_combinations[perturbation_covariate_reps1-perturbation_covariates1-split_covariates1]
FAILED tests/data/test_datamanager.py::TestDataManager::test_get_train_data_with_combinations[perturbation_covariate_reps1-perturbation_covariates2-split_covariates0]
FAILED tests/data/test_datamanager.py::TestDataManager::test_get_train_data_with_combinations[perturbation_covariate_reps1-perturbation_covariates2-split_covariates1]
===== 60 failed, 127 passed, 1 skipped, 194 warnings in 138.33s (0:02:18) ======
