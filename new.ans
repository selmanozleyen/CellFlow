============================= test session starts ==============================
platform darwin -- Python 3.11.12, pytest-8.3.5, pluggy-1.6.0
rootdir: /Users/selman.ozleyen/Documents/projects/cell_flow_perturbation
configfile: pyproject.toml
plugins: jaxtyping-0.3.2, fast-array-utils-1.2.1, mock-3.14.0, cov-6.1.1, xdist-3.6.1
collected 145 items / 144 deselected / 1 selected

tests/model/test_cellflow.py {'control': array([[-0.65893483],
       [-1.57265917],
       [ 1.33503627],
       [ 0.94547702],
       [-0.65744942]]), 'drug_a': array([[ 0.23852293],
       [-0.84990265],
       [ 0.50306736],
       [ 0.71239879],
       [-0.60934351]]), 'drug_b': array([[ 0.35954602],
       [-0.14425727],
       [ 2.108683  ],
       [ 1.97409885],
       [-0.30761693]]), 'drug_c': array([[-1.76087384],
       [ 2.00766156],
       [ 1.26961761],
       [-1.67657295],
       [ 0.31095529]])}
[34mINFO    [0m  Function args: split_cov_combs: [1m[[0m[1m[[0m[1m][0m[1m][0m, adata: AnnData object with n_obs Ã— n_vars = [1;36m500[0m Ã— [1;36m50[0m                                                           
             obs: [32m'cell_type'[0m, [32m'dosage'[0m, [32m'drug1'[0m, [32m'drug2'[0m, [32m'drug3'[0m, [32m'dosage_a'[0m, [32m'dosage_b'[0m, [32m'dosage_c'[0m, [32m'drug_a'[0m, [32m'drug_b'[0m, [32m'drug_c'[0m, [32m'control'[0m                
             uns: [32m'drug'[0m, [32m'cell_type'[0m                                                                                                                          
             obsm: [32m'X_pca'[0m                                                                                                                                     
             layers: [32m'my_counts'[0m, covariate_data: [3;35mNone[0m, rep_dict: [3;35mNone[0m, condition_id_key: [3;35mNone[0m                                                                 
[34mINFO    [0m self._perturbation_covariates: [1;35mOrderedDict[0m[1m([0m[1m[[0m[1m([0m[32m'drug'[0m, [1m[[0m[32m'drug1'[0m, [32m'drug2'[0m[1m][0m[1m)[0m[1m][0m[1m)[0m                                                                            
[34mINFO    [0m self._sample_covariates: [1m[[0m[1m][0m                                                                                                                           
[34mINFO    [0m self._split_covariates: [1m[[0m[1m][0m                                                                                                                            
[                                        ] | 0% Completed | 124.50 us[########################################] | 100% Completed | 105.55 ms
[                                        ] | 0% Completed | 87.38 us[########################################] | 100% Completed | 106.38 ms
[                                        ] | 0% Completed | 95.67 us[########################################] | 100% Completed | 105.26 ms
[34mINFO    [0m new tgt_idx: [1;36m-1[0m, tgt_cond: [1m{[0m[32m'drug1'[0m: [32m'control'[0m, [32m'drug2'[0m: [32m'control'[0m[1m}[0m                                                                                   
[34mINFO    [0m new > drug embedding first few values: [1m[[0m[1;36m-0.65893483[0m [1;36m-1.57265917[0m  [1;36m1.33503627[0m[1m][0m, sum: [1;36m-1.2170602668000803[0m                                                
[34mINFO    [0m new tgt_idx: [1;36m0[0m, tgt_cond: [1m{[0m[32m'drug1'[0m: [32m'drug_a'[0m, [32m'drug2'[0m: [32m'drug_a'[0m[1m}[0m                                                                                      
[34mINFO    [0m new > drug embedding first few values: [1m[[0m [1;36m0.23852293[0m [1;36m-0.84990265[0m  [1;36m0.50306736[0m[1m][0m, sum: [1;36m-0.010514144222451227[0m                                              
[34mINFO    [0m new tgt_idx: [1;36m1[0m, tgt_cond: [1m{[0m[32m'drug1'[0m: [32m'drug_a'[0m, [32m'drug2'[0m: [32m'drug_b'[0m[1m}[0m                                                                                      
[34mINFO    [0m new > drug embedding first few values: [1m[[0m [1;36m0.23852293[0m [1;36m-0.84990265[0m  [1;36m0.50306736[0m[1m][0m, sum: [1;36m3.9851965872207096[0m                                                 
[34mINFO    [0m new tgt_idx: [1;36m2[0m, tgt_cond: [1m{[0m[32m'drug1'[0m: [32m'drug_a'[0m, [32m'drug2'[0m: [32m'drug_c'[0m[1m}[0m                                                                                      
[34mINFO    [0m new > drug embedding first few values: [1m[[0m [1;36m0.23852293[0m [1;36m-0.84990265[0m  [1;36m0.50306736[0m[1m][0m, sum: [1;36m0.14553059799829843[0m                                                
[34mINFO    [0m new tgt_idx: [1;36m3[0m, tgt_cond: [1m{[0m[32m'drug1'[0m: [32m'drug_b'[0m, [32m'drug2'[0m: [32m'drug_a'[0m[1m}[0m                                                                                      
[34mINFO    [0m new > drug embedding first few values: [1m[[0m [1;36m0.35954602[0m [1;36m-0.14425727[0m  [1;36m2.108683[0m  [1m][0m, sum: [1;36m3.985196587220709[0m                                                  
[34mINFO    [0m new tgt_idx: [1;36m4[0m, tgt_cond: [1m{[0m[32m'drug1'[0m: [32m'drug_b'[0m, [32m'drug2'[0m: [32m'drug_b'[0m[1m}[0m                                                                                      
[34mINFO    [0m new > drug embedding first few values: [1m[[0m [1;36m0.35954602[0m [1;36m-0.14425727[0m  [1;36m2.108683[0m  [1m][0m, sum: [1;36m7.980907318663869[0m                                                  
[34mINFO    [0m new tgt_idx: [1;36m5[0m, tgt_cond: [1m{[0m[32m'drug1'[0m: [32m'drug_b'[0m, [32m'drug2'[0m: [32m'drug_c'[0m[1m}[0m                                                                                      
[34mINFO    [0m new > drug embedding first few values: [1m[[0m [1;36m0.35954602[0m [1;36m-0.14425727[0m  [1;36m2.108683[0m  [1m][0m, sum: [1;36m4.141241329441459[0m                                                  
[34mINFO    [0m new tgt_idx: [1;36m6[0m, tgt_cond: [1m{[0m[32m'drug1'[0m: [32m'drug_c'[0m, [32m'drug2'[0m: [32m'drug_a'[0m[1m}[0m                                                                                      
[34mINFO    [0m new > drug embedding first few values: [1m[[0m[1;36m-1.76087384[0m  [1;36m2.00766156[0m  [1;36m1.26961761[0m[1m][0m, sum: [1;36m0.14553059799829815[0m                                                
[34mINFO    [0m new tgt_idx: [1;36m7[0m, tgt_cond: [1m{[0m[32m'drug1'[0m: [32m'drug_c'[0m, [32m'drug2'[0m: [32m'drug_b'[0m[1m}[0m                                                                                      
[34mINFO    [0m new > drug embedding first few values: [1m[[0m[1;36m-1.76087384[0m  [1;36m2.00766156[0m  [1;36m1.26961761[0m[1m][0m, sum: [1;36m4.141241329441459[0m                                                  
[34mINFO    [0m new tgt_idx: [1;36m8[0m, tgt_cond: [1m{[0m[32m'drug1'[0m: [32m'drug_c'[0m, [32m'drug2'[0m: [32m'drug_c'[0m[1m}[0m                                                                                      
[34mINFO    [0m new > drug embedding first few values: [1m[[0m[1;36m-1.76087384[0m  [1;36m2.00766156[0m  [1;36m1.26961761[0m[1m][0m, sum: [1;36m0.3015753402190476[0m                                                 
[34mINFO    [0m >new return: split_covariates_mask: [1m[[0m[1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m  [1;36m0[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m                                          
          [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m  [1;36m0[0m  [1;36m0[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m                                                                              
          [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m  [1;36m0[0m [1;36m-1[0m [1;36m-1[0m  [1;36m0[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m                                                                              
          [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m  [1;36m0[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m  [1;36m0[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m                                                                              
          [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m                                                                              
          [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m  [1;36m0[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m  [1;36m0[0m [1;36m-1[0m  [1;36m0[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m                                                                              
          [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m                                                                              
          [1;36m-1[0m [1;36m-1[0m  [1;36m0[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m  [1;36m0[0m  [1;36m0[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m  [1;36m0[0m [1;36m-1[0m [1;36m-1[0m                                                                              
           [1;36m0[0m [1;36m-1[0m [1;36m-1[0m  [1;36m0[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m  [1;36m0[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m  [1;36m0[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m                                                                              
          [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m  [1;36m0[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m  [1;36m0[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m  [1;36m0[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m  [1;36m0[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m                                                                              
          [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m  [1;36m0[0m [1;36m-1[0m [1;36m-1[0m  [1;36m0[0m [1;36m-1[0m  [1;36m0[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m                                                                              
          [1;36m-1[0m  [1;36m0[0m  [1;36m0[0m [1;36m-1[0m  [1;36m0[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m  [1;36m0[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m  [1;36m0[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m                                                                              
          [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m  [1;36m0[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m                                                                              
          [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m  [1;36m0[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m                                                                              
          [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m                                                                              
          [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m  [1;36m0[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m  [1;36m0[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m                                                                              
          [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m  [1;36m0[0m [1;36m-1[0m  [1;36m0[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m  [1;36m0[0m [1;36m-1[0m  [1;36m0[0m  [1;36m0[0m [1;36m-1[0m [1;36m-1[0m  [1;36m0[0m [1;36m-1[0m [1;36m-1[0m  [1;36m0[0m                                                                              
          [1;36m-1[0m  [1;36m0[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m  [1;36m0[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m                                                                              
           [1;36m0[0m [1;36m-1[0m  [1;36m0[0m [1;36m-1[0m [1;36m-1[0m  [1;36m0[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m  [1;36m0[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m                                                                              
          [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m  [1;36m0[0m [1;36m-1[0m  [1;36m0[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m                                                                              
          [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m  [1;36m0[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m [1;36m-1[0m[1m][0m, perturbation_covariates_mask: [1m[[0m [1;36m1[0m  [1;36m2[0m  [1;36m4[0m  [1;36m6[0m  [1;36m1[0m  [1;36m0[0m  [1;36m2[0m  [1;36m6[0m  [1;36m2[0m  [1;36m3[0m [1;36m-1[0m  [1;36m4[0m  [1;36m5[0m  [1;36m2[0m  [1;36m5[0m  [1;36m7[0m  [1;36m1[0m  [1;36m4[0m  [1;36m1[0m
         [1;36m2[0m  [1;36m4[0m  [1;36m8[0m  [1;36m0[0m  [1;36m1[0m                                                                                                                                         
           [1;36m4[0m  [1;36m3[0m  [1;36m0[0m [1;36m-1[0m [1;36m-1[0m  [1;36m2[0m  [1;36m2[0m  [1;36m1[0m  [1;36m8[0m  [1;36m0[0m  [1;36m0[0m  [1;36m7[0m  [1;36m7[0m  [1;36m3[0m  [1;36m8[0m  [1;36m6[0m  [1;36m1[0m  [1;36m1[0m  [1;36m3[0m  [1;36m1[0m  [1;36m0[0m  [1;36m8[0m  [1;36m5[0m  [1;36m0[0m                                                                              
           [1;36m3[0m  [1;36m4[0m  [1;36m1[0m  [1;36m4[0m  [1;36m0[0m  [1;36m1[0m  [1;36m6[0m  [1;36m6[0m  [1;36m2[0m  [1;36m4[0m  [1;36m4[0m  [1;36m4[0m  [1;36m5[0m  [1;36m5[0m  [1;36m1[0m [1;36m-1[0m  [1;36m1[0m  [1;36m4[0m [1;36m-1[0m  [1;36m2[0m  [1;36m1[0m  [1;36m2[0m  [1;36m5[0m  [1;36m6[0m                                                                              
           [1;36m4[0m  [1;36m5[0m  [1;36m3[0m  [1;36m7[0m  [1;36m1[0m [1;36m-1[0m  [1;36m5[0m  [1;36m0[0m  [1;36m7[0m  [1;36m2[0m  [1;36m1[0m  [1;36m5[0m  [1;36m0[0m  [1;36m4[0m  [1;36m1[0m  [1;36m8[0m  [1;36m7[0m [1;36m-1[0m  [1;36m8[0m  [1;36m2[0m  [1;36m1[0m  [1;36m7[0m  [1;36m5[0m  [1;36m0[0m                                                                              
           [1;36m3[0m  [1;36m6[0m  [1;36m4[0m  [1;36m1[0m  [1;36m6[0m  [1;36m4[0m  [1;36m0[0m  [1;36m4[0m  [1;36m7[0m  [1;36m8[0m  [1;36m7[0m  [1;36m7[0m  [1;36m4[0m  [1;36m7[0m  [1;36m0[0m  [1;36m8[0m  [1;36m7[0m  [1;36m3[0m  [1;36m7[0m  [1;36m1[0m  [1;36m7[0m  [1;36m4[0m  [1;36m0[0m  [1;36m2[0m                                                                              
           [1;36m6[0m  [1;36m2[0m  [1;36m2[0m [1;36m-1[0m  [1;36m6[0m  [1;36m1[0m  [1;36m4[0m  [1;36m4[0m  [1;36m1[0m [1;36m-1[0m  [1;36m4[0m [1;36m-1[0m  [1;36m6[0m  [1;36m5[0m  [1;36m0[0m  [1;36m7[0m  [1;36m4[0m  [1;36m7[0m  [1;36m2[0m  [1;36m4[0m  [1;36m2[0m  [1;36m4[0m  [1;36m7[0m  [1;36m7[0m                                                                              
           [1;36m4[0m  [1;36m2[0m  [1;36m3[0m  [1;36m7[0m  [1;36m2[0m  [1;36m8[0m  [1;36m2[0m  [1;36m1[0m  [1;36m0[0m  [1;36m7[0m  [1;36m3[0m  [1;36m2[0m  [1;36m6[0m  [1;36m8[0m  [1;36m3[0m  [1;36m2[0m  [1;36m4[0m  [1;36m3[0m  [1;36m5[0m  [1;36m4[0m  [1;36m2[0m  [1;36m5[0m  [1;36m5[0m  [1;36m8[0m                                                                              
           [1;36m2[0m  [1;36m0[0m [1;36m-1[0m  [1;36m5[0m  [1;36m0[0m  [1;36m1[0m [1;36m-1[0m [1;36m-1[0m  [1;36m4[0m  [1;36m7[0m  [1;36m8[0m  [1;36m3[0m  [1;36m7[0m  [1;36m5[0m  [1;36m5[0m  [1;36m6[0m  [1;36m1[0m  [1;36m5[0m  [1;36m3[0m  [1;36m2[0m  [1;36m7[0m [1;36m-1[0m  [1;36m6[0m  [1;36m6[0m                                                                              
          [1;36m-1[0m  [1;36m1[0m  [1;36m5[0m [1;36m-1[0m  [1;36m1[0m  [1;36m4[0m  [1;36m4[0m  [1;36m1[0m  [1;36m3[0m [1;36m-1[0m  [1;36m3[0m  [1;36m7[0m  [1;36m4[0m  [1;36m0[0m  [1;36m4[0m  [1;36m3[0m  [1;36m7[0m [1;36m-1[0m  [1;36m6[0m  [1;36m5[0m  [1;36m8[0m  [1;36m7[0m  [1;36m0[0m  [1;36m6[0m                                                                              
           [1;36m0[0m  [1;36m8[0m  [1;36m8[0m  [1;36m5[0m [1;36m-1[0m  [1;36m4[0m  [1;36m2[0m  [1;36m7[0m  [1;36m0[0m [1;36m-1[0m  [1;36m5[0m  [1;36m4[0m  [1;36m4[0m  [1;36m4[0m [1;36m-1[0m  [1;36m1[0m  [1;36m3[0m  [1;36m2[0m [1;36m-1[0m  [1;36m3[0m  [1;36m6[0m  [1;36m4[0m  [1;36m7[0m  [1;36m3[0m                                                                              
           [1;36m7[0m  [1;36m2[0m  [1;36m5[0m  [1;36m3[0m  [1;36m4[0m [1;36m-1[0m  [1;36m1[0m  [1;36m7[0m [1;36m-1[0m  [1;36m1[0m [1;36m-1[0m  [1;36m3[0m  [1;36m3[0m  [1;36m1[0m  [1;36m6[0m  [1;36m1[0m  [1;36m5[0m  [1;36m4[0m  [1;36m0[0m  [1;36m7[0m  [1;36m2[0m  [1;36m3[0m  [1;36m0[0m  [1;36m6[0m                                                                              
           [1;36m3[0m [1;36m-1[0m [1;36m-1[0m  [1;36m8[0m [1;36m-1[0m  [1;36m4[0m  [1;36m0[0m  [1;36m0[0m [1;36m-1[0m  [1;36m0[0m  [1;36m4[0m  [1;36m7[0m  [1;36m2[0m  [1;36m6[0m  [1;36m0[0m  [1;36m7[0m  [1;36m8[0m  [1;36m6[0m  [1;36m6[0m [1;36m-1[0m  [1;36m4[0m  [1;36m2[0m  [1;36m2[0m  [1;36m2[0m                                                                              
           [1;36m3[0m  [1;36m6[0m  [1;36m1[0m  [1;36m4[0m [1;36m-1[0m  [1;36m4[0m  [1;36m4[0m  [1;36m0[0m  [1;36m7[0m  [1;36m2[0m  [1;36m2[0m  [1;36m2[0m  [1;36m7[0m  [1;36m3[0m  [1;36m5[0m  [1;36m3[0m  [1;36m5[0m  [1;36m7[0m  [1;36m0[0m  [1;36m4[0m  [1;36m2[0m  [1;36m2[0m  [1;36m8[0m  [1;36m2[0m                                                                              
           [1;36m0[0m  [1;36m1[0m  [1;36m6[0m  [1;36m8[0m  [1;36m8[0m [1;36m-1[0m  [1;36m3[0m  [1;36m6[0m  [1;36m0[0m  [1;36m0[0m  [1;36m8[0m  [1;36m3[0m  [1;36m2[0m  [1;36m6[0m  [1;36m4[0m  [1;36m2[0m  [1;36m2[0m  [1;36m0[0m  [1;36m6[0m  [1;36m1[0m  [1;36m1[0m  [1;36m5[0m  [1;36m8[0m  [1;36m6[0m                                                                              
           [1;36m1[0m  [1;36m7[0m  [1;36m4[0m  [1;36m3[0m  [1;36m8[0m  [1;36m0[0m  [1;36m1[0m  [1;36m5[0m  [1;36m5[0m  [1;36m4[0m  [1;36m0[0m  [1;36m0[0m  [1;36m7[0m  [1;36m4[0m  [1;36m0[0m  [1;36m4[0m  [1;36m1[0m  [1;36m2[0m  [1;36m1[0m  [1;36m2[0m  [1;36m0[0m  [1;36m1[0m  [1;36m1[0m  [1;36m8[0m                                                                              
           [1;36m3[0m  [1;36m5[0m  [1;36m0[0m  [1;36m1[0m  [1;36m1[0m  [1;36m1[0m  [1;36m4[0m  [1;36m2[0m [1;36m-1[0m  [1;36m5[0m  [1;36m7[0m  [1;36m2[0m  [1;36m4[0m  [1;36m1[0m  [1;36m5[0m [1;36m-1[0m  [1;36m5[0m  [1;36m6[0m  [1;36m2[0m  [1;36m7[0m  [1;36m7[0m  [1;36m7[0m  [1;36m0[0m  [1;36m4[0m                                                                              
           [1;36m3[0m  [1;36m0[0m  [1;36m3[0m  [1;36m1[0m  [1;36m3[0m [1;36m-1[0m  [1;36m1[0m [1;36m-1[0m  [1;36m4[0m  [1;36m8[0m  [1;36m7[0m  [1;36m8[0m  [1;36m0[0m  [1;36m5[0m [1;36m-1[0m  [1;36m1[0m [1;36m-1[0m [1;36m-1[0m  [1;36m2[0m  [1;36m3[0m [1;36m-1[0m  [1;36m6[0m  [1;36m3[0m [1;36m-1[0m                                                                              
           [1;36m3[0m [1;36m-1[0m  [1;36m7[0m  [1;36m0[0m  [1;36m6[0m  [1;36m3[0m  [1;36m0[0m  [1;36m1[0m  [1;36m7[0m  [1;36m2[0m  [1;36m7[0m  [1;36m0[0m  [1;36m7[0m  [1;36m6[0m [1;36m-1[0m  [1;36m4[0m  [1;36m3[0m  [1;36m6[0m  [1;36m2[0m  [1;36m2[0m  [1;36m0[0m  [1;36m2[0m  [1;36m4[0m  [1;36m6[0m                                                                              
          [1;36m-1[0m  [1;36m2[0m [1;36m-1[0m  [1;36m2[0m  [1;36m0[0m [1;36m-1[0m  [1;36m0[0m  [1;36m5[0m  [1;36m7[0m  [1;36m5[0m  [1;36m5[0m  [1;36m2[0m  [1;36m0[0m [1;36m-1[0m  [1;36m6[0m  [1;36m7[0m  [1;36m0[0m  [1;36m2[0m  [1;36m2[0m  [1;36m2[0m  [1;36m1[0m  [1;36m6[0m  [1;36m0[0m  [1;36m4[0m                                                                              
           [1;36m7[0m  [1;36m6[0m  [1;36m1[0m  [1;36m3[0m  [1;36m2[0m  [1;36m4[0m  [1;36m7[0m [1;36m-1[0m  [1;36m7[0m [1;36m-1[0m  [1;36m4[0m  [1;36m3[0m  [1;36m2[0m  [1;36m4[0m  [1;36m5[0m  [1;36m2[0m  [1;36m7[0m  [1;36m2[0m  [1;36m8[0m  [1;36m6[0m  [1;36m1[0m  [1;36m5[0m  [1;36m2[0m  [1;36m0[0m                                                                              
           [1;36m6[0m  [1;36m6[0m  [1;36m8[0m [1;36m-1[0m  [1;36m7[0m  [1;36m3[0m  [1;36m8[0m  [1;36m7[0m  [1;36m7[0m  [1;36m4[0m  [1;36m7[0m  [1;36m8[0m  [1;36m6[0m  [1;36m6[0m  [1;36m5[0m  [1;36m6[0m  [1;36m7[0m  [1;36m8[0m  [1;36m2[0m  [1;36m8[0m[1m][0m                                                                                         
[34mINFO    [0m >new return: split_idx_to_covariates: [1m{[0m[1;36m0[0m: [1m([0m[1m)[0m[1m}[0m, perturbation_idx_to_covariates: [1m{[0m[1;36m-1[0m: [1m[[0m[32m'control'[0m, [32m'control'[0m[1m][0m, [1;36m0[0m: [1m[[0m[32m'drug_a'[0m, [32m'drug_a'[0m[1m][0m, [1;36m1[0m: [1m[[0m[32m'drug_a'[0m,    
         [32m'drug_b'[0m[1m][0m, [1;36m2[0m: [1m[[0m[32m'drug_a'[0m, [32m'drug_c'[0m[1m][0m, [1;36m3[0m: [1m[[0m[32m'drug_b'[0m, [32m'drug_a'[0m[1m][0m, [1;36m4[0m: [1m[[0m[32m'drug_b'[0m, [32m'drug_b'[0m[1m][0m, [1;36m5[0m: [1m[[0m[32m'drug_b'[0m, [32m'drug_c'[0m[1m][0m, [1;36m6[0m: [1m[[0m[32m'drug_c'[0m, [32m'drug_a'[0m[1m][0m, [1;36m7[0m: [1m[[0m[32m'drug_c'[0m, 
         [32m'drug_b'[0m[1m][0m, [1;36m8[0m: [1m[[0m[32m'drug_c'[0m, [32m'drug_c'[0m[1m][0m[1m}[0m                                                                                                                   
[34mINFO    [0m >new return: perturbation_idx_to_id: [1m{[0m[1m}[0m, condition_data: [1m{[0m[32m'drug'[0m: [1;35marray[0m[1m([0m[1m[[0m[1m[[0m[1m[[0m[1;36m-0.65893483[0m, [1;36m-1.57265917[0m,  [1;36m1.33503627[0m,  [1;36m0.94547702[0m,                        
                  [1;36m-0.65744942[0m[1m][0m,                                                                                                                                
                 [1m[[0m[1;36m-0.65893483[0m, [1;36m-1.57265917[0m,  [1;36m1.33503627[0m,  [1;36m0.94547702[0m,                                                                                          
                  [1;36m-0.65744942[0m[1m][0m[1m][0m,                                                                                                                               
                                                                                                                                                               
                [1m[[0m[1m[[0m [1;36m0.23852293[0m, [1;36m-0.84990265[0m,  [1;36m0.50306736[0m,  [1;36m0.71239879[0m,                                                                                          
                  [1;36m-0.60934351[0m[1m][0m,                                                                                                                                
                 [1m[[0m [1;36m0.23852293[0m, [1;36m-0.84990265[0m,  [1;36m0.50306736[0m,  [1;36m0.71239879[0m,                                                                                          
                  [1;36m-0.60934351[0m[1m][0m[1m][0m,                                                                                                                               
                                                                                                                                                               
                [1m[[0m[1m[[0m [1;36m0.23852293[0m, [1;36m-0.84990265[0m,  [1;36m0.50306736[0m,  [1;36m0.71239879[0m,                                                                                          
                  [1;36m-0.60934351[0m[1m][0m,                                                                                                                                
                 [1m[[0m [1;36m0.35954602[0m, [1;36m-0.14425727[0m,  [1;36m2.108683[0m  ,  [1;36m1.97409885[0m,                                                                                          
                  [1;36m-0.30761693[0m[1m][0m[1m][0m,                                                                                                                               
                                                                                                                                                               
                [1m[[0m[1m[[0m [1;36m0.23852293[0m, [1;36m-0.84990265[0m,  [1;36m0.50306736[0m,  [1;36m0.71239879[0m,                                                                                          
                  [1;36m-0.60934351[0m[1m][0m,                                                                                                                                
                 [1m[[0m[1;36m-1.76087384[0m,  [1;36m2.00766156[0m,  [1;36m1.26961761[0m, [1;36m-1.67657295[0m,                                                                                          
                   [1;36m0.31095529[0m[1m][0m[1m][0m,                                                                                                                               
                                                                                                                                                               
                [1m[[0m[1m[[0m [1;36m0.35954602[0m, [1;36m-0.14425727[0m,  [1;36m2.108683[0m  ,  [1;36m1.97409885[0m,                                                                                          
                  [1;36m-0.30761693[0m[1m][0m,                                                                                                                                
                 [1m[[0m [1;36m0.23852293[0m, [1;36m-0.84990265[0m,  [1;36m0.50306736[0m,  [1;36m0.71239879[0m,                                                                                          
                  [1;36m-0.60934351[0m[1m][0m[1m][0m,                                                                                                                               
                                                                                                                                                               
                [1m[[0m[1m[[0m [1;36m0.35954602[0m, [1;36m-0.14425727[0m,  [1;36m2.108683[0m  ,  [1;36m1.97409885[0m,                                                                                          
                  [1;36m-0.30761693[0m[1m][0m,                                                                                                                                
                 [1m[[0m [1;36m0.35954602[0m, [1;36m-0.14425727[0m,  [1;36m2.108683[0m  ,  [1;36m1.97409885[0m,                                                                                          
                  [1;36m-0.30761693[0m[1m][0m[1m][0m,                                                                                                                               
                                                                                                                                                               
                [1m[[0m[1m[[0m [1;36m0.35954602[0m, [1;36m-0.14425727[0m,  [1;36m2.108683[0m  ,  [1;36m1.97409885[0m,                                                                                          
                  [1;36m-0.30761693[0m[1m][0m,                                                                                                                                
                 [1m[[0m[1;36m-1.76087384[0m,  [1;36m2.00766156[0m,  [1;36m1.26961761[0m, [1;36m-1.67657295[0m,                                                                                          
                   [1;36m0.31095529[0m[1m][0m[1m][0m,                                                                                                                               
                                                                                                                                                               
                [1m[[0m[1m[[0m[1;36m-1.76087384[0m,  [1;36m2.00766156[0m,  [1;36m1.26961761[0m, [1;36m-1.67657295[0m,                                                                                          
                   [1;36m0.31095529[0m[1m][0m,                                                                                                                                
                 [1m[[0m [1;36m0.23852293[0m, [1;36m-0.84990265[0m,  [1;36m0.50306736[0m,  [1;36m0.71239879[0m,                                                                                          
                  [1;36m-0.60934351[0m[1m][0m[1m][0m,                                                                                                                               
                                                                                                                                                               
                [1m[[0m[1m[[0m[1;36m-1.76087384[0m,  [1;36m2.00766156[0m,  [1;36m1.26961761[0m, [1;36m-1.67657295[0m,                                                                                          
                   [1;36m0.31095529[0m[1m][0m,                                                                                                                                
                 [1m[[0m [1;36m0.35954602[0m, [1;36m-0.14425727[0m,  [1;36m2.108683[0m  ,  [1;36m1.97409885[0m,                                                                                          
                  [1;36m-0.30761693[0m[1m][0m[1m][0m,                                                                                                                               
                                                                                                                                                               
                [1m[[0m[1m[[0m[1;36m-1.76087384[0m,  [1;36m2.00766156[0m,  [1;36m1.26961761[0m, [1;36m-1.67657295[0m,                                                                                          
                   [1;36m0.31095529[0m[1m][0m,                                                                                                                                
                 [1m[[0m[1;36m-1.76087384[0m,  [1;36m2.00766156[0m,  [1;36m1.26961761[0m, [1;36m-1.67657295[0m,                                                                                          
                   [1;36m0.31095529[0m[1m][0m[1m][0m[1m][0m[1m)[0m[1m}[0m                                                                                                                             
[34mINFO    [0m >new return: control_to_perturbation: [1m{[0m[1;36m0[0m: [1;35marray[0m[1m([0m[1m[[0m[1;36m0[0m, [1;36m1[0m, [1;36m2[0m, [1;36m3[0m, [1;36m4[0m, [1;36m5[0m, [1;36m6[0m, [1;36m7[0m, [1;36m8[0m[1m][0m, [33mdtype[0m=[35mint32[0m[1m)[0m[1m}[0m                                                            
[34mINFO    [0m  Function args: split_cov_combs: [1m[[0m[1m[[0m[1m][0m[1m][0m, adata: [3;35mNone[0m, covariate_data:        cell_type  dosage   drug1   drug2  [33m...[0m drug_a drug_b drug_c control        
         [1;36m0[0m    cell_line_b   [1;36m100.0[0m  drug_a  drug_b  [33m...[0m   [3;92mTrue[0m   [3;92mTrue[0m  [3;91mFalse[0m    [3;92mTrue[0m                                                                            
         [1;36m1[0m    cell_line_b   [1;36m100.0[0m  drug_a  drug_c  [33m...[0m   [3;92mTrue[0m   [3;92mTrue[0m   [3;92mTrue[0m    [3;92mTrue[0m                                                                            
         [1;36m2[0m    cell_line_a   [1;36m100.0[0m  drug_b  drug_b  [33m...[0m  [3;91mFalse[0m   [3;92mTrue[0m  [3;91mFalse[0m    [3;92mTrue[0m                                                                            
         [1;36m3[0m    cell_line_b    [1;36m10.0[0m  drug_c  drug_a  [33m...[0m   [3;92mTrue[0m  [3;91mFalse[0m   [3;92mTrue[0m    [3;92mTrue[0m                                                                            
         [1;36m4[0m    cell_line_b  [1;36m1000.0[0m  drug_a  drug_b  [33m...[0m   [3;92mTrue[0m   [3;92mTrue[0m   [3;92mTrue[0m    [3;92mTrue[0m                                                                            
         ..           [33m...[0m     [33m...[0m     [33m...[0m     [33m...[0m  [33m...[0m    [33m...[0m    [33m...[0m    [33m...[0m     [33m...[0m                                                                            
         [1;36m495[0m  cell_line_a  [1;36m1000.0[0m  drug_c  drug_a  [33m...[0m   [3;92mTrue[0m  [3;91mFalse[0m   [3;92mTrue[0m    [3;92mTrue[0m                                                                            
         [1;36m496[0m  cell_line_c   [1;36m100.0[0m  drug_c  drug_b  [33m...[0m  [3;91mFalse[0m   [3;92mTrue[0m   [3;92mTrue[0m    [3;92mTrue[0m                                                                            
         [1;36m497[0m  cell_line_c  [1;36m1000.0[0m  drug_c  drug_c  [33m...[0m  [3;91mFalse[0m   [3;92mTrue[0m   [3;92mTrue[0m    [3;92mTrue[0m                                                                            
         [1;36m498[0m  cell_line_b  [1;36m1000.0[0m  drug_a  drug_c  [33m...[0m   [3;92mTrue[0m   [3;92mTrue[0m   [3;92mTrue[0m    [3;92mTrue[0m                                                                            
         [1;36m499[0m  cell_line_b    [1;36m10.0[0m  drug_c  drug_c  [33m...[0m  [3;91mFalse[0m  [3;91mFalse[0m   [3;92mTrue[0m    [3;92mTrue[0m                                                                            
                                                                                                                                                               
         [1m[[0m[1;36m500[0m rows x [1;36m12[0m columns[1m][0m, rep_dict: [1;35mOrderedDict[0m[1m([0m[1m[[0m[1m([0m[32m'drug'[0m, [1m{[0m[32m'control'[0m: [1;35marray[0m[1m([0m[1m[[0m[1m[[0m[1;36m-0.65893483[0m[1m][0m,                                                            
                [1m[[0m[1;36m-1.57265917[0m[1m][0m,                                                                                                                                 
                [1m[[0m [1;36m1.33503627[0m[1m][0m,                                                                                                                                 
                [1m[[0m [1;36m0.94547702[0m[1m][0m,                                                                                                                                 
                [1m[[0m[1;36m-0.65744942[0m[1m][0m[1m][0m[1m)[0m, [32m'drug_a'[0m: [1;35marray[0m[1m([0m[1m[[0m[1m[[0m [1;36m0.23852293[0m[1m][0m,                                                                                               
                [1m[[0m[1;36m-0.84990265[0m[1m][0m,                                                                                                                                 
                [1m[[0m [1;36m0.50306736[0m[1m][0m,                                                                                                                                 
                [1m[[0m [1;36m0.71239879[0m[1m][0m,                                                                                                                                 
                [1m[[0m[1;36m-0.60934351[0m[1m][0m[1m][0m[1m)[0m, [32m'drug_b'[0m: [1;35marray[0m[1m([0m[1m[[0m[1m[[0m [1;36m0.35954602[0m[1m][0m,                                                                                               
                [1m[[0m[1;36m-0.14425727[0m[1m][0m,                                                                                                                                 
                [1m[[0m [1;36m2.108683[0m  [1m][0m,                                                                                                                                 
                [1m[[0m [1;36m1.97409885[0m[1m][0m,                                                                                                                                 
                [1m[[0m[1;36m-0.30761693[0m[1m][0m[1m][0m[1m)[0m, [32m'drug_c'[0m: [1;35marray[0m[1m([0m[1m[[0m[1m[[0m[1;36m-1.76087384[0m[1m][0m,                                                                                               
                [1m[[0m [1;36m2.00766156[0m[1m][0m,                                                                                                                                 
                [1m[[0m [1;36m1.26961761[0m[1m][0m,                                                                                                                                 
                [1m[[0m[1;36m-1.67657295[0m[1m][0m,                                                                                                                                 
                [1m[[0m [1;36m0.31095529[0m[1m][0m[1m][0m[1m)[0m[1m}[0m[1m)[0m, [1m([0m[32m'cell_type'[0m, [1m{[0m[32m'cell_line_a'[0m: [1;35marray[0m[1m([0m[1m[[0m[1m[[0m [1;36m1.25241977[0m[1m][0m,                                                                         
                [1m[[0m[1;36m-0.02019821[0m[1m][0m,                                                                                                                                 
                [1m[[0m[1;36m-0.16213667[0m[1m][0m[1m][0m[1m)[0m, [32m'cell_line_b'[0m: [1;35marray[0m[1m([0m[1m[[0m[1m[[0m[1;36m-1.0572297[0m [1m][0m,                                                                                          
                [1m[[0m [1;36m0.49914418[0m[1m][0m,                                                                                                                                 
                [1m[[0m [1;36m0.43826809[0m[1m][0m[1m][0m[1m)[0m, [32m'cell_line_c'[0m: [1;35marray[0m[1m([0m[1m[[0m[1m[[0m[1;36m-1.45408073[0m[1m][0m,                                                                                          
                [1m[[0m[1;36m-1.2972927[0m [1m][0m,                                                                                                                                 
                [1m[[0m[1;36m-0.31543993[0m[1m][0m[1m][0m[1m)[0m[1m}[0m[1m)[0m[1m][0m[1m)[0m, condition_id_key: [3;35mNone[0m                                                                                                    
[34mINFO    [0m self._perturbation_covariates: [1;35mOrderedDict[0m[1m([0m[1m[[0m[1m([0m[32m'drug'[0m, [1m[[0m[32m'drug1'[0m, [32m'drug2'[0m[1m][0m[1m)[0m[1m][0m[1m)[0m                                                                            
[34mINFO    [0m self._sample_covariates: [1m[[0m[1m][0m                                                                                                                           
[34mINFO    [0m self._split_covariates: [1m[[0m[1m][0m                                                                                                                            
[                                        ] | 0% Completed | 87.83 us[########################################] | 100% Completed | 105.50 ms
[                                        ] | 0% Completed | 81.63 us[########################################] | 100% Completed | 105.53 ms
F

=================================== FAILURES ===================================
___ TestCellFlow.test_cellflow_solver[concatenation-0.0-deterministic-otfm] ____

self = <tests.model.test_cellflow.TestCellFlow object at 0x1793a93d0>
adata_perturbation = AnnData object with n_obs Ã— n_vars = 500 Ã— 50
    obs: 'cell_type', 'dosage', 'drug1', 'drug2', 'drug3', 'dosage_a', '...sage_c', 'drug_a', 'drug_b', 'drug_c', 'control'
    uns: 'drug', 'cell_type'
    obsm: 'X_pca'
    layers: 'my_counts'
solver = 'otfm', condition_mode = 'deterministic', regularization = 0.0
conditioning = 'concatenation'

    @pytest.mark.parametrize("solver", ["otfm"])  # , "genot"])
    @pytest.mark.parametrize("condition_mode", ["deterministic", "stochastic"])
    @pytest.mark.parametrize("regularization", [0.0, 0.1])
    @pytest.mark.parametrize("conditioning", ["concatenation", "film", "resnet"])
    def test_cellflow_solver(
        self,
        adata_perturbation,
        solver,
        condition_mode,
        regularization,
        conditioning,
    ):
        if solver == "genot" and ((condition_mode == "stochastic") or (regularization > 0.0)):
            return None
        sample_rep = "X"
        control_key = "control"
        perturbation_covariates = {"drug": ["drug1", "drug2"]}
        perturbation_covariate_reps = {"drug": "drug"}
        condition_embedding_dim = 32
        vf_kwargs = {"genot_source_dims": (32, 32), "genot_source_dropout": 0.1} if solver == "genot" else None
    
        cf = cellflow.model.CellFlow(adata_perturbation, solver=solver)
        cf.prepare_data(
            sample_rep=sample_rep,
            control_key=control_key,
            perturbation_covariates=perturbation_covariates,
            perturbation_covariate_reps=perturbation_covariate_reps,
        )
        assert cf.train_data is not None
        assert hasattr(cf, "_data_dim")
    
        if regularization == 0.0 and condition_mode == "stochastic":
            with pytest.raises(
                ValueError,
                match=r".*Stochastic condition embeddings require `regularization`>0*",
            ):
                cf.prepare_model(
                    condition_mode=condition_mode,
                    regularization=regularization,
                    condition_embedding_dim=condition_embedding_dim,
                    hidden_dims=(32, 32),
                    decoder_dims=(32, 32),
                    vf_kwargs=vf_kwargs,
                    conditioning=conditioning,
                )
            return None
        cf.prepare_model(
            condition_mode=condition_mode,
            regularization=regularization,
            condition_embedding_dim=condition_embedding_dim,
            hidden_dims=(32, 32),
            decoder_dims=(32, 32),
            vf_kwargs=vf_kwargs,
            conditioning=conditioning,
        )
        assert cf._trainer is not None
    
        cf.train(num_iterations=3)
        assert cf._dataloader is not None
    
        # we assume these are all source cells now in adata_perturbation
        adata_perturbation_pred = adata_perturbation.copy()
        adata_perturbation_pred.obs["control"] = True
>       pred = cf.predict(
            adata_perturbation_pred,
            sample_rep=sample_rep,
            covariate_data=adata_perturbation_pred.obs,
            max_steps=3,
            throw=False,
        )

tests/model/test_cellflow.py:82: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/cellflow/model/_cellflow.py:619: in predict
    pred_data = self._dm.get_prediction_data(
src/cellflow/data/_datamanager.py:249: in get_prediction_data
    cond_data = self._get_condition_data(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <cellflow.data._datamanager.DataManager object at 0x1799ca110>
split_cov_combs = [[]], adata = None
covariate_data =        cell_type  dosage   drug1   drug2  ... drug_b drug_c control cell_index
0    cell_line_b   100.0  drug_a  drug_...True        498
499  cell_line_b    10.0  drug_c  drug_c  ...  False   True    True        499

[500 rows x 13 columns]
rep_dict = OrderedDict([('drug', {'control': array([[-0.65893483],
       [-1.57265917],
       [ 1.33503627],
       [ 0.9454770...9914418],
       [ 0.43826809]]), 'cell_line_c': array([[-1.45408073],
       [-1.2972927 ],
       [-0.31543993]])})])
condition_id_key = None

    def _get_condition_data(
        self,
        split_cov_combs: np.ndarray | list[list[Any]],
        adata: anndata.AnnData | None,
        covariate_data: pd.DataFrame | None = None,
        rep_dict: dict[str, Any] | None = None,
        condition_id_key: str | None = None,
    ) -> ReturnData:
        log(
            f" Function args: split_cov_combs: {split_cov_combs}, adata: {adata}, covariate_data: {covariate_data}, rep_dict: {rep_dict}, condition_id_key: {condition_id_key}"
        )
        log(f"self._perturbation_covariates: {self._perturbation_covariates}")
        log(f"self._sample_covariates: {self._sample_covariates}")
        log(f"self._split_covariates: {self._split_covariates}")
        # for training/validation: adata is provided and used to get cell masks, covariate_data is None
        if adata is None and covariate_data is None:
            raise ValueError("Either `adata` or `covariate_data` must be provided.")
        covariate_data = covariate_data if covariate_data is not None else adata.obs  # type: ignore[union-attr]
    
        # if (
        #     len(self._split_covariates) == 0
        #     or len(self._perturbation_covariates) == 0
        #     or len(self._sample_covariates) == 0
        #     or not self.is_conditional
        #     or adata is None
        # ):
        #     return self._get_condition_data_old(
        #         split_cov_combs=split_cov_combs,
        #         adata=adata,
        #         covariate_data=covariate_data,
        #         rep_dict=rep_dict,
        #         condition_id_key=condition_id_key,
        #     )
    
        if rep_dict is None:
            rep_dict = adata.uns if adata is not None else {}
        # check if all perturbation/split covariates and control cells are present in the input
        self._verify_covariate_data(
            covariate_data,
            OrderedDict({covar: sorted(_to_list(covar)) for covar in self._sample_covariates}),
        )
        self._verify_control_data(adata)
        self._verify_covariate_data(covariate_data, sorted(_to_list(self._split_covariates)))
    
        # extract unique combinations of perturbation covariates
        if condition_id_key is not None:
            self._verify_condition_id_key(covariate_data, condition_id_key)
            select_keys = self._perturb_covar_keys + [condition_id_key]
        else:
            select_keys = self._perturb_covar_keys
        perturb_covar_df = covariate_data[select_keys].drop_duplicates()
        if condition_id_key is not None:
            perturb_covar_df = perturb_covar_df.set_index(condition_id_key)
        else:
            perturb_covar_df = perturb_covar_df.reset_index()
    
        masks_empty = adata is None
        return_mask_none = adata is None and (len(self._split_covariates) == 0 and len(self._sample_covariates) == 0)
    
        control_to_perturbation: dict[int, ArrayLike] = {}
        split_idx_to_covariates: dict[int, tuple[Any]] = {}
        perturbation_idx_to_covariates: dict[int, tuple[Any]] = {}
        perturbation_idx_to_id: dict[int, Any] = {}
        split_covariates_mask = None
        perturbation_covariates_mask = None
        condition_data: dict[str, list[np.ndarray]] = (
            {i: [] for i in self._covar_to_idx.keys()} if self.is_conditional else {}
        )
        perturb_covariates = OrderedDict({k: sorted(_to_list(v)) for k, v in self._perturbation_covariates.items()})
        npartitions = 2  # TODO: make this dynamic
        # delete later
        covariate_data = covariate_data.copy()
        covariate_data["cell_index"] = covariate_data.index
        covariate_data = covariate_data.reset_index(drop=True)
    
        def _process_condition(tgt_idx, tgt_cond):
            embedding = DataManager._get_perturbation_covariates_static(
                condition_data=tgt_cond,
                rep_dict=rep_dict,
                perturb_covariates=perturb_covariates,
                covariate_reps=self._covariate_reps,
                is_categorical=self.is_categorical,
                primary_one_hot_encoder=self._primary_one_hot_encoder,
                null_value=self._null_value,
                max_combination_length=self._max_combination_length,
                linked_perturb_covars=self._linked_perturb_covars,
                sample_covariates=self._sample_covariates,
            )
            return tgt_idx, tgt_cond, embedding
    
        comb_keys = self._split_covariates
        if len(self._split_covariates) == 0:
            comb_keys = self._sample_covariates
        # self._sample_covariates if len(self._sample_covariates) > 0 else self._split_covariates
    
    
        perturbation_covariates_keys = self.perturb_covar_keys
        perturbation_covariates_keys = [key for key in perturbation_covariates_keys if key not in comb_keys]
        control_key = self._control_key
    
        df = covariate_data[comb_keys + perturbation_covariates_keys + [control_key]].copy()
        cell_idx_key = "cell_index"
        df[cell_idx_key] = df.index
        df = df.set_index(cell_idx_key, drop=False)
        for col in comb_keys + perturbation_covariates_keys:
            if df[col].dtype != "category":
                df[col] = df[col].astype("category")
        ddf = dd.from_pandas(df, npartitions=npartitions)
        ddf = ddf.sort_values(by=[*comb_keys, *perturbation_covariates_keys, control_key])
        ddf = ddf.reset_index(drop=True)
    
        all_combs = ddf[comb_keys + perturbation_covariates_keys + [control_key]].drop_duplicates(
            keep="first", subset=comb_keys + perturbation_covariates_keys + [control_key]
        )
        control_combs = all_combs[comb_keys + [control_key]].drop_duplicates(
            keep="first", subset=comb_keys + [control_key]
        )
        with ProgressBar():
            control_combs, all_combs, df = dask.compute(control_combs, all_combs, ddf)
    
        all_combs_keys = comb_keys + perturbation_covariates_keys
        if len(self.split_covariates) > 0 and len(self.sample_covariates) == 0:
            all_combs_keys = comb_keys + perturbation_covariates_keys
        elif len(self.sample_covariates) > 0 and len(self.split_covariates) == 0:
            all_combs_keys = self.perturb_covar_keys
    
        control_combs = control_combs[control_combs[control_key]].sort_values(by=comb_keys)
        control_combs["global_control_mask"] = np.arange(len(control_combs), dtype=np.int64)
        control_combs = control_combs.sort_values(by=comb_keys)
        control_combs = control_combs.drop(columns=[control_key])
    
        all_combs = all_combs[~all_combs[control_key]].sort_values(by=all_combs_keys)
        all_combs["global_pert_mask"] = np.arange(len(all_combs), dtype=np.int64)
        all_combs = all_combs.sort_values(by=all_combs_keys)
        all_combs = all_combs.drop(columns=[control_key])
    
        if len(self._split_covariates) > 0:
            df = df.merge(control_combs, on=comb_keys, how="left")
        else:
            df["global_control_mask"] = 0
    
        # Then merge with all_combs
        df = df.merge(
            all_combs,
            on=comb_keys + perturbation_covariates_keys,
            how="left",
        )
    
        df = df.sort_values(by=all_combs_keys)
    
        df["perturbation_covariates_mask"] = df["global_pert_mask"]
        df.loc[df[control_key], "perturbation_covariates_mask"] = -1
        df["perturbation_covariates_mask"] = df["perturbation_covariates_mask"].astype(np.int64)
    
        df["split_covariates_mask"] = df["global_control_mask"]
        df.loc[~df[control_key], "split_covariates_mask"] = -1
        df["split_covariates_mask"] = df["split_covariates_mask"].astype(np.int64)
        if not return_mask_none:
            split_idx_to_covariates = (
                df[["global_control_mask", *self._split_covariates]]
                .groupby(["global_control_mask"])
                .first()
                .to_dict(orient="index")
            )
            split_idx_to_covariates = {
                k: tuple(v[s] for s in self._split_covariates) for k, v in split_idx_to_covariates.items()
            }
    
        perturbation_idx_to_covariates = (
            df[["perturbation_covariates_mask", *all_combs_keys]].groupby(["perturbation_covariates_mask"]).first().to_dict(orient="index")
        )
        perturbation_idx_to_covariates = {
            int(k): [v[s] for s in [*perturbation_covariates_keys, *comb_keys]]
            for k, v in perturbation_idx_to_covariates.items()
        }
        perturbation_covariates_to_idx = {tuple(v): k for k, v in perturbation_idx_to_covariates.items()}
    
        control_to_perturbation = df[~df[control_key]].groupby(["global_control_mask"])["global_pert_mask"].unique()
        control_to_perturbation = control_to_perturbation.to_dict()
        control_to_perturbation = {k: np.array(sorted(v), dtype=np.int32) for k, v in control_to_perturbation.items()}
        df.set_index("cell_index", inplace=True)
        df = df.reindex(covariate_data.index)
        if not return_mask_none:
            split_covariates_mask = np.asarray(df["split_covariates_mask"].values, dtype=np.int32)
            perturbation_covariates_mask = np.asarray(df["perturbation_covariates_mask"].values, dtype=np.int32)
    
        # Create delayed tasks for each condition
        delayed_results = []
    
        # Create delayed tasks with tracking information
        perturb_covar_df = (
            df[all_combs_keys].sort_values(by=self._perturb_covar_keys).drop_duplicates(keep="first")
            # [~df[control_key]]
        )
        for _, tgt_cond in perturb_covar_df.iterrows():
>           tgt_idx = perturbation_covariates_to_idx[tuple(tgt_cond[perturbation_covariates_keys + comb_keys])]
E           KeyError: ('drug_a', 'drug_a')

src/cellflow/data/_datamanager.py:641: KeyError
=============================== warnings summary ===============================
../../../mambaforge/envs/cellflow/lib/python3.11/site-packages/jaxopt/__init__.py:59
  /Users/selman.ozleyen/mambaforge/envs/cellflow/lib/python3.11/site-packages/jaxopt/__init__.py:59: DeprecationWarning: JAXopt is no longer maintained. See https://docs.jax.dev/en/latest/ for alternatives.
    warnings.warn(

tests/model/test_cellflow.py::TestCellFlow::test_cellflow_solver[concatenation-0.0-deterministic-otfm]
  /Users/selman.ozleyen/mambaforge/envs/cellflow/lib/python3.11/site-packages/anndata/_core/aligned_df.py:68: ImplicitModificationWarning: Transforming to str index.
    warnings.warn("Transforming to str index.", ImplicitModificationWarning)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED tests/model/test_cellflow.py::TestCellFlow::test_cellflow_solver[concatenation-0.0-deterministic-otfm]
================ 1 failed, 144 deselected, 2 warnings in 7.29s =================
